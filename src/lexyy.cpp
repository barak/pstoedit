/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 55
#define YY_END_OF_BUFFER 56
static yyconst short int yy_accept[1083] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,   56,   46,
       46,   46,   46,   46,   46,   46,    1,   46,   46,   54,
       54,   54,   54,   54,    1,   54,   54,   54,   54,   54,
       54,   46,   46,   46,   46,    1,   46,   54,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   31,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    1,    1,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    1,    1,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   17,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   52,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   14,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   53,   48,   47,    0,    0,
        0,    0,    0,   51,    0,    0,   14,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   43,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    3,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   49,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   35,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    2,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    9,    0,    0,    0,    0,
       31,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   50,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    9,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   44,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   38,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   16,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   30,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   45,    0,    8,    0,    0,    0,    0,
        0,    0,    0,    6,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   40,   37,    0,    0,   34,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    8,    0,   15,    0,    0,

        0,    0,    0,    6,    0,    0,    0,   26,   29,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   12,    0,    0,    0,    0,    0,    0,   19,
        0,    0,    0,    0,    0,   39,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   12,    0,    0,    0,    0,   19,   29,   29,   29,
        0,    0,   23,   21,    0,    0,   28,    0,    0,    7,
        0,    0,    0,   13,    0,    5,    0,    0,    0,    0,
        0,    0,    0,   42,    0,    0,    0,   36,   41,    0,
        0,    0,    0,    0,    0,    0,    7,    0,    0,   13,

        0,    5,    0,    0,    0,   29,   27,    0,    0,    0,
        0,    0,    0,    0,   11,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   11,    0,    0,    0,   29,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   29,    0,    0,   22,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   20,    0,    4,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   29,    0,
        0,   20,    0,    0,    0,    0,    0,    0,    0,    4,

       18,    4,   33,    0,    0,    0,    0,    0,    0,   18,
       29,    0,    0,    0,    0,    4,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   29,   24,    0,   32,
       10,    0,    0,    6,    0,    0,   10,    0,    6,    0,
        0,    0,    0,    0,    0,    0,    5,    0,    0,    5,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    4,    0,    0,
        0,    4,    0,    0,    0,    0,    0,    0,    0,    0,
       25,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    1,    1,    1,    1,    4,    1,    1,    5,
        6,    1,    1,    1,    7,    8,    1,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    9,    1,    1,
        1,    1,    1,    1,   10,   11,   12,   13,   14,   15,
       16,   10,   10,   10,   10,   10,   17,   18,   10,   19,
       10,   10,   20,   10,   10,   10,   21,   10,   10,   10,
       22,    1,   23,    1,    1,    1,   24,   25,   26,   27,

       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   10,   40,   41,   42,   43,   44,   45,   46,
       47,   48,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[49] =
    {   0,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[1103] =
    {   0,
        0,   40,   80,  120,    8,   15,   22,   25, 2720,   27,
     3078,   28,   69,   29,   33,   47,   51,   58,   86, 2652,
     3078,   11,   94,   59,   97,   75,   73,    6,   71,   91,
       57, 2639,   90,  161,   99,  129,  110,  116,  127,  136,
      137,  144,  148,  157,  168,  169,  176, 3078,  183,  196,
      198,  211,  216,  170,  185,  191,  202,  226,  232,  200,
      217,  224,  241, 2630,  212,  131,   18,  234,  253,  178,
      248,  262,  265,  239,  218,  228,  243,  155,  245,  256,
      268,  273,  271,  314, 2573, 2561,  288,  293,  289,  297,
      301,  303,  310,  345,  324,  332,  339,  347,  352,  361,

      366,  371,  381,  337,  373,  375,  382,  387,  397,  398,
      349,  354,   88,  408,  406,  278,  424,  428,  410,  415,
      433,  393,  284,  329,  425,  412,  436,  439,  356, 2588,
      448,  285,  417,  421,  445,  443,  451, 2544, 2474, 2421,
      475,  480,  487,  464,  489,  494,  499,  504,  506,  511,
      513,  548,  526,  533,  541,  550,  556,  564,  558,  569,
      574,  456,  534,  575,  581,  524,  589,  590,  591,  595,
      515,  597,  602,  530,  607,  609,  474,  618,  613,  622,
      627,  629,  634,  637,  640,  642,  645,  651,  585,  631,
      603,  150,  399,  619,  458,  623,  646,   10,  280,  469,

      655,  579,  654,  535,  657, 2424,  517,  659,  660,  663,
      662,  664, 2346, 2324, 2287,  665,  669,  681,  683,  687,
      694,  702,  707,  709,  714,  716,  724,  729,  731,  737,
      742,  749,  754,  756,  768,  773,  779,  718,  766,  780,
      781,  785,  786,  791,  792,  793,  799,  801,  671,  775,
      807,  809,  817,  819,  824,  827,  829,  833,  836,  838,
      843,  845,  847,  222,  810,  821, 3078,  711,  762,  760,
      839,  812,  852,  850,  726,  854,  860,  685,  855,  862,
      863,  864,  866,  865,  868,  870,  465, 2279, 2262, 2027,
      880,  876,  888,  904,  906,  912,  917,  919,  924,  926,

      931,  940,  945,  955,  957,  962,  964,  972,  982,  984,
      989,  947,  949,  932,  976,  991,  996, 1000, 1001, 1005,
     1012, 1007, 1017,  890, 1024, 1028, 1033,  895, 1037, 1039,
     1041, 1043, 1046, 1051, 1053, 1055, 1059, 1063,  900,  902,
     1061, 1071, 1075,  908,  941,  986, 1006, 1034, 1079, 1018,
      878, 1081,  970, 1056, 1097, 1066, 1083, 1072,  959, 1084,
     1085, 1950, 1935, 1139, 1086, 1100, 1102, 1110, 1104, 1127,
     1117, 1147, 3078, 1152, 1154, 1161, 1166, 1171, 1176, 1178,
     1183, 1185, 1191, 1197, 1202, 1207, 1189, 1208, 1212, 1213,
     1219, 1223, 1231, 1232, 1233, 1121, 1237, 1241, 1091, 1246,

     1252, 1254, 1259, 1134, 1261, 1264, 1129, 1272, 1276, 1278,
     1281, 1283, 1286, 1204, 1290, 3078, 3078, 3078,  869, 1268,
     1265, 1221, 1279, 3078, 1294, 1099, 3078, 1295, 1296, 1299,
     1300, 1301, 1163, 1303, 1304, 1090, 1308, 1346, 1819, 1376,
        0, 1812, 1777, 1318, 1306, 3078, 1325, 1316, 1331, 1339,
     1357, 1364, 1359, 1420, 1371, 1385, 1387, 1392, 1394, 1408,
     1414, 1426, 1436, 1442, 1399, 1448, 1430, 1449, 3078, 1450,
     1457, 1463, 1462, 1464, 1468, 1469, 1470, 1475, 1312, 1456,
     1482, 1488, 1496, 1499, 1503, 1505, 1508, 1382, 1511, 1513,
     1516, 1518, 1522, 1317, 3078, 1332, 1368, 1444, 1477, 1322,

     1340, 1519, 1485, 1523, 1492, 1525, 1524, 1209, 1514, 1527,
     1530, 1533, 1336, 1532, 1754, 1746, 1542, 1534, 1538, 1549,
     1547, 1550, 1552, 1551, 1553, 1636, 1588, 1559, 1565, 3078,
     1566, 1578, 1585, 1595, 1602, 1608, 1610, 1616, 1622, 1624,
     1630, 1632, 1638, 1645, 1647, 1653, 1655, 1660, 1576, 1617,
     1661, 1570, 1589, 1662, 1668, 1669, 1675, 1681, 1687, 3078,
     1677, 1597, 1689, 1683, 1692, 1695, 1700, 1702, 1707, 1709,
     1711, 1713, 1715, 1718, 1728, 1377, 1696, 1554, 1723, 1725,
     1703, 1599, 1603, 1720, 1730, 1731, 1733, 1734, 1736, 1649,
     1751, 1737, 1735, 1739, 1748, 1534, 1741, 1745, 1752, 1755,

     1756, 1757, 1758, 1761, 1762, 1763, 1764, 1463, 1406, 1766,
     1772, 1783, 1801, 1803, 1808, 3078, 1810, 1815, 1817, 1822,
     3078, 1827, 1832, 1838, 1843, 1851, 1856, 1863, 1844, 1836,
     1868, 1870, 1874, 1879, 1789, 1880, 1881, 1886, 1888, 1781,
     1896, 1794, 1898, 1893, 1901, 1903, 1858, 1905, 1911, 1913,
     1921, 3078, 1787, 1829, 1907, 1887, 1906, 1915, 1916, 1925,
     1918, 3078, 1930, 1928, 1934, 1931, 1935, 1938, 1944, 1945,
     1403, 1948, 1947, 1949, 1951, 1955, 1956, 1957, 1958, 1960,
     1963, 1961, 1214, 1219, 1962, 1987, 3078, 1989, 1995, 2002,
     2004, 2009, 2011, 2016, 2018, 2026, 2032, 2034, 2042, 2044,

     1978, 2024, 2046, 2048, 2057, 3078, 2062, 2064, 1968, 2069,
     1966, 2071, 1980, 2075, 2078, 2080, 2083, 2085, 2087, 2089,
     2091, 2094, 2098, 2101, 2102, 2103, 2106, 1973, 2107, 2110,
     2038, 2112, 3078, 2113, 2114, 2115, 1840, 2118, 1089, 2020,
     2124, 1021, 3078, 2119, 2121, 2126, 2127, 2128, 2129, 2131,
        0,  994, 2133, 3078, 2145, 3078, 2138, 2153, 2158, 2165,
     2173, 2178, 2183, 3078, 2185, 2190, 2192, 2199, 2204, 2209,
     2210, 2211, 2215, 2216, 3078, 3078, 2225, 2217, 3078, 2226,
     2232, 2236, 2238, 2151, 2240, 2242, 2244, 2248, 2254, 2251,
     2259, 2261, 2135, 2162, 2169, 3078, 2143, 3078, 2167, 2263,

     2265, 2036, 2267, 3078, 2271,  742, 2275, 3078, 2245, 2233,
     2278, 2280, 2282, 2285, 2287, 2289, 2290, 2295, 2297, 2302,
     2304, 2322, 3078, 2324, 2329, 2331, 2337, 2342, 2344, 3078,
     2352, 2354, 2346, 2335, 2358, 3078, 2363, 2365, 2292, 2371,
     2373, 2313, 2378, 2386, 2388, 2390, 2392, 2394, 2397, 2294,
     2381, 3078, 2399, 2403, 2405, 2383, 3078,  744, 2310, 2308,
     2407, 2139, 3078, 3078, 2400, 2410, 3078, 2414, 2415, 3078,
     2420, 2422, 2428, 3078, 2433, 3078, 2435, 2440, 2445, 2447,
     2452, 2458, 2460, 3078, 2462, 2464, 2468, 3078, 3078, 2470,
     2475, 2477, 2479, 2481, 2483, 2487, 3078,  738, 2493, 3078,

     2495, 3078, 2497, 2499, 2426, 2466, 3078, 2472, 1379, 2490,
     2500, 2504, 2540, 2509, 3078, 2519, 2524, 2533, 2542, 2550,
     2556, 2561, 2565, 2567, 2569, 2607, 2526, 2580, 2582, 2584,
     2575, 3078, 2591, 2598, 2502, 2513, 2563, 2521, 2515, 2196,
     2596, 2624, 2629, 2635, 2637, 2643, 2648, 2650, 2655, 2657,
     2662, 2612, 2663, 2668, 2671, 2673, 2677, 2680, 2187, 2683,
     2685, 2592, 2416, 2573, 2620, 3078, 2687, 2690, 2692, 2728,
     2705, 2698, 2713, 2715, 2720, 2734, 3078, 2614, 2735, 2745,
     2750, 2755, 2757, 2759, 2675, 2761, 2764, 2768, 2661, 2696,
      677, 3078, 2769, 2771, 2777, 2783, 2788, 2790, 2797, 2806,

     3078, 2775, 3078, 2799, 2812, 2815, 2571, 2820, 2817, 3078,
     2794, 2824, 2792, 2828, 2836, 2847, 2849, 2854, 2863, 2868,
     2856, 2870, 2873, 2875, 2877, 2879, 2883, 3078, 2801, 3078,
     3078, 2890, 2895, 3078, 2897, 2904, 3078, 2906, 3078, 2837,
     2910, 2917, 2923, 2912, 2928, 2725, 3078, 2930, 2936, 3078,
     2807, 2938, 2943,  670, 2945, 2953, 2940, 2959, 2966, 2851,
     2973, 2982, 2803, 2984, 2991, 2864, 2996, 3003, 2925, 3005,
     2955, 3010, 2860, 2886, 2947, 2931, 2960, 2707, 2914, 2975,
     3078, 3078, 3051, 3053, 3055,  530, 3057,  524,  144, 3059,
      140, 3061, 3063,  134,   79, 3065, 3067, 3069,    0, 3071,

     3073, 3075
    } ;

static yyconst short int yy_def[1103] =
    {   0,
     1083, 1083, 1084, 1084, 1085, 1085, 1084, 1084, 1082, 1086,
     1082, 1086, 1087, 1088, 1086, 1086, 1086, 1086, 1086, 1089,
     1082, 1089, 1090, 1089, 1089, 1089, 1089, 1089, 1089, 1089,
     1089, 1089, 1089, 1091, 1089, 1089, 1089, 1089, 1086, 1086,
     1086, 1086, 1086, 1086, 1086, 1086, 1087, 1082, 1092, 1087,
     1087, 1087, 1087, 1088, 1088, 1088, 1086, 1086, 1086, 1086,
     1086, 1086, 1086, 1089, 1089, 1089, 1090, 1093, 1090, 1090,
     1090, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,
     1089, 1094, 1089, 1091,   84,   84, 1086, 1086, 1086, 1086,
     1086, 1087, 1092, 1092, 1092, 1092, 1092, 1092, 1087, 1087,

     1087, 1087, 1087, 1088, 1088, 1086, 1086, 1086, 1086, 1086,
     1089, 1090, 1093, 1093, 1093, 1093, 1093, 1090, 1090, 1090,
     1090, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1094,
     1094, 1094, 1094, 1094, 1094, 1089, 1089,   84,   84,   84,
     1086, 1086, 1086, 1086, 1086, 1087, 1092, 1092, 1092, 1092,
     1092, 1092, 1092, 1092, 1092, 1092, 1087, 1087, 1087, 1087,
     1087, 1088, 1088, 1088, 1086, 1086, 1086, 1086, 1086, 1086,
     1086, 1086, 1086, 1089, 1090, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1090, 1090, 1090, 1090, 1089, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,

     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1089, 1089,   84,   84,   84, 1086, 1086, 1086, 1086, 1086,
     1087, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092,
     1092, 1087, 1087, 1087, 1087, 1087, 1088, 1088, 1088, 1086,
     1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1089, 1090,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1090,
     1090, 1090, 1090, 1089, 1089, 1089, 1082, 1089, 1089, 1089,
     1089, 1089, 1089, 1089, 1089, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1089, 1089,   84,   84,   84,
     1086, 1086, 1086, 1086, 1086, 1087, 1092, 1092, 1092, 1092,

     1092, 1092, 1092, 1092, 1092, 1092, 1087, 1087, 1087, 1087,
     1087, 1088, 1088, 1088, 1086, 1086, 1086, 1086, 1086, 1086,
     1086, 1086, 1086, 1089, 1090, 1093, 1093, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1090, 1090, 1090, 1090, 1089, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1089,
     1089,   84,   84, 1095, 1086, 1086, 1086, 1086, 1086, 1087,
     1092, 1092, 1082, 1092, 1092, 1092, 1092, 1092, 1092, 1092,
     1087, 1087, 1087, 1087, 1087, 1087, 1088, 1088, 1088, 1086,
     1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1089, 1090,

     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1090, 1090,
     1090, 1090, 1090, 1089, 1089, 1082, 1082, 1082, 1089, 1089,
     1089, 1089, 1089, 1082, 1094, 1094, 1082, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1089, 1089, 1095,   84, 1089,
      438,  438,  438, 1086, 1086, 1082, 1086, 1086, 1087, 1092,
     1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1087, 1087,
     1087, 1087, 1087, 1087, 1088, 1088, 1088, 1086, 1082, 1086,
     1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1089, 1090,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1090, 1090,
     1090, 1090, 1090, 1089, 1082, 1089, 1089, 1089, 1089, 1089,

     1089, 1089, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1089, 1089,  440,   84, 1089, 1089, 1089, 1089,
     1089, 1089, 1089, 1089, 1089,  438,  438, 1086, 1086, 1082,
     1086, 1087, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092,
     1092, 1087, 1087, 1087, 1087, 1087, 1087, 1088, 1088, 1088,
     1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1082,
     1090, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1090,
     1090, 1090, 1090, 1090, 1089, 1089, 1089, 1089, 1089, 1089,
     1089, 1089, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1089, 1089, 1089,   84, 1089, 1089, 1089, 1089,

     1089, 1089, 1089, 1089, 1089, 1089, 1089,  438,  438, 1086,
     1086, 1086, 1087, 1092, 1092, 1082, 1092, 1092, 1092, 1092,
     1082, 1092, 1087, 1087, 1087, 1087, 1087, 1087, 1088, 1088,
     1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1090,
     1093, 1093, 1093, 1093, 1093, 1093, 1090, 1090, 1090, 1090,
     1090, 1082, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1094,
     1094, 1082, 1094, 1094, 1094, 1094, 1094, 1094, 1089, 1089,
       84, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,
     1089, 1089,  438,  438, 1086, 1086, 1082, 1092, 1092, 1092,
     1092, 1092, 1092, 1092, 1087, 1096, 1087, 1087, 1087, 1087,

     1088, 1088, 1086, 1086, 1086, 1082, 1086, 1086, 1086, 1086,
     1086, 1093, 1093, 1093, 1093, 1093, 1093, 1090, 1097, 1090,
     1090, 1090, 1089, 1089, 1089, 1089, 1089, 1089, 1094, 1094,
     1094, 1094, 1082, 1094, 1094, 1094, 1089, 1098,  438, 1089,
     1089, 1089, 1082, 1089, 1089, 1089, 1089, 1089, 1089, 1089,
      438,  440, 1086, 1082, 1092, 1082, 1092, 1092, 1092, 1092,
     1092, 1087, 1096, 1082, 1096, 1096, 1087, 1087, 1087, 1087,
     1088, 1088, 1086, 1086, 1082, 1082, 1086, 1086, 1082, 1086,
     1093, 1093, 1093, 1093, 1093, 1090, 1097, 1097, 1090, 1090,
     1090, 1089, 1089, 1089, 1094, 1082, 1094, 1082, 1094, 1094,

     1094, 1089, 1098, 1082, 1098,  440, 1089, 1082, 1099, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1086, 1092, 1092,
     1092, 1092, 1082, 1092, 1100, 1096, 1096, 1087, 1087, 1082,
     1087, 1088, 1088, 1086, 1086, 1082, 1086, 1086, 1093, 1093,
     1093, 1093, 1101, 1097, 1090, 1090, 1089, 1089, 1094, 1094,
     1094, 1082, 1094, 1102, 1098, 1089, 1082, 1099, 1099, 1099,
     1089, 1089, 1082, 1082, 1089, 1089, 1082, 1089, 1086, 1082,
     1092, 1092, 1092, 1082, 1100, 1082, 1100, 1100, 1096, 1096,
     1087, 1087, 1087, 1082, 1088, 1086, 1086, 1082, 1082, 1093,
     1093, 1101, 1101, 1097, 1090, 1090, 1082, 1094, 1094, 1082,

     1102, 1082, 1102, 1098, 1089, 1099, 1082, 1089, 1089, 1089,
     1089, 1086, 1092, 1092, 1082, 1100, 1100, 1096, 1096, 1087,
     1087, 1087, 1088, 1086, 1086, 1093, 1101, 1097, 1090, 1090,
     1094, 1082, 1102, 1098, 1089, 1099, 1089, 1089, 1089, 1089,
     1086, 1092, 1092, 1100, 1100, 1096, 1096, 1087, 1087, 1087,
     1088, 1086, 1086, 1093, 1101, 1097, 1090, 1090, 1094, 1102,
     1098, 1089, 1099, 1089, 1089, 1082, 1089, 1086, 1092, 1092,
     1100, 1100, 1096, 1096, 1087, 1087, 1082, 1088, 1086, 1086,
     1093, 1101, 1097, 1090, 1094, 1102, 1098, 1089, 1099, 1089,
     1089, 1082, 1086, 1092, 1092, 1100, 1100, 1096, 1096, 1087,

     1082, 1088, 1082, 1093, 1101, 1097, 1094, 1102, 1098, 1082,
     1099, 1089, 1089, 1086, 1092, 1092, 1100, 1100, 1096, 1096,
     1093, 1101, 1097, 1094, 1102, 1098, 1099, 1082, 1089, 1082,
     1082, 1100, 1100, 1082, 1096, 1101, 1082, 1102, 1082, 1089,
     1100, 1100, 1096, 1101, 1102, 1089, 1082, 1100, 1096, 1082,
     1089, 1100, 1096, 1089, 1100, 1096, 1089, 1100, 1096, 1089,
     1100, 1096, 1089, 1100, 1096, 1089, 1100, 1096, 1089, 1100,
     1089, 1100, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,
     1082,    0, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,

     1082, 1082
    } ;

static yyconst short int yy_nxt[3127] =
    {   0,
      858,   11,   12,   13,   14,   15,   16,   17,   65,   11,
       33,   34,   65,   65,   35,   36,   11,   33,   34,   48,
      112,   35,   36,   21,   22,   23,   21,   22,   23,   40,
       40,   55,   41,   41,   56,   57,   18,   77,   41,  273,
       19,   11,   12,   13,   14,   15,   16,   17,   37,   40,
       42,   66,   41,   40,   58,   37,   41,   59,   59,   65,
       40,   65,   38,   41,   43,   38,   72,   44,   45,   46,
       48,   49,   50,   65,   51,   65,   18,   65,   59,  441,
       19,   21,   22,   23,   80,   60,   24,   25,   40,   48,
      114,   41,   65,   65,   52,   48,   68,   69,   81,   65,

       53,   65,   78,   73,   73,   26,   72,   27,   28,   74,
       76,   61,   65,   62,   29,   30,   63,   75,   65,   70,
       31,   21,   22,   23,   73,   71,   24,   25,   79,   40,
       66,   65,   41,   65,  130,   73,   73,   80,   40,   57,
       84,   41,   41,   80,   64,   26,   87,   27,   28,   41,
       40,  267,   65,   41,   29,   30,   73,   65,  111,   40,
       31,   64,   41,   82,   83,   64,   64,   64,   64,   64,
       40,   40,   55,   41,   41,   56,   45,   48,   92,   48,
      112,   51,   64,   64,   48,   94,   85,   55,   95,   88,
       56,  126,   86,  105,   89,   90,   56,   48,   92,   48,

      101,   51,   40,   51,   40,   41,   99,   41,   91,  100,
       96,   97,   48,   92,   65,  120,   51,   48,   92,   40,
       65,   51,   41,   98,   65,  104,   40,  106,   40,   41,
       65,   41,   59,   59,   40,   48,  114,   41,   59,   59,
      108,   65,   45,   40,  107,   65,   41,   65,  102,   48,
      112,  103,   66,   59,   48,  112,  124,  123,   65,   59,
      339,  115,  116,  118,   65,  109,  119,   65,   73,   73,
       65,   73,   73,   65,  117,  131,  122,  125,  110,   48,
      114,  136,   65,  121,  137,  132,   65,  131,  127,   73,
       40,   40,   73,   41,   41,   40,  206,  128,   41,   40,

      133,  134,   41,   40,   48,   92,   41,  129,   51,  182,
      274,   48,   94,  135,   64,   95,   65,   64,   64,   64,
       64,   64,   64,  141,  145,   48,  152,  190,   45,   95,
      143,   65,  142,   48,   94,   64,   64,   95,  144,   55,
       48,   94,   56,  146,   95,  138,   48,   94,   48,   94,
       95,   65,   95,   48,   92,   48,  112,   51,   65,  147,
      191,  148,   48,   92,  162,  149,   51,   48,   92,  153,
      154,   51,   48,   92,  155,   55,   51,   40,   56,  157,
       41,  150,   48,   92,   40,  151,   51,   41,  156,   40,
      174,  159,   41,  200,  175,   65,  163,  158,  164,   40,

       40,   65,   41,   41,  161,  160,  146,   48,  114,   48,
      114,   48,  112,  104,   65,  168,   48,  112,  165,  131,
      166,  167,  176,  131,  177,   48,  114,   65,  178,   48,
      112,  169,  170,  189,   48,  112,  171,  172,   65,  193,
      268,   65,  173,  181,  179,   65,  186,  131,  180,  187,
      131,  183,  208,   65,  207,  185,  188,  195,   55,  192,
       65,   56,  201,  194,  202,  184,   40,   65,  203,   41,
      211,   65,  209,  196,  197,   48,  114,   40,  198,  199,
       41,  270,   40,  361,  204,   41,  210,  212,  205,   40,
      219,   40,   41,  253,   41,   48,   92,  237,  216,   51,

       48,   94,  275,  217,   95,   48,   94,   48,   94,   95,
      218,   95,   48,   94,   48,   94,   95,   40,   95,  131,
       41,  221,  222,  224,   54,  220,   40,   48,   94,   41,
       39,   95,   65,  225,   48,   94,   55,  131,   95,   56,
      155,  223,   48,   94,  246,  282,   95,  241,  226,   48,
       94,   48,   94,   95,  228,   95,  249,   48,   92,   48,
       92,   51,  147,   51,  148,   48,   92,  229,  149,   51,
       48,   92,  280,  227,   51,   48,   92,   55,  238,   51,
       56,  131,  230,   40,  150,  232,   41,   65,  151,  231,
      233,   40,   40,   40,   41,   41,   41,   40,  278,   40,

       41,  234,   41,  236,   40,   65,  235,   41,   48,  112,
       48,  114,  264,  243,   48,  114,  242,  240,  239,   48,
      114,   65,  244,   48,  114,   65,  245,  247,   48,  114,
       48,  114,  251,   65,  250,   48,  114,  266,   48,  114,
      248,   48,  112,   48,  112,  254,   48,  112,   65,  183,
      255,  252,   48,  112,  271,  256,  131,  131,  265,  131,
      269,  131,  131,  257,   65,  131,   65,   40,  261,  260,
       41,   40, 1057,   65,   41,  258,  259,  272,  276, 1013,
      263,  279,  262,   40,  209,   40,   41,  131,   41,   40,
      287,  286,   41,  283,  324,   48,   92,  277,  291,   51,

      352,  284,  285,   48,   94,  292,  294,   95,   48,   94,
       48,   94,   95,   65,   95,   48,   94,   48,   94,   95,
       55,   95,  293,   56,  299,   48,   94,  295,   65,   95,
       48,   94,   48,   94,   95,  296,   95,  297,   48,   94,
      931,  298,   95,   48,   94,  300,  859,   95,  342,  313,
       48,   92,  301,  349,   51,   48,   92,   48,   92,   51,
      303,   51,   65,  305,   65,  304,  856,  302,   55,   48,
       92,   56,  308,   51,   48,   92,   48,  112,   51,  306,
      307,   55,  315,   40,   56,   41,   41,   40,   40,  344,
       41,   41,  309,   40,   40,   40,   41,   41,   41,  343,

      311,   40,  314,   40,   41,  312,   41,  310,   48,  114,
       48,  114,   65,  317,   65,  318,  325,  321,   48,  114,
       48,  114,  316,   65,  323,   48,  114,  319,   48,  114,
       48,  114,  328,  320,   48,  114,  322,   48,  114,   48,
      112,   65,  326,  327,   48,  112,   48,  112,   48,  112,
      329,  340,   65,  346,   65,  341,  131,  131,  331,  333,
      330,  336,  131,  332,  131,  355,  131,  131,  131,  335,
      131,   65,   65,  334,  338,  345,  347,  201,   40,  202,
      131,   41,   40,  203,  337,   41,  353,  348,  496,  350,
       40,  358,   65,   41,  351,  356,  373,  114,  354,  204,

      357,  360,   65,  205,   65,  359,   40,  365,   40,   41,
       65,   41,  426,   48,   92,  367,  366,   51,   48,   94,
       48,   94,   95,  414,   95,  373,   94,   48,   94,   95,
      399,   95,   48,   94,  389,  419,   95,   56,  370,  415,
      369,   48,   94,   65,  368,   95,   48,   94,  371,   55,
       95,   55,   56,  372,   56,  374,   48,   94,   48,   94,
       95,  131,   95,   48,   94,   48,   92,   95,  420,   51,
      387,  375,  131,   48,   92,  388,  376,   51,   40,  377,
      379,   41,  378,   48,  383,   48,   92,   51,   65,   51,
       48,   92,  435,   40,   51,  380,   41,  385,   40,  428,

      381,   41,   40,   40,  390,   41,   41,   40,   65,   40,
       41,  382,   41,  421,   40,  384,   45,   41,  817,   40,
      131,  391,   41,  809,  386,   48,  112,  393,  394,   48,
      114,  422,  395,  392,   48,  114,   65,  396,   48,  114,
       48,  114,   48,  114,   48,  114,  398,   48,  114,  425,
      400,  397,   48,  114,   48,  112,   48,  112,  131,  401,
       48,  112,  416,   65,   48,  112,  403,  402,  131,  407,
      406,  412,  417,   65,  131,  405,  418,   65,  423,  404,
      424,   65,  427,  131,  408,  131,   65,   65,   40,  409,
      411,   41,   65,   65,  410,  434,  429,  806,  413,  131,

      432,  131,   40,  446,   40,   41,   40,   41,  513,   41,
      433,  201,   40,  202,  444,   41,  504,  203,   48,   94,
      436,  479,   95,   40,  437,  430,   41,  448,   48,   92,
       48,  114,   51,  204,  445,   48,  114,  205,  431,   64,
      447,   65,   64,   64,   64,   64,   64,  440,   48,   94,
      449,  450,   95,   48,   94,   48,   94,   95,  476,   95,
       64,   64,   48,  454,  451,  131,   95,   48,   94,  487,
      442,   95,   48,   94,  443,  484,   95,   48,   94,   48,
       94,   95,  452,   95,   48,   92,   48,   92,   51,  510,
       51,   55,   48,   92,   56,  453,   51,  456,   48,   92,

      455,  459,   51,   48,   92,  458,   65,   51,   48,   92,
       55,  131,   51,   56,   55,   40,  457,   56,   41,  461,
      469,   40,  460,   65,   41,   40,  463,  752,   41,  465,
      464,  146,  462,   40,   40,   40,   41,   41,   41,   40,
      467,  751,   41,   40,  468,  494,   41,   48,  112,  466,
      471,  588,  104,   48,  114,   48,  114,  472,  501,  470,
       48,  114,   48,  114,  473,   48,  114,   65,  478,  480,
       65,  482,  475,   48,  114,  477,  474,   48,  112,   48,
      112,   65,   48,  112,   48,  112,  481,   48,  112,  483,
      486,  495,   65,  497,  489,  485,  131,  131,  131,  488,

      498,  131,  131,  131,  500,  131,  131,  492,   40,  493,
       65,   41,  499,  530,   65,  490,  491,  502,   40,   65,
       40,   41,  507,   41,   65,  505,  530,   40,  503,  529,
       41,  512,   48,   92,   65,  509,   51,  506,   65,  508,
       48,   94,   65,  511,   95,  514,   64,  575,   65,   64,
       64,   64,   64,   64,  515,  528,  580,  531,   48,   94,
       48,   94,   95,  576,   95,   48,   94,   64,   64,   95,
       65,  532,   48,   94,  581,  593,   95,  442,   65,   65,
      534,   65,  536,   48,  114,  533,   48,   94,   48,   94,
       95,  577,   95,   48,   94,   48,   92,   95,  538,   51,

      517,   55,  518,  519,   56,  535,  520,  521,  569,   48,
       92,  522,  523,   51,  524,   48,   92,  540,  541,   51,
      525,   48,   94,  539,  653,   95,  938,   48,   92,  548,
      739,   51,   55,  542,  147,   56,  148,   48,   92,  684,
      149,   51,  543,   48,   92,  544,   65,   51,  537,  545,
       55,   40,   40,   56,   41,   41,  150,   48,  112,   40,
      151,  550,   41,  546,   40,   40,   40,   41,   41,   41,
       40,   40,   40,   41,   41,   41,  560,   40,  549,   65,
       41,  578,  547,   48,  114,  551,  554,  131,  553,   48,
      114,  552,  683,  559,  131,  556,  561,   48,  114,  555,

       48,  114,  557,  558,   48,  114,   48,  114,  579,   48,
      114,  563,   48,  112,   48,  112,  131,   48,  112,   48,
      112,   65,  565,   48,  112,  131,  131,  131,  562,  131,
      566,  583,  131,  585,   65,  131,   65,  564,  568,  572,
       65,  589,  582,  567,   65,  573,  584,  571,  586,   65,
      570,   65,   65,   65,   65,   65,   65,  599,  587,  592,
      591,   40,  574,  671,   41,  590,  594,   40,   40,  597,
       41,   41,  632,  598,  600,   41,  601,  604,   55,   48,
       92,   56,  602,   51,  607,  655,   48,   94,  606,  605,
       95,   40,  603,  612,   41,  610,   48,   94,   48,  114,

       95,   65,  614,  616,   94,  131,  611,   95,  613,   48,
       94,   48,   94,   95,  641,   95,  629,   48,   94,   55,
      660,   95,   56,   48,   94,  621,   94,   95,  609,   95,
      615,   48,   94,   48,   92,   95,  633,   51,  659,   48,
       92,  618,  619,   51,  617,  620,   48,   92,   48,   92,
       51,  131,   51,  630,   48,   92,   48,   92,   51,  608,
       51,  530,   55,   40,   40,   56,   41,   41,  622,  623,
       40,   40,  667,   41,   41,  624,  626,   40,   48,  112,
       41,  625,  627,   40,  616,  114,   41,  631,  628,   40,
       48,  114,   41,   48,  114,  636,   48,  114,   65,  635,

      634,   48,  114,  621,  114,   65,  637,  640,   48,  114,
       48,  112,   48,  112,   48,  112,   48,  112,  638,   48,
      112,  644,  131,  645,  642,   65,  639,   65,  643,  652,
       65,  662,  131,  131,  654,  131,  131,   65,  131,  131,
      658,   65,  649,   65,  650,  646,  647,   65,  648,  656,
       65,  651,  530,  131,   65,  661,  657,   65,   65,   65,
       65,  665,  666,   65,   65,   65,   65,  663,   40,  596,
      672,   41,  669,  664,   40,  668,  670,   41,  595,  598,
      677,  675,  621,  112,  687,   40,  673,  676,   41,   65,
      682,   40,  678,  674,   41,   48,  114,  681,  679,  686,

      527,  680,  621,   92,   48,   94,   51,  685,   95,   48,
       94,   48,   94,   95,  723,   95,   48,   94,   48,   94,
       95,  713,   95,   48,   94,  707,  688,   95,   48,   94,
      706,   65,   95,   48,   92,  689,  690,   51,   55,   48,
       92,   56,   65,   51,   48,   92,   55,  526,   51,   56,
      694,  691,   48,   92,  516,  692,   51,   48,   92,   48,
      112,   51,  702,  693,   48,   92,  695,  696,   51,  697,
       40,  700,   40,   41,  701,   41,   40,  802,  698,   41,
      706,   40,   40,   40,   41,   41,   41,  699,   40,   65,
       40,   41,  718,   41,   48,  114,  703,   48,  114,   48,

      114,  705,   48,  114,   48,  114,   48,  112,   65,   65,
      704,  711,   48,  112,   48,  112,  709,   65,   65,  712,
      131,  708,   48,  112,  714,  710,  717,  131,  725,  722,
      131,  715,  131,  131,  719,  733,  131,  131,  720,  728,
      131,  726,  716,  724,  721,  730,   65,   65,  729,   65,
       65,   65,  743,   65,  727,  732,  731,   65,   65,   65,
       65,  736,   65,   65,  753,   65,  439,   41,   40,  734,
       40,   41,  742,   41,  738,   65,  735,  438,  737,  740,
       55,  756,  114,   56,  744,  745,  749,  741,  754,   40,
       48,   94,   41,  747,   95,  748,  756,   94,  746,  778,

       95,  780,  750,   48,   94,   48,   94,   95,  794,   95,
       48,   94,   48,   94,   95,  771,   95,   48,   94,   48,
       92,   95,   65,   51,  755,  757,   55,  764,  765,   56,
      758,  766,  759,   48,   92,   48,   92,   51,   65,   51,
      131,  760,  768,   48,   92,   48,   92,   51,   40,   51,
       40,   41,  772,   41,  364,  762,  807,  761,  775,   40,
      767,  797,   41,  776,   40,  854,   40,   41,  770,   41,
      779,   40,   48,  114,   41,  774,   48,  114,  769,   48,
      114,   48,  114,  773,   48,  114,   48,  112,  764,  788,
       48,  112,   48,  112,  777,   48,  112,  789,  782,  775,

       65,  783,  776,   65,   65,   65,  781,  779,   65,  131,
      784,  796,  131,  798,  131,  131,  131,  131,  791,  804,
      805,   65,  786,   65,  785,  808,   65,  790,   65,   65,
       65,   65,  792,   65,  793,   40,  799,   65,   41,   48,
       94,   65,  795,   95,  800,  131,   48,   94,  811,  810,
       95,  814,  823,  114,   48,   94,  801,  812,   95,   48,
       94,  816,  908,   95,   65,  813,  823,   94,  815,  131,
       95,  131,  819,  818,   48,   94,  847,  820,   95,   48,
       92,  821,  850,   51,  764,  765,  764,  765,  766,  131,
      766,  764,  827,   48,   92,  766,  849,   51,   65,  822,

       48,   92,  848,  824,   51,  830,   92,  825,  851,   51,
       48,   92,   55,   55,   51,   56,   56,   40,   40,   40,
       41,   41,   41,  829,  985,  826,  836,   40,   40,  828,
       41,   41,  967,   48,  114,   65,  831,   48,  114,   48,
      114,   48,  114,   48,  112,  764,  788,  859,  833,  764,
      788,  834,  830,  112,  832,   48,  112,  835,  837,  839,
       48,  112,  836,   65,  852,  131,  838,  131,  804,  805,
      842,  843,  804,  805,  861,  840,  857,   65,  845,  841,
       65,  863,   65,  864,   65,  860,  846,   65,  844,   65,
      867,   65,   65,  870,  114,  853,  131,   40,  870,   94,

       41,  363,   95,   48,   94,   48,   94,   95,  362,   95,
      859,  855,  859,  862,  874,  114,  290,  868,  866,  865,
      898,  598,  869,   48,   94,  874,   94,   95,  871,   95,
      876,  877,  764,  765,  878,  906,  766,   40,  764,  765,
       41,  872,  766,   48,   92,   48,   92,   51,   55,   51,
      860,   56,  873,   48,   92,  884,   55,   51,  879,   56,
       40,  289,  880,   41,  888,   40,  889,   40,   41,  288,
       41,  882,   48,  114,   48,  114,  886,  826,  881,  876,
      893,  883,  885,  131,  219,   65,  887,  764,  788,   48,
      112,   48,  112,  888,   65,  889,   65,  890,  897,  131,

      900,  131,   65,  891,  902,  903,  804,  805,  907,   65,
      905,  899,   65,  894,  598,  895,   65,   40,  859,  896,
       41,   48,  913,   48,   94,   95,  281,   95,   65,  915,
       94,  909,  904,   95,  876,  877,  876,  877,  878,  989,
      878,  876,  917,  911,  215,  878,  764,  765,  764,  765,
      766,  910,  766,   48,   92,  935,  912,   51,  914,   48,
       92,   48,   92,   51,   55,   51,  924,   56,  859,   41,
       40,   48,  926,   41,   65,  916,  915,  114,  876,  893,
      876,  893,  764,  788,   48,  112,  918,  921,   48,  112,
      919,  922,   65,  920,  932,  131,  902,  903,  902,  903,

      804,  805,   65,  923,   65,  925,   40,  936,  214,   41,
       48,   94,  929,  937,   95,  859,  966,   65,  930,  927,
      876,  877,  928,   65,  878,  876,  877,  876,  893,  878,
      219,  940,  941,  962,  764,  765,  939,  933,  766,  963,
      934,   48,   94,  764,  765,   95,  944,  766,  965,  945,
      943,   48,  948,  955,  147,   51,  148,   48,   92,  946,
      149,   51,   48,   92,  916,   65,   51,  951,  942,   40,
       56,   40,   41,  131,   41,   65,  150,  131,  947,  213,
      151,  764,  788,   48,  112,   48,  112,  949,  952,  201,
      131,  202,  902,  903,   65,  203,  140,  950,   40,  804,

      805,   41,  964,  959,  990,  953,  956,   45,   48,  114,
      139,  204, 1024,  957,  979,  205, 1002,   41,  960,   56,
      958,  176,   65,  177,  961,   48,   94,  178,  988,   95,
       48,  970,   65,  968,   95,  954,  876,  877,  876,  877,
      878,   65,  878,  179,  764,  765,  991,  180,  766,  764,
      974,   48,   92,  766,   65,   51,   48,   92,  977,   92,
       51,  969,   51,  859,   55,   40,  973,   56,   41,   48,
      114,  975,  876,  893,  764,  788,  971,  131,   48,  112,
      972,  977,  112,  978,  902,  903,  804,  805,  992,   65,
      146,  976,   40,   48,   94,   41,  983,   95,   65,  876,

      877, 1011,  104,  878,  980,  981,  876,  877,  987,   65,
      878, 1007,  982,  984,  764,  765,  764,  765,  766, 1082,
      766,   48, 1000, 1082,  986,   51,  993,   65,  994,   48,
       94,  996, 1082,   95,  997, 1001,   92,   40, 1079,   51,
       41, 1012,  147,  999,  148, 1082, 1003,   40,  149,  995,
       41,   48,  114,  998, 1051,  826,  876,  893,  764,  788,
     1001,  112,  902,  903,  150,  804,  805, 1082,  151, 1010,
       65,   40,   48,   94,   41,   45,   95,   55,   48, 1016,
       56, 1005,   95, 1082,  876,  877, 1004, 1008,  878,  876,
     1018,  764,  765,  878,   65,  766,  859, 1006,  764,  765,

       48,  114,  766,   65, 1009,   65, 1017,   48,   92,   65,
     1014,   51, 1015,  876,  893,  104,  764,  788,  804,  805,
     1019,  902,  903, 1029, 1027, 1028,   65, 1082, 1020, 1030,
       40, 1082,   66,   41, 1054, 1022, 1040, 1031,   94,   65,
     1021,   95, 1066, 1025, 1082, 1023,  146, 1026,   48,   94,
      876,  877,   95,   65,  878,  876,  877, 1031,  114,  878,
     1046,  147,   65,  148, 1034,  765,   65,  149,  766,  764,
      765,  876,  893,  766, 1034,  788, 1037,  131,  902,  903,
     1039,  805, 1033,  150,  530,  859, 1082,  151,   65, 1032,
     1082,  876,  877, 1063,  916,  878,  876,  877,  764,  765,

      878, 1074,  766, 1069, 1035,  876,  893,  902,  903, 1082,
     1036, 1047,  877, 1047,  893,  878,   65, 1038,  876,  877,
     1041, 1075,  878, 1043,  764,  765, 1042,   65,  766, 1050,
      903,  876,  877,   65, 1044,  878, 1045,  764,  765,  876,
      877,  766,   65,  878,  764,  765,  876,  877,  766,   65,
      878, 1049, 1071, 1048,  764,  765, 1052,   65,  766, 1080,
      876,  877,   65, 1082,  878, 1060, 1055,  764, 1062, 1082,
     1076,  766, 1077, 1053,  876,  877, 1081,   65,  878, 1056,
       66, 1082, 1058,  764,  765,  876, 1067,  766, 1082,  878,
     1082, 1073,  764, 1068, 1059, 1061,  766,  876,  877, 1078,

     1082,  878, 1082, 1065,  764,  765,  876, 1072,  766, 1082,
      878,  876,  877, 1082, 1064,  878, 1082, 1070, 1082, 1082,
     1082, 1082,  826, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082,  916, 1082, 1082, 1082,
     1082, 1082, 1082,  826, 1082, 1082, 1082, 1082, 1082, 1082,
      916,   10,   10,   20,   20,   32,   32,   47,   47,   67,
       67,   93,   93,  113,  113,  763,  763,  787,  787,  803,
      803,  875,  875,  892,  892,  901,  901,    9, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,

     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082
    } ;

static yyconst short int yy_chk[3127] =
    {   0,
     1099,    1,    1,    1,    1,    1,    1,    1,   28,    5,
        5,    5,  198,   22,    5,    5,    6,    6,    6,   67,
       67,    6,    6,    7,    7,    7,    8,    8,    8,   10,
       12,   14,   10,   12,   14,   15,    1,   28,   15,  198,
        1,    2,    2,    2,    2,    2,    2,    2,    5,   16,
       12,   22,   16,   17,   16,    6,   17,   17,   17,   31,
       18,   24,    7,   18,   12,    8,   24,   12,   12,   12,
       13,   13,   13,   29,   13,   27,    2,   26,   17, 1095,
        2,    3,    3,    3,   31,   18,    3,    3,   19,  113,
      113,   19,   33,   30,   13,   23,   23,   23,   31,   25,

       13,   35,   29,   25,   25,    3,   35,    3,    3,   26,
       27,   19,   37,   19,    3,    3,   19,   26,   38,   23,
        3,    4,    4,    4,   25,   23,    4,    4,   30,   39,
       33,   36,   39,   66, 1094,   36,   36,   37,   40,   41,
     1091,   40,   41,   38, 1089,    4,   42,    4,    4,   42,
       43,  192,  192,   43,    4,    4,   36,   78,   66,   44,
        4,   34,   44,   34,   34,   34,   34,   34,   34,   34,
       45,   46,   54,   45,   46,   54,   40,   47,   47,   70,
       70,   47,   34,   34,   49,   49,   34,   55,   49,   43,
       55,   78,   34,   56,   44,   45,   56,   50,   50,   51,

       51,   50,   60,   51,   57,   60,   50,   57,   46,   50,
       49,   49,   52,   52,   65,   70,   52,   53,   53,   61,
       75,   53,   61,   49,  264,   55,   62,   57,   58,   62,
       76,   58,   58,   58,   59,   68,   68,   59,   59,   59,
       61,   74,   57,   63,   60,   77,   63,   79,   52,   71,
       71,   53,   65,   58,   69,   69,   76,   75,   80,   59,
      264,   68,   68,   69,   72,   62,   69,   73,   72,   72,
       81,   73,   73,   83,   68,   82,   74,   77,   63,  116,
      116,   83,  199,   71,   83,   82,  123,  132,   79,   72,
       87,   89,   73,   87,   89,   88,  132,   80,   88,   90,

       82,   82,   90,   91,   92,   92,   91,   81,   92,  116,
      199,   93,   93,   82,   84,   93,   84,   84,   84,   84,
       84,   84,   84,   87,   91,   95,   95,  123,   87,   95,
       89,  124,   88,   96,   96,   84,   84,   96,   90,  104,
       97,   97,  104,   92,   97,   84,   94,   94,   98,   98,
       94,  111,   98,   99,   99,  112,  112,   99,  129,   94,
      124,   94,  100,  100,  104,   94,  100,  101,  101,   96,
       97,  101,  102,  102,   98,  105,  102,  106,  105,   99,
      106,   94,  103,  103,  107,   94,  103,  107,   98,  108,
      111,  101,  108,  129,  112,  122,  105,  100,  105,  109,

      110,  193,  109,  110,  103,  102,  101,  115,  115,  114,
      114,  119,  119,  105,  126,  109,  120,  120,  106,  133,
      107,  108,  114,  134,  114,  117,  117,  125,  114,  118,
      118,  109,  109,  122,  121,  121,  109,  109,  127,  126,
      193,  128,  110,  115,  114,  136,  119,  135,  114,  120,
      131,  117,  134,  137,  133,  118,  121,  128,  162,  125,
      195,  162,  131,  127,  131,  117,  144,  287,  131,  144,
      136,  200,  135,  128,  128,  177,  177,  141,  128,  128,
      141,  195,  142,  287,  131,  142,  135,  137,  131,  143,
      144,  145,  143,  177,  145,  146,  146,  162,  141,  146,

      147,  147,  200,  142,  147,  148,  148,  149,  149,  148,
      143,  149,  150,  150,  151,  151,  150,  171,  151,  207,
      171,  146,  147,  148, 1088,  145,  166,  153,  153,  166,
     1086,  153,  174,  149,  154,  154,  163,  204,  154,  163,
      151,  147,  155,  155,  171,  207,  155,  166,  150,  152,
      152,  156,  156,  152,  153,  156,  174,  157,  157,  159,
      159,  157,  152,  159,  152,  158,  158,  154,  152,  158,
      160,  160,  204,  152,  160,  161,  161,  164,  163,  161,
      164,  202,  155,  165,  152,  157,  165,  189,  152,  156,
      158,  167,  168,  169,  167,  168,  169,  170,  202,  172,

      170,  159,  172,  161,  173,  191,  160,  173,  175,  175,
      176,  176,  189,  168,  179,  179,  167,  165,  164,  178,
      178,  194,  169,  180,  180,  196,  170,  172,  181,  181,
      182,  182,  176,  190,  175,  183,  183,  191,  184,  184,
      173,  185,  185,  186,  186,  178,  187,  187,  197,  180,
      179,  176,  188,  188,  196,  181,  203,  201,  190,  205,
      194,  208,  209,  182,  211,  210,  212,  216,  186,  185,
      216,  217, 1054,  249,  217,  183,  184,  197,  201,  991,
      188,  203,  187,  218,  205,  219,  218,  278,  219,  220,
      212,  211,  220,  208,  249,  221,  221,  201,  216,  221,

      278,  209,  210,  222,  222,  217,  219,  222,  223,  223,
      224,  224,  223,  268,  224,  225,  225,  226,  226,  225,
      238,  226,  218,  238,  224,  227,  227,  220,  275,  227,
      228,  228,  229,  229,  228,  221,  229,  222,  230,  230,
      898,  223,  230,  231,  231,  225,  858,  231,  268,  238,
      232,  232,  226,  275,  232,  233,  233,  234,  234,  233,
      228,  234,  270,  230,  269,  229,  806,  227,  239,  235,
      235,  239,  233,  235,  236,  236,  250,  250,  236,  231,
      232,  237,  240,  241,  237,  240,  241,  242,  243,  270,
      242,  243,  234,  244,  245,  246,  244,  245,  246,  269,

      236,  247,  239,  248,  247,  237,  248,  235,  251,  251,
      252,  252,  265,  242,  272,  243,  250,  246,  253,  253,
      254,  254,  241,  266,  248,  255,  255,  244,  256,  256,
      257,  257,  253,  245,  258,  258,  247,  259,  259,  260,
      260,  271,  251,  252,  261,  261,  262,  262,  263,  263,
      254,  265,  274,  272,  273,  266,  276,  279,  256,  258,
      255,  261,  277,  257,  280,  281,  282,  284,  283,  260,
      285,  419,  286,  259,  263,  271,  273,  281,  292,  281,
      351,  292,  291,  281,  262,  291,  279,  274,  419,  276,
      293,  284,  324,  293,  277,  282,  328,  328,  280,  281,

      283,  286,  339,  281,  340,  285,  294,  291,  295,  294,
      344,  295,  351,  296,  296,  293,  292,  296,  297,  297,
      298,  298,  297,  339,  298,  299,  299,  300,  300,  299,
      324,  300,  301,  301,  314,  344,  301,  314,  296,  340,
      295,  302,  302,  345,  294,  302,  303,  303,  297,  312,
      303,  313,  312,  298,  313,  300,  304,  304,  305,  305,
      304,  359,  305,  306,  306,  307,  307,  306,  345,  307,
      312,  301,  353,  308,  308,  313,  302,  308,  315,  303,
      305,  315,  304,  309,  309,  310,  310,  309,  346,  310,
      311,  311,  359,  316,  311,  306,  316,  311,  317,  353,

      307,  317,  318,  319,  315,  318,  319,  320,  347,  322,
      320,  308,  322,  346,  321,  310,  315,  321,  752,  323,
      350,  316,  323,  742,  311,  325,  325,  318,  319,  326,
      326,  347,  320,  317,  327,  327,  348,  321,  329,  329,
      330,  330,  331,  331,  332,  332,  323,  333,  333,  350,
      325,  322,  334,  334,  335,  335,  336,  336,  354,  326,
      337,  337,  341,  341,  338,  338,  329,  327,  356,  333,
      332,  338,  342,  342,  358,  331,  343,  343,  348,  330,
      349,  349,  352,  352,  334,  357,  360,  361,  365,  335,
      337,  365,  436,  399,  336,  358,  354,  739,  338,  355,

      356,  426,  366,  367,  367,  366,  369,  367,  436,  369,
      357,  355,  368,  355,  365,  368,  426,  355,  371,  371,
      360,  399,  371,  396,  361,  355,  396,  369,  370,  370,
      407,  407,  370,  355,  366,  404,  404,  355,  355,  364,
      368,  364,  364,  364,  364,  364,  364,  364,  372,  372,
      370,  371,  372,  374,  374,  375,  375,  374,  396,  375,
      364,  364,  376,  376,  372,  433,  376,  377,  377,  407,
      364,  377,  378,  378,  364,  404,  378,  379,  379,  380,
      380,  379,  374,  380,  381,  381,  382,  382,  381,  433,
      382,  387,  383,  383,  387,  375,  383,  378,  384,  384,

      377,  381,  384,  385,  385,  380,  414,  385,  386,  386,
      388,  508,  386,  388,  389,  390,  379,  389,  390,  383,
      391,  391,  382,  422,  391,  392,  385,  684,  392,  387,
      386,  383,  384,  393,  394,  395,  393,  394,  395,  397,
      389,  683,  397,  398,  390,  414,  398,  400,  400,  388,
      393,  508,  389,  401,  401,  402,  402,  394,  422,  392,
      403,  403,  405,  405,  394,  406,  406,  421,  398,  400,
      420,  402,  395,  408,  408,  397,  394,  409,  409,  410,
      410,  423,  411,  411,  412,  412,  401,  413,  413,  403,
      406,  415,  415,  420,  409,  405,  425,  428,  429,  408,

      420,  430,  431,  432,  421,  434,  435,  412,  445,  413,
      437,  445,  420,  479,  479,  410,  411,  423,  448,  494,
      444,  448,  430,  444,  500,  428,  447,  447,  425,  445,
      447,  435,  449,  449,  496,  432,  449,  429,  513,  431,
      450,  450,  501,  434,  450,  437,  438,  494,  438,  438,
      438,  438,  438,  438,  438,  444,  500,  448,  451,  451,
      453,  453,  451,  496,  453,  452,  452,  438,  438,  452,
      497,  449,  455,  455,  501,  513,  455,  438,  440,  576,
      451,  909,  453,  488,  488,  450,  456,  456,  457,  457,
      456,  497,  457,  458,  458,  459,  459,  458,  455,  459,

      440,  465,  440,  440,  465,  452,  440,  440,  488,  460,
      460,  440,  440,  460,  440,  461,  461,  457,  458,  461,
      440,  454,  454,  456,  576,  454,  909,  462,  462,  465,
      671,  462,  467,  459,  454,  467,  454,  463,  463,  609,
      454,  463,  460,  464,  464,  461,  498,  464,  454,  462,
      466,  468,  470,  466,  468,  470,  454,  480,  480,  471,
      454,  467,  471,  463,  473,  472,  474,  473,  472,  474,
      475,  476,  477,  475,  476,  477,  478,  478,  466,  499,
      478,  498,  464,  481,  481,  468,  472,  503,  471,  482,
      482,  470,  608,  477,  505,  474,  480,  483,  483,  473,

      484,  484,  475,  476,  485,  485,  486,  486,  499,  487,
      487,  482,  489,  489,  490,  490,  509,  491,  491,  492,
      492,  502,  484,  493,  493,  504,  507,  506,  481,  510,
      485,  503,  511,  505,  514,  512,  518,  483,  487,  491,
      519,  509,  502,  486,  517,  492,  504,  490,  506,  521,
      489,  520,  522,  524,  523,  525,  578,  518,  507,  512,
      511,  528,  493,  596,  528,  510,  514,  529,  531,  517,
      529,  531,  552,  517,  519,  552,  520,  523,  549,  532,
      532,  549,  521,  532,  525,  578,  533,  533,  524,  523,
      533,  553,  522,  531,  553,  528,  534,  534,  562,  562,

      534,  582,  533,  535,  535,  583,  529,  535,  532,  536,
      536,  537,  537,  536,  562,  537,  549,  538,  538,  550,
      583,  538,  550,  539,  539,  540,  540,  539,  527,  540,
      534,  541,  541,  542,  542,  541,  553,  542,  582,  543,
      543,  537,  538,  543,  536,  539,  544,  544,  545,  545,
      544,  590,  545,  550,  546,  546,  547,  547,  546,  526,
      547,  548,  548,  551,  554,  548,  551,  554,  541,  542,
      555,  556,  590,  555,  556,  543,  545,  557,  561,  561,
      557,  544,  546,  558,  564,  564,  558,  551,  547,  559,
      563,  563,  559,  565,  565,  556,  566,  566,  577,  555,

      554,  567,  567,  568,  568,  581,  557,  561,  569,  569,
      570,  570,  571,  571,  572,  572,  573,  573,  558,  574,
      574,  566,  584,  567,  563,  579,  559,  580,  565,  575,
      575,  585,  585,  586,  577,  587,  588,  593,  589,  592,
      581,  594,  572,  597,  573,  569,  570,  598,  571,  579,
      595,  574,  591,  591,  599,  584,  580,  600,  601,  602,
      603,  588,  589,  604,  605,  606,  607,  586,  610,  516,
      597,  610,  593,  587,  611,  592,  594,  611,  515,  595,
      602,  600,  640,  640,  612,  612,  598,  601,  612,  653,
      607,  635,  603,  599,  635,  642,  642,  606,  604,  611,

      443,  605,  613,  613,  614,  614,  613,  610,  614,  615,
      615,  617,  617,  615,  653,  617,  618,  618,  619,  619,
      618,  642,  619,  620,  620,  635,  614,  620,  622,  622,
      654,  654,  622,  623,  623,  615,  617,  623,  630,  624,
      624,  630,  737,  624,  625,  625,  629,  442,  625,  629,
      622,  618,  626,  626,  439,  619,  626,  627,  627,  647,
      647,  627,  630,  620,  628,  628,  623,  624,  628,  625,
      631,  628,  632,  631,  629,  632,  633,  737,  626,  633,
      634,  634,  636,  637,  634,  636,  637,  627,  638,  656,
      639,  638,  647,  639,  644,  644,  631,  641,  641,  643,

      643,  633,  645,  645,  646,  646,  648,  648,  657,  655,
      632,  639,  649,  649,  650,  650,  637,  658,  659,  641,
      661,  636,  651,  651,  643,  638,  646,  660,  656,  651,
      664,  644,  663,  666,  648,  665,  665,  667,  649,  659,
      668,  657,  645,  655,  650,  661,  669,  670,  660,  673,
      672,  674,  675,  675,  658,  664,  663,  676,  677,  678,
      679,  668,  680,  682,  685,  681,  363,  685,  711,  666,
      709,  711,  674,  709,  670,  728,  667,  362,  669,  672,
      701,  713,  713,  701,  676,  677,  681,  673,  686,  686,
      688,  688,  686,  679,  688,  680,  689,  689,  678,  709,

      689,  711,  682,  690,  690,  691,  691,  690,  728,  691,
      692,  692,  693,  693,  692,  701,  693,  694,  694,  695,
      695,  694,  740,  695,  688,  690,  702,  696,  696,  702,
      691,  696,  692,  697,  697,  698,  698,  697,  802,  698,
      731,  693,  698,  699,  699,  700,  700,  699,  703,  700,
      704,  703,  702,  704,  290,  695,  740,  694,  705,  705,
      697,  731,  705,  707,  707,  802,  708,  707,  700,  708,
      710,  710,  712,  712,  710,  704,  714,  714,  699,  715,
      715,  716,  716,  703,  717,  717,  718,  718,  719,  719,
      720,  720,  721,  721,  708,  722,  722,  720,  714,  723,

      723,  715,  724,  724,  725,  726,  712,  727,  727,  729,
      716,  730,  730,  732,  732,  734,  735,  736,  722,  738,
      738,  744,  718,  745,  717,  741,  741,  721,  746,  747,
      748,  749,  725,  750,  726,  753,  734,  793,  753,  757,
      757,  862,  729,  757,  735,  797,  755,  755,  745,  744,
      755,  748,  784,  784,  758,  758,  736,  746,  758,  759,
      759,  750,  862,  759,  794,  747,  760,  760,  749,  799,
      760,  795,  755,  753,  761,  761,  793,  757,  761,  762,
      762,  758,  797,  762,  763,  763,  765,  765,  763,  959,
      765,  766,  766,  767,  767,  766,  795,  767,  940,  759,

      768,  768,  794,  761,  768,  769,  769,  762,  799,  769,
      770,  770,  771,  772,  770,  771,  772,  773,  774,  778,
      773,  774,  778,  768,  959,  765,  777,  777,  780,  767,
      777,  780,  940,  781,  781,  810,  770,  782,  782,  783,
      783,  785,  785,  786,  786,  787,  787,  809,  772,  788,
      788,  773,  790,  790,  771,  789,  789,  774,  778,  781,
      791,  791,  792,  792,  800,  800,  780,  801,  803,  803,
      785,  786,  805,  805,  810,  782,  807,  807,  789,  783,
      811,  812,  812,  813,  813,  809,  791,  814,  788,  815,
      816,  816,  817,  839,  839,  801,  850,  818,  819,  819,

      818,  289,  819,  820,  820,  821,  821,  820,  288,  821,
      860,  805,  859,  811,  842,  842,  215,  817,  815,  814,
      850,  817,  818,  822,  822,  824,  824,  822,  820,  824,
      825,  825,  826,  826,  825,  860,  826,  834,  827,  827,
      834,  821,  827,  828,  828,  829,  829,  828,  833,  829,
      859,  833,  822,  831,  831,  832,  832,  831,  826,  832,
      835,  214,  827,  835,  837,  837,  838,  838,  837,  213,
      838,  829,  840,  840,  841,  841,  834,  827,  828,  843,
      843,  831,  833,  851,  835,  856,  835,  844,  844,  845,
      845,  846,  846,  847,  847,  848,  848,  840,  849,  849,

      853,  853,  865,  841,  854,  854,  855,  855,  861,  861,
      856,  851,  866,  844,  856,  845,  868,  869,  963,  846,
      869,  871,  871,  872,  872,  871,  206,  872,  905,  873,
      873,  865,  855,  873,  875,  875,  877,  877,  875,  963,
      877,  878,  878,  868,  140,  878,  879,  879,  880,  880,
      879,  866,  880,  881,  881,  905,  869,  881,  872,  882,
      882,  883,  883,  882,  885,  883,  886,  885,  906,  886,
      887,  890,  890,  887,  908,  877,  891,  891,  892,  892,
      893,  893,  894,  894,  895,  895,  879,  882,  896,  896,
      880,  883,  910,  881,  899,  899,  901,  901,  903,  903,

      904,  904,  911,  885,  935,  887,  912,  906,  139,  912,
      914,  914,  895,  908,  914,  936,  939,  939,  896,  893,
      916,  916,  894,  938,  916,  917,  917,  927,  927,  917,
      912,  911,  912,  935,  918,  918,  910,  903,  918,  936,
      904,  913,  913,  919,  919,  913,  916,  919,  938,  917,
      914,  920,  920,  927,  913,  920,  913,  921,  921,  918,
      913,  921,  922,  922,  917,  937,  922,  923,  913,  924,
      923,  925,  924, 1007,  925,  964,  913,  931,  919,  138,
      913,  928,  928,  929,  929,  930,  930,  921,  924,  931,
      130,  931,  933,  933,  962,  931,   86,  922,  941,  934,

      934,  941,  937,  931,  964,  925,  928,  924,  926,  926,
       85,  931, 1007,  929,  952,  931,  978,  952,  933,  978,
      930,  926,  965,  926,  934,  942,  942,  926,  962,  942,
      943,  943,   64,  941,  943,  926,  944,  944,  945,  945,
      944,   32,  945,  926,  946,  946,  965,  926,  946,  947,
      947,  948,  948,  947,   20,  948,  949,  949,  950,  950,
      949,  942,  950,  989,  951,  953,  946,  951,  953,  954,
      954,  948,  955,  955,  956,  956,  944,  985,  957,  957,
      945,  958,  958,  951,  960,  960,  961,  961,  967,  967,
      948,  949,  968,  969,  969,  968,  956,  969,  990,  972,

      972,  989,  951,  972,  953,  954,  971,  971,  961, 1078,
      971,  985,  955,  957,  973,  973,  974,  974,  973,    9,
      974,  975,  975,    0,  960,  975,  968, 1046,  969,  970,
      970,  971,    0,  970,  972,  976,  976,  979, 1078,  976,
      979,  990,  970,  974,  970,    0,  980,  980,  970,  970,
      980,  981,  981,  973, 1046,  974,  982,  982,  983,  983,
      984,  984,  986,  986,  970,  987,  987,    0,  970,  988,
      988,  993,  994,  994,  993,  979,  994, 1002,  995,  995,
     1002,  982,  995,    0,  996,  996,  981,  986,  996,  997,
      997,  998,  998,  997, 1013,  998, 1011,  983,  999,  999,

     1004, 1004,  999, 1029,  987, 1063,  996, 1000, 1000, 1051,
      993, 1000,  994, 1005, 1005, 1002, 1006, 1006, 1009, 1009,
      998, 1008, 1008, 1013, 1011, 1012, 1012,    0,  999, 1014,
     1014,    0, 1013, 1014, 1051, 1005, 1029, 1015, 1015, 1040,
     1004, 1015, 1063, 1008,    0, 1006, 1000, 1009, 1016, 1016,
     1017, 1017, 1016, 1060, 1017, 1018, 1018, 1021, 1021, 1018,
     1040, 1016, 1073, 1016, 1019, 1019, 1066, 1016, 1019, 1020,
     1020, 1022, 1022, 1020, 1023, 1023, 1024, 1024, 1025, 1025,
     1026, 1026, 1018, 1016, 1027, 1027,    0, 1016, 1074, 1017,
        0, 1032, 1032, 1060, 1018, 1032, 1033, 1033, 1035, 1035,

     1033, 1073, 1035, 1066, 1020, 1036, 1036, 1038, 1038,    0,
     1022, 1041, 1041, 1044, 1044, 1041, 1079, 1025, 1042, 1042,
     1032, 1074, 1042, 1035, 1043, 1043, 1033, 1069, 1043, 1045,
     1045, 1048, 1048, 1076, 1036, 1048, 1038, 1049, 1049, 1052,
     1052, 1049, 1057, 1052, 1053, 1053, 1055, 1055, 1053, 1075,
     1055, 1043, 1069, 1042, 1056, 1056, 1048, 1071, 1056, 1079,
     1058, 1058, 1077,    0, 1058, 1057, 1052, 1059, 1059,    0,
     1075, 1059, 1076, 1049, 1061, 1061, 1080, 1080, 1061, 1053,
     1057,    0, 1055, 1062, 1062, 1064, 1064, 1062,    0, 1064,
        0, 1071, 1065, 1065, 1056, 1058, 1065, 1067, 1067, 1077,

        0, 1067,    0, 1062, 1068, 1068, 1070, 1070, 1068,    0,
     1070, 1072, 1072,    0, 1061, 1072,    0, 1067,    0,    0,
        0,    0, 1062,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1067,    0,    0,    0,
        0,    0,    0, 1068,    0,    0,    0,    0,    0,    0,
     1072, 1083, 1083, 1084, 1084, 1085, 1085, 1087, 1087, 1090,
     1090, 1092, 1092, 1093, 1093, 1096, 1096, 1097, 1097, 1098,
     1098, 1100, 1100, 1101, 1101, 1102, 1102, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,

     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#define INITIAL 0
//debug static int DC = 0;
/*
   makeedit.l : This file is part of pstoedit
   Simple parser to parse the intermediate flat PostScript and call the backend
   output routines.

   Copyright (C) 1993,1994,1995,1996,1997,1998 Wolfgang Glunz, wglunz@geocities.com

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

*/
#include "cppcomp.h"
#include I_iostream
#include I_fstream

#include I_string_h

#include <math.h>

USESTD

#include "psfront.h"

static float  origx, origy;
static char   *start_of_text;
static char   *end_of_text;
static float  number;

#define YY_SKIP_YYWRAP
static int yywrap() { return 1;}

static int toInt(const float f) { 
	return (f > 0.0f) ? (int)(f+0.5f) : (int)(f-0.5f);
};

static unsigned int hextoint(const char hexchar) 
{
//	unsigned int uc = (unsigned int) hexchar;
	unsigned int r = ( hexchar <= '9' ) ? (hexchar - '0') : (hexchar -'A' + 10) ;
//	cerr << hexchar << " -> " << r << endl;
	return r;
}

static const int debuglexer = 0;

#define YY_NEVER_INTERACTIVE 1
// to avoid usage of isatty

#define YY_NO_UNPUT
// to avoid compiler warning

// define YY_DECL int yylex YY_PROTO(( *outputdriver ))
#define YY_DECL int PSFrontEnd::yylex()

#define READPATH 1

#define READIMAGE 2

#define READPROLOG 3


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;



	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1083 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3078 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{ 
	// not in READPROLOG !!
// Work around for Linux libg++ bug
			 number = (float) atof(yytext);
// Original
//			 istrstream s(yytext);
//			 s >> number;
			 
			 addNumber(number * backend->getScale());
			}
	YY_BREAK
case 2:
YY_RULE_SETUP
{ 
			backend->showpage();

			currentPageNumber++;
			if ( splitpages ) {
				if(outfilename) {
					if (strstr(outfilename,"%d") == NULL) {
						errf << "Warning: no %d found in name of output file and page feed found in input and either the selected format does not support multiple pages or the -split option was specified.\nPlease insert a %d in the name of the input file if you want to split pages into different files" << endl;
						// we cannot close the output file in this case otherwise
						// we would overwrite the previous results
					} else  {
						delete backend; // 
						ofstream * outputFilePtr = (ofstream *) &outFile;
						char * newname = new char[strlen(outfilename) + 30 ];
						sprintf(newname,outfilename,currentPageNumber);
						// not needed here since done in main program convertBackSlashes(nameOfOutputFile);
						if (driverDesc->backendFileOpenType != DriverDescription::noopen ){ 
							outputFilePtr->close();
							if (driverDesc->backendFileOpenType == DriverDescription::binaryopen ) { 
#if (defined(unix) || defined(__unix__) || defined(_unix) || defined(__unix) || defined(__EMX__) ) && !defined(DJGPP)
// binary is not available on UNIX, only on PC
								outputFilePtr->open(newname,ios::out);
#else
								// use redundant ios::out because of bug in djgpp
								outputFilePtr->open(newname,ios::out | ios::binary);
#endif
								// errf << "opened " << newname << " for binary output" << endl;
							} else {
								outputFilePtr->open(newname);
								// errf << "opened " << newname << " for output" << endl;
							}
							if (outFile.fail() ) {
								errf << "Could not open file " << newname << " for output" << endl;
								delete [] newname;
								return 1;
							} // fail
						} // backend opens file by itself
						backend =  driverDesc->CreateBackend(driveroptions,*outputFilePtr,errf,infilename,newname,scalefactor,pageSize);
						delete [] newname;
						if (!backend->driverOK()) {
							errf << "Creation of driver for new page failed " << endl;
							return (1);
						}
					} // file name contains %d
				} else {
					errf << "Cannot split pages if output is standard output" << endl;
					return(1);
				} // outfilename
			} // splitpages
		      }
	YY_BREAK
case 3:
YY_RULE_SETUP
{ 
			if (backend->numberOfElementsInPath() != 0) {
				errf << "Error, path number " << pathnumber << " was not cleared correctly" << endl;
			}

			pathnumber++;
			BEGIN(READPATH); 
			backend->setIsPolygon(false);
			backend->setPathNumber(pathnumber);
			}
	YY_BREAK
case 4:
YY_RULE_SETUP
{
			/* old version: /Helvetica findfont 14 scalefont setfont */
			/* (Helvetica) cvn findfont  [  3.0 8.31384 -5.19615 4.8 106.699 455.692 ] makefont setfont */
			/* new version because sometimes the new name contains a % */
			if (!non_standard_font) {
			// in the case of a non standard font, the setCurrentFontName was
			// done during handling of nonstandard font
				start_of_text = strchr (yytext,(int)'(') + 1 ;
				end_of_text = strrchr (yytext,(int)')') ;
				if (end_of_text) *end_of_text = (char) 0;
				backend->setCurrentFontName(start_of_text,0);
			}
			non_standard_font = 0; // reset 
			}
	YY_BREAK
case 5:
YY_RULE_SETUP
{
				BEGIN(READPROLOG);
			}
	YY_BREAK
case 6:
YY_RULE_SETUP
{
				BEGIN(INITIAL);
			}
	YY_BREAK
case 7:
YY_RULE_SETUP
{ 
			/* fprintf(stderr,"%s\n",yytext);  */
			start_of_text = yytext+2;
			end_of_text =  strrchr (yytext,(int)' ') ;
			if (end_of_text) *end_of_text = (char) 0;
			backend->setCurrentFontFamilyName(start_of_text);
			}
	YY_BREAK
case 8:
YY_RULE_SETUP
{ 
			/* fprintf(stderr,"%s\n",yytext);  */
			start_of_text = yytext+2;
			end_of_text =  strrchr (yytext,(int)' ') ;
			if (end_of_text) *end_of_text = (char) 0;
			backend->setCurrentFontFullName(start_of_text);
			}
	YY_BREAK
case 9:
YY_RULE_SETUP
{ 
			/* fprintf(stderr,"%s\n",yytext);  */
			start_of_text = yytext+2;
			end_of_text =  strrchr (yytext,(int)' ') ;
			if (end_of_text) *end_of_text = (char) 0;
			backend->setCurrentFontWeight(start_of_text);
			}
	YY_BREAK
case 10:
YY_RULE_SETUP
{
			/* % Times-Roman Times-Roman@0 nonstandard font */
			/* % Bla Bla nonstandard font */ /* if it is not derived from a standard font */
			start_of_text = yytext+2;
			end_of_text =  strchr (start_of_text,(int)' ') ;
			if (end_of_text) *end_of_text = (char) 0;
			char   *start_of_secondname = end_of_text +1;
			char   *end_of_secondname = strchr (start_of_secondname,(int)' ') ;
			if (end_of_secondname) *end_of_secondname = (char) 0;
			non_standard_font = 1; // this avoids a further setting of CurrentFontName
			if (strcmp(start_of_text,start_of_secondname) == 0 ) {
				// both names are equal, so it's not a derived font
				backend->setCurrentFontName(start_of_text,1);
			} else {
				// it's a derived font, so use the base name
				backend->setCurrentFontName(start_of_text,0);
			}
			}
	YY_BREAK
case 11:
YY_RULE_SETUP
{
			backend->setCurrentShowType(drvbase::eofill);
			}
	YY_BREAK
case 12:
YY_RULE_SETUP
{
			backend->setCurrentShowType(drvbase::fill);
			}
	YY_BREAK
case 13:
YY_RULE_SETUP
{
			backend->setCurrentShowType(drvbase::stroke);
			}
	YY_BREAK
case 14:
YY_RULE_SETUP
{
				errf << yytext;
			}
	YY_BREAK
case 15:
YY_RULE_SETUP
{
			 addNumber(0.0f * backend->getScale()); // pseudo false
			}
	YY_BREAK
case 16:
YY_RULE_SETUP
{
			 addNumber(1.0f * backend->getScale()); // pseudo true
			 }
	YY_BREAK
case 17:
YY_RULE_SETUP
{ // begin of some Data Comment, just ignore the marker
			}
	YY_BREAK
case 18:
YY_RULE_SETUP
{
/*
sequence:

../tests/image/colorimage.ps.ps:%colorimage:begin
../tests/image/colorimage.ps.ps:%colorimage:ncomp
../tests/image/colorimage.ps.ps:%colorimage:multi
../tests/image/colorimage.ps.ps:%colorimage:imagematrix
../tests/image/colorimage.ps.ps:%colorimage:normalized image currentmatrix
../tests/image/colorimage.ps.ps:%colorimage:bits
../tests/image/colorimage.ps.ps:%colorimage:height
../tests/image/colorimage.ps.ps:%colorimage:width
../tests/image/colorimage.ps.ps:%colorimage:data
../tests/image/colorimage.ps.ps:%colorimage:end 

../tests/image/hw.ps.ps:%image:begin
../tests/image/hw.ps.ps:%image:imagematrix
../tests/image/hw.ps.ps:%image:normalized image currentmatrix
../tests/image/hw.ps.ps:%image:bits 
../tests/image/hw.ps.ps:%image:height
../tests/image/hw.ps.ps:%image:width
../tests/image/hw.ps.ps:%image:data
../tests/image/hw.ps.ps:%image:data
../tests/image/hw.ps.ps:%image:end

../tests/image/hwuse.eps.ps:%imagemask:begin
../tests/image/hwuse.eps.ps:%imagemask:imagematrix
../tests/image/hwuse.eps.ps:%imagemask:normalized image currentmatrix
../tests/image/hwuse.eps.ps:%imagemask:polarity
../tests/image/hwuse.eps.ps:%imagemask:height
../tests/image/hwuse.eps.ps:%imagemask:width
../tests/image/hwuse.eps.ps:%imagemask:data
../tests/image/hwuse.eps.ps:%imagemask:data
../tests/image/hwuse.eps.ps:%imagemask:end
*/
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.type = colorimage;
				// ncomp will be written later
				// bits will be written later
				backend->imageInfo.polarity = true; 
				BEGIN(READIMAGE); 
			}
	YY_BREAK
case 19:
YY_RULE_SETUP
{
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.type = normalimage;
				backend->imageInfo.ncomp = 1;
				// bits will be written later
				backend->imageInfo.polarity = true; 
				BEGIN(READIMAGE); 
			}
	YY_BREAK
case 20:
YY_RULE_SETUP
{
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.type = imagemask;
				backend->imageInfo.ncomp = 1;
				// polarity will be written later
				backend->imageInfo.bits = 1;
				BEGIN(READIMAGE); 
			}
	YY_BREAK
case 21:
YY_RULE_SETUP
{
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.ncomp = toInt(popUnScaled());
			}
	YY_BREAK
case 22:
YY_RULE_SETUP
{ // only set for imagemask
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.polarity = toInt(popUnScaled()) > 0.5 ;  // convert from float to bool
			}
	YY_BREAK
case 23:
YY_RULE_SETUP
{
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				pop(); // not used so far
			}
	YY_BREAK
case 24:
YY_RULE_SETUP
{
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				for (unsigned int i = 0; i < 6 ; i++ ) {
					backend->imageInfo.imageMatrix[5-i] = popUnScaled();
				}
			}
	YY_BREAK
case 25:
YY_RULE_SETUP
{
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				for (unsigned int i = 0; i < 6 ; i++ ) {
					backend->imageInfo.normalizedImageCurrentMatrix[5-i] = popUnScaled();
				}
			}
	YY_BREAK
case 26:
YY_RULE_SETUP
{ // only set for normalimage and colorimage
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.bits = toInt(popUnScaled());
			}
	YY_BREAK
case 27:
YY_RULE_SETUP
{
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.height = toInt(popUnScaled());
			}
	YY_BREAK
case 28:
YY_RULE_SETUP
{
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.width = toInt(popUnScaled());
			}
	YY_BREAK
case 29:
YY_RULE_SETUP
{
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
//cerr << "handling DC " << DC++ << endl;
//cerr << "handling " << yytext ;
//cerr << "strlen " << strlen(yytext) << endl ;
				unsigned int size = backend->imageInfo.height * ((backend->imageInfo.ncomp * backend->imageInfo.width  * backend->imageInfo.bits + 7 ) / 8);
				if (backend->imageInfo.data == 0) {
// cerr << " allocating " << size << " for image data " << endl;
					backend->imageInfo.data = new unsigned char[size];
					if (backend->imageInfo.data==0) {
						cerr << "out of memory for image data" << endl;
						return(1);
					}
					backend->imageInfo.nextfreedataitem = 0;
					// init
//					for (unsigned int i = 0 ; i < size; i++) {
//						backend->imageInfo.data[i] = 0;
//					}
				}
				const char * cp = yytext;
				// search for ' '
				while (cp && (*cp != ' ')) cp++; 
				// now cp points to blank
				cp++;
//cerr << "effective length " << strlen(cp) << endl;
				do {
					const char chigh = *cp;
					const unsigned int high = hextoint(*cp);
					cp++;
					if (*cp == '\0') {
						cerr << "data format error " << endl;
						return(1);
					}
					const char clow = *cp;
					const unsigned int low = hextoint(*cp);
					cp++; 
					if ( backend->imageInfo.nextfreedataitem < size ) {
						backend->imageInfo.data[backend->imageInfo.nextfreedataitem] = (unsigned char) (high * 16 + low);
//						cerr << backend->imageInfo.nextfreedataitem << ":" << chigh<< clow << endl;
						backend->imageInfo.nextfreedataitem++;
					}  else {
						cerr << "too much data: ignoring " << chigh << clow << endl;
					}
				} while (cp && (*cp != '\0'));

			}
	YY_BREAK
case 30:
YY_RULE_SETUP
{
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}

				backend->dumpImage();
			 	BEGIN(INITIAL);
			}
	YY_BREAK
case 31:
YY_RULE_SETUP
{ 
				if (debuglexer) cerr << "comment ignored " << yytext;
			}
	YY_BREAK
case 32:
YY_RULE_SETUP
{
			// setCurrentFontSize(number * backend->getScale());
			float * matrix = backend->getCurrentFontMatrix();
			matrix[5] = pop();
			matrix[4] = pop();
			matrix[3] = pop(); // sy * cos(phi)
			matrix[2] = pop(); // sy * -sin(phi)
			matrix[1] = pop(); // sx * sin(phi)
			matrix[0] = pop(); // sx * cos(phi)
			const float fsizex = (float) sqrt((matrix[0] * matrix[0]) + (matrix[1] * matrix[1]));
			const float fsizey = (float) sqrt((matrix[2] * matrix[2]) + (matrix[3] * matrix[3]));
			const float todegrees =   180.0f / 3.14159265358979323846f ;
			float phix = (matrix[0] != 0.0f) ? (todegrees * (float) atan(matrix[1] / matrix[0]) ) : (matrix[1] > 0 ? 90.0f : -90.0f );
//			float phiy = todegrees * atan(-1.0 * matrix[2] / matrix[3]);
			if (matrix[0] < 0.0f ) phix = 180 + phix; // if cos (phi) < 0 than add 180
//			if (matrix[3] < 0.0f ) phiy = 180 + phiy;
			if (phix < 0.0f ) phix = 360 + phix;
//			if (phiy < 0.0f ) phiy = 360 + phiy;
//			for (int i = 0; i < 6; i++ ) cout << "matrix [" << i << "] " << matrix[i] << " ";
//			cout << fsizex << " " << fsizey  << " " << endl;
//			cout << phix << " " << phiy  << " "  << endl;
			backend->setCurrentFontSize((fsizex + fsizey)/2.0f);
			backend->setCurrentFontAngle(phix);
			}
	YY_BREAK
case 33:
YY_RULE_SETUP
{
//obsolete
			// setCurrentFontSize(number * backend->getScale());
			backend->setCurrentFontSize(pop());
			// pop(); 
			}
	YY_BREAK
case 34:
YY_RULE_SETUP
{
			const float B = pop() / backend->getScale();
			const float G = pop() / backend->getScale();
			const float R = pop() / backend->getScale();
			/* printf("%s %f %f %f\n","setting RGB to ",R,G,B); */
			backend->setRGB(R,G,B);
			}
	YY_BREAK
case 35:
YY_RULE_SETUP
{
				yytext[strlen(yytext) -9] = '\0'; // strip of trailing setdash
				backend->setDash(yytext+1); // don't copy leading space
			}
	YY_BREAK
case 36:
YY_RULE_SETUP
{
			backend->setCurrentMiterLimit(number);
			pop(); 
			}
	YY_BREAK
case 37:
YY_RULE_SETUP
{
			backend->setCurrentLineJoin((int) (number +0.5));
			pop(); 
			}
	YY_BREAK
case 38:
YY_RULE_SETUP
{
			backend->setCurrentLineCap((int) (number +0.5));
			pop(); 
			}
	YY_BREAK
case 39:
YY_RULE_SETUP
{
			backend->setCurrentLineWidth(pop() );
//			setCurrentLineWidth(number * backend->getScale() );
//			pop(); 
			}
	YY_BREAK
case 40:
YY_RULE_SETUP
{
			float height = pop(); 
			if (height < 1.0 ) { height = 792 * backend->getScale() ; }
			backend->setCurrentDeviceHeight(height);
			float width  = pop(); 
			if (width < 1.0 ) { width = 612 * backend->getScale() ; }
			backend->setCurrentDeviceWidth(width);
			}
	YY_BREAK
case 41:
YY_RULE_SETUP
{
			const bool  mappedtoisolatin1 = pop() > 0.5; // float to bool
			const float y_end = pop();
			const float x_end = pop();
			const float ay = pop();
			const float ax = pop();
			const int   Char = (int) (pop() / backend->getScale()   +0.5);	
			const float cy = pop();
			const float cx = pop();
			backend->setMappedtoisolatin1(mappedtoisolatin1);
			backend->setCurrentWidthParams(ax,ay,Char,cx,cy,x_end,y_end);
			}
	YY_BREAK
case 42:
YY_RULE_SETUP
{ 
			start_of_text = strchr (yytext,(int)'(') + 1 ;
			end_of_text = strrchr (yytext,(int)')') ;
			if (end_of_text) *end_of_text = (char) 0;
			const float y = pop(); /* just the last moveto (0 0 in case of makefont) */
			const float x = pop(); /* just the last moveto (0 0 in case of makefont) */
			/* backend->dumpText(start_of_text,x,y); */
			backend->dumpText(start_of_text,x + backend->getCurrentFontMatrix()[4],y + backend->getCurrentFontMatrix()[5]);
			}
	YY_BREAK
case 43:
YY_RULE_SETUP
{
// obsolete
			backend->setCurrentFontAngle(number);
			pop();
			}
	YY_BREAK
case 44:
YY_RULE_SETUP
{
//obsolete
			/* Because this is in the preamble, only pop 
			   this has put something on the stack. */
			if (nextFreeNumber >= 2)
				{ pop(); pop(); }
			}
	YY_BREAK
case 45:
YY_RULE_SETUP
{
//obsolete
			/* Because this is in the preamble, only pop 
			   this has put something on the stack. */
			if (nextFreeNumber >= 2)
				{ pop(); pop(); }
			}
	YY_BREAK
case 46:
YY_RULE_SETUP
{ /* ignore any other stuff */ }
	YY_BREAK
case 47:
YY_RULE_SETUP
{ 
			// save coordinates for possible closepath
			origy = pop();
			origx = pop();
			if (backend->numberOfElementsInPath() > 1) {
				// this is an intermediate moveto
				// if backend supports subpaths add it
				// else dump last path and start a new one
				if (backend->simulateSubPaths || backend->Pdriverdesc->backendSupportsSubPathes) {
//					Point p(origx,origy);
					backend->addtopath(new Moveto(origx,origy)); // pass p as array
				} else {
					// dumppath
					backend->dumpPath();
					// start new path
//					Point p(origx,origy);
					backend->addtopath(new Moveto(origx,origy)); // pass p as array
					
				}
			} else {
				// it is a starting moveto
//				Point p(origx,origy);
				backend->addtopath(new Moveto(origx,origy)); // pass p as array
			}
		   }
	YY_BREAK
case 48:
YY_RULE_SETUP
{
			float y = pop();
			float x = pop();
//			Point p(x,y);
			backend->addtopath(new Lineto(x,y)); // pass p as array
			}
	YY_BREAK
case 49:
YY_RULE_SETUP
{ 
			if (!backend->Pdriverdesc->backendSupportsCurveto) {
				errf << "illegal input received. curveto not expected by this backend\n";
				return(1);
			}
			Point p[3];
			for (unsigned int i = 3; i > 0; i--) { 
				// !!! i = 2 to i>= 0 does not work for unsigned
				float y = pop();
				float x = pop();
				p[i-1] = Point(x,y);
			}
			backend->addtopath(new Curveto(p)); // pass p as array
			}
	YY_BREAK
case 50:
YY_RULE_SETUP
{
			 Point startPoint(origx,origy);
			 const basedrawingelement & lastelem = backend->pathElement(backend->numberOfElementsInPath() -1 );
			// check for last == first. Then no additional
			// lineto is needed. and isPolygon can be set to true
			 if  ( (lastelem.getType() == lineto) && (lastelem.getPoint(0) == startPoint) ) {
				// no need to close the path, it's already closed
			 } else {
				if (backend->simulateSubPaths || backend->Pdriverdesc->backendSupportsSubPathes) {
			 		backend->addtopath(new Closepath()); 
				} else {
			 		backend->addtopath(new Lineto(origx,origy)); // pass p as array
				}

			 }
			 backend->setIsPolygon(true);
			 /* show is done by next stroke, fill or moveto */
			}
	YY_BREAK
case 51:
YY_RULE_SETUP
{ 
			 BEGIN(INITIAL);
			 backend->dumpPath();
                       	};
	YY_BREAK
case 52:
YY_RULE_SETUP
{ 
			 BEGIN(INITIAL);
			 backend->dumpPath(); 
                       	};
	YY_BREAK
case 53:
YY_RULE_SETUP
{ 
			 BEGIN(INITIAL);
			 backend->dumpPath(); 
                       	};
	YY_BREAK
case 54:
YY_RULE_SETUP
{}
	YY_BREAK
case 55:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(READPATH):
case YY_STATE_EOF(READIMAGE):
case YY_STATE_EOF(READPROLOG):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1083 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1083 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1082);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif

void PSFrontEnd::yylexcleanup()
{
//	if (yy_state_buf) yy_flex_free(yy_state_buf);
	yy_delete_buffer( yy_current_buffer );
}

void PSFrontEnd::run(bool merge)
{
	backend->startup(merge);
	if (!yylex()) {
		// yylex return 0 on normal EOF
		// 1 in case of errors
		backend->finalize();
	}
	delete backend;
	backend = 0;
}
void PSFrontEnd::addNumber(float a_number)
{
// printf("Adding %f\n",number);
 if (nextFreeNumber < maxpoints) { 
     	numbers[nextFreeNumber++] = a_number; 
     	// nextFreeNumber always points to the next free number
 } else { 
   	errf << "Too many numbers on stack. Please increase maxpoints in drvbase.h \n"; 

   	exit(1); 
 }
}

PSFrontEnd::PSFrontEnd(ostream& outfile_p, 
		ostream & errstream,
		const char * infilename_p,
		const char * outfilename_p,
		const float scalefactor_p,
		const RSString & pagesize_p,
		const DriverDescription * driverDesc_p,
		const char * driveroptions_p,
		const bool splitpages_p, 
		drvbase * backend_p)
	: outFile(outfile_p),
	  errf(errstream),
	  infilename(infilename_p),
	  outfilename(outfilename_p),
	  scalefactor(scalefactor_p),
	  pageSize(pagesize_p),
	  driverDesc(driverDesc_p),
	  driveroptions(driveroptions_p),
	  splitpages(splitpages_p),
	  backend(backend_p),
	  currentPageNumber(1),
	  numbers((float*) 0),
    	  nextFreeNumber(0),
    	  pathnumber(0),
	  non_standard_font(false)
{
    numbers = new float[maxpoints]; // The number stack
    if ((numbers == 0)){
	errf << "new failed in PSFrontEnd::PSFrontEnd " << endl;
	exit(1);
    }
}

PSFrontEnd::~PSFrontEnd() {
	delete [] numbers;
	yylexcleanup();
}

float PSFrontEnd::pop() 
{ 
  if (nextFreeNumber > 0) {
  	nextFreeNumber--;
  	return numbers[nextFreeNumber]; // the value we just popped
  } else {
	errf << "Fatal error in drvbase::pop : nextFreeNumber would get < 0" << endl;
	exit(1);
  }
  return 0.0f; // never reached, just to make compiler quiet
}


float PSFrontEnd::popUnScaled() 
{
	return pop() / backend->getScale();
}

void PSFrontEnd::pstack()  const {
	for (unsigned int i = 0 ; i < nextFreeNumber ; i++ ) {
		cerr << "[" << i << "] " << numbers[i] << " " << numbers[i]/ backend->getScale() << endl;
	}
}
 
