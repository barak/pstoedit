/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.89 96/05/25 21:02:21 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 36
#define YY_END_OF_BUFFER 37
static yyconst short int yy_accept[619] =
    {   0,
        0,    0,    0,    0,   37,   27,   27,   27,   27,   27,
       27,    1,   27,   27,   35,   35,   35,   35,   35,    1,
       35,   35,   35,   35,   35,   35,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   14,    0,    0,    0,    0,
        1,    1,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    1,    1,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   33,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   13,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   34,   29,   28,    0,    0,    0,
        0,   32,    0,    0,    0,   24,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    3,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   30,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   17,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    2,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    4,    0,    0,    0,    0,    0,
        0,    0,    0,    7,    0,    0,    0,    0,    0,   14,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   31,    0,    0,    0,    0,    0,    0,    0,    0,
       25,    0,    0,    0,    0,    0,    0,    0,    4,    0,
        0,    4,    0,    0,    0,    0,   19,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   26,    0,    4,    0,    0,
        6,    0,    0,    0,    0,    0,    0,    0,    0,   21,
       18,    0,   16,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   11,
        0,    0,    0,    0,    0,   20,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    5,    0,    0,
        0,   12,    0,   23,    0,   22,    0,    0,    0,    0,
        0,    0,    0,    0,   10,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    8,    0,    0,    0,    0,   15,    0,    0,
        0,    0,    0,    8,    0,    0,    9,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    1,    1,    1,    1,    4,    1,    1,    5,
        6,    1,    1,    1,    7,    8,    1,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   10,
       11,    1,    1,    1,    1,    1,   12,   13,    1,   14,
        1,    1,   15,    1,    1,    1,   16,    1,    1,    1,
        1,    1,    1,    1,    1,    1,   17,   18,   19,   20,

       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,    1,   33,   34,   35,   36,   37,   38,    1,
       39,   40,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[41] =
    {   0,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[628] =
    {   0,
        0,   33,   66,   99,  612,  547, 1611,  131,    8,    9,
       10,   18,    3,   25,  491, 1611,   11,   14,   44,   51,
       20,   19,   26,   30,   58,   61,  487,   59,   54,   62,
       75,   68,   63,   77,   29, 1611,  109,   80,  110,  111,
      116,  147,  101,   73,  112,   74,  356,  126,  123,  119,
      133,  149,  166,  169,  164,  146,  177,  156,  159,  145,
      182,  183,  185,  188,  189,  190,  191,  193,  198,  143,
      231,  200,  202,  195,  216,  203,  205,  239,  232,  204,
      220,  241,  219,  211,  237,  256,  210,  289,  265,  268,
      274,  276,  247,  249,  259,  270,  279,  282,  292,  284,

      304,  277,  286,  299,  307,  253,  310,  326,  328,  330,
      335,  337,  339,  341,  349,  343,  351,  353,  359,  365,
      370,  368,  372,  374,  301,  366,  319,  360,  311,  380,
      354,  379,  381,  387,  390,  403,  393,  411,  413,  415,
      420,  422,  424,  426,  431,  388,  416,  427,  438,  396,
      432,  435,  440,  443,  444,  442,  448,  445,  450,  446,
      455,  451,  454,  460,  471,  474,  476,  480,  484,  486,
      490,  494,  496,  498,  505,  508,  510,  511,  499,  519,
      520,  512,  518,  457,  524,  526,  529,  531,  530,  532,
      535,  540,  550,  553,  555,  559,  561,  565,  569,  571,

      574,  580,  556,  543,  577, 1611,  562,  582,  566,  584,
      583,  589,  595,  592,  593,  597,  600,  596,  601,  604,
      606,  616,  623,  629,  631,  636,  638,  640,  642,  644,
      648,  650,  652,  655,  659,  667,  668,  625,  661,  657,
      672,  678,  653,  612,  679,  673,  683,  692,  698,  687,
      700,  702,  706,  708,  714,  716,  724,  718,  721,  703,
      726,  728,  730,  736,  739,  740,  684,  744,  741,  745,
      747,  749,  746,  750,  752,  759,  761,  763,  766, 1611,
      773,  779,  781,  783,  785,  787,  790,  792,  795,  799,
      793,  805,  815,  774,  607,  803,  797,  807,  809,  812,

      818,  829,  831,  833,  841,  843,  849,  853,  855,  857,
      860,  862,  835,  866, 1611, 1611, 1611,  863,  869,  822,
      817, 1611,  844,  868,  870, 1611,  884,  871,  887,  889,
      894,  896,  898,  901,  908,  910,  914,  917,  919,  921,
      930,  923,  924,  931,  935, 1611,  873,  877,  937,  911,
      936,  940,  945,  949,  953,  955,  961,  963,  967,  969,
      972,  974,  977,  980,  990,  987,  982,  970, 1611,  975,
      984,  964,  993,  996, 1000,  345, 1001,  394, 1611, 1002,
     1007, 1017, 1011, 1019, 1023, 1025, 1027, 1031, 1036, 1038,
     1041, 1043, 1045, 1052, 1053, 1058, 1059,  306, 1028, 1046,

     1047,  693, 1051, 1063, 1611, 1066, 1077, 1068, 1081, 1083,
     1087, 1095, 1097, 1101, 1103, 1105, 1107, 1111, 1088, 1092,
     1098, 1112, 1113, 1078, 1118, 1116, 1117, 1124, 1127, 1131,
     1133, 1139, 1143, 1611, 1151, 1146, 1155, 1157, 1165, 1611,
     1167, 1169, 1171, 1177, 1160, 1140, 1183, 1173, 1152, 1148,
     1185, 1186, 1193, 1195, 1197, 1202, 1204, 1206, 1208, 1210,
     1217, 1611, 1212, 1219, 1214, 1190, 1223, 1224, 1227, 1228,
     1611, 1233, 1237, 1244, 1248, 1250, 1252, 1255,    0, 1257,
     1259, 1268, 1262, 1260, 1261, 1273, 1611, 1275, 1269, 1278,
     1162, 1267, 1281, 1283, 1293, 1296, 1301, 1303, 1305, 1307,

     1312, 1314, 1298, 1317, 1294, 1611, 1308, 1322, 1327, 1329,
     1611, 1331, 1334, 1336, 1338, 1346, 1352, 1357, 1318, 1611,
     1611, 1349, 1611, 1340, 1323, 1363, 1365, 1369, 1373, 1375,
     1377, 1379, 1381, 1382, 1325, 1385, 1387, 1389, 1394, 1611,
     1397, 1402, 1404, 1409, 1410, 1611, 1417, 1411, 1419, 1421,
     1423, 1425, 1434, 1436, 1442, 1398, 1444, 1611, 1448, 1450,
     1452, 1611, 1453, 1611, 1431, 1611, 1438, 1455, 1458, 1461,
     1463, 1464, 1468,  116, 1611, 1474, 1475, 1465, 1470, 1477,
       76, 1481, 1359, 1484, 1486, 1489, 1495, 1493, 1494, 1500,
     1505, 1507, 1511, 1518, 1520, 1524, 1527, 1532, 1536, 1538,

     1540, 1542, 1611, 1544, 1549, 1551, 1554, 1611, 1561, 1563,
     1569, 1571, 1573, 1611, 1578, 1580, 1611, 1611, 1598, 1600,
       91, 1602,   19,    0, 1604, 1606, 1608
    } ;

static yyconst short int yy_def[628] =
    {   0,
      619,  619,  620,  620,  618,  621,  618,  621,  622,  623,
      621,  621,  621,  621,  624,  618,  624,  625,  624,  624,
      624,  624,  624,  624,  624,  624,  621,  621,  621,  621,
      621,  621,  621,  621,  622,  618,  626,  623,  623,  623,
      621,  621,  621,  621,  621,  621,  624,  624,  624,  624,
      625,  627,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  621,  621,  621,  621,  621,  621,  622,  626,
      626,  626,  626,  626,  626,  623,  623,  623,  623,  621,
      621,  621,  621,  624,  624,  625,  627,  627,  627,  627,
      627,  627,  624,  624,  624,  624,  624,  624,  624,  624,

      621,  621,  621,  621,  621,  621,  622,  622,  622,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      623,  623,  623,  623,  621,  621,  621,  621,  621,  621,
      621,  624,  624,  625,  625,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  621,  621,  621,  621,
      621,  621,  622,  622,  622,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  623,  623,  623,
      623,  621,  621,  621,  621,  621,  621,  621,  624,  624,
      625,  625,  627,  627,  627,  627,  627,  627,  627,  627,

      627,  627,  624,  624,  624,  618,  624,  624,  624,  624,
      624,  624,  624,  621,  621,  621,  621,  621,  621,  622,
      622,  622,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  623,  623,  623,  623,  621,  621,  621,
      621,  621,  621,  621,  624,  624,  625,  625,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  621,  621,
      621,  621,  621,  621,  622,  622,  622,  626,  626,  618,
      626,  626,  626,  626,  626,  626,  626,  626,  623,  623,
      623,  623,  621,  621,  621,  621,  621,  621,  621,  624,

      624,  625,  625,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  624,  624,  618,  618,  618,  624,  624,  624,
      624,  618,  621,  621,  621,  618,  621,  621,  622,  622,
      622,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  623,  623,  623,  623,  618,  621,  621,  621,  621,
      621,  621,  621,  621,  624,  624,  625,  625,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  624,  618,  624,
      624,  624,  624,  624,  624,  621,  621,  621,  618,  621,
      622,  622,  622,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  623,  623,  623,  623,  621,  621,  621,

      621,  621,  621,  621,  618,  624,  625,  625,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  624,  624,  624,
      624,  624,  624,  624,  621,  621,  621,  621,  622,  622,
      622,  626,  626,  618,  626,  626,  626,  626,  626,  618,
      626,  623,  623,  623,  621,  621,  621,  621,  621,  621,
      621,  624,  625,  625,  627,  627,  627,  627,  627,  627,
      627,  618,  624,  624,  624,  624,  624,  624,  621,  621,
      618,  622,  622,  626,  626,  626,  626,  626,   71,  626,
      626,  623,  623,  623,  621,  621,  618,  621,  621,  621,
      621,  624,  625,  627,  627,  627,  627,  627,  627,  627,

      624,  624,  624,  624,  624,  618,  621,  622,  622,  626,
      618,  626,  626,  626,  626,  626,  623,  623,  621,  618,
      618,  621,  618,  621,  624,  625,  627,  627,  627,  627,
      627,  627,  624,  624,  621,  622,  626,  626,  626,  618,
      626,  626,  623,  623,  621,  618,  621,  624,  625,  627,
      627,  627,  627,  627,  624,  621,  622,  618,  626,  626,
      626,  618,  623,  618,  621,  618,  624,  625,  627,  627,
      627,  621,  622,   71,  618,  626,  623,  621,  624,  625,
       88,  627,  621,  622,  626,  626,  623,  621,  624,  625,
      627,  627,  621,  622,  626,  626,  623,  621,  624,  625,

      627,  627,  618,  622,  626,  626,  623,  618,  625,  627,
      627,  622,  626,  618,  625,  627,  618,    0,  618,  618,
      618,  618,  618,  618,  618,  618,  618
    } ;

static yyconst short int yy_nxt[1652] =
    {   0,
       47,    7,    8,    9,   10,   28,   11,   12,   12,   36,
       37,   39,   28,   48,   40,   36,   52,   41,   41,   38,
       28,   48,   48,   43,   42,   42,   42,   28,   48,   13,
       36,   69,   48,   14,    7,    8,    9,   10,   42,   11,
       12,   12,   49,   44,   50,   45,   48,   55,   46,   57,
       58,   53,   53,   48,   59,   56,   28,   54,   54,   54,
       48,   28,   13,   48,   28,   28,   14,   16,   17,   18,
       28,   54,   19,   20,   20,   28,   28,   28,   63,   28,
       29,   61,   39,   67,   21,   40,   22,   23,   60,   81,
       31,   27,   33,   24,   25,   62,   64,  591,   66,   26,

       16,   17,   18,   28,   83,   19,   20,   20,   65,   68,
       36,   71,   39,   79,   28,   40,   40,   21,   28,   22,
       23,   48,   42,   42,   42,   48,   24,   25,   48,   72,
       73,   76,   26,   28,   36,   86,   42,  585,   80,   85,
       74,   77,   75,   78,   36,   71,   82,   48,   48,   28,
       36,   88,   29,   42,   42,   42,   84,   49,   48,   50,
       30,   48,   31,   32,   33,   34,   48,   42,   48,   89,
       90,   48,   54,   54,   54,   54,   54,   54,   94,   48,
       91,   98,   92,   96,   48,   48,   54,   28,   97,   54,
       28,   28,   28,   28,   93,   28,   36,   71,   95,   36,

       69,   36,   71,   36,   71,   39,   28,   39,   40,  106,
       40,   36,   88,   48,  101,  100,   99,   36,   71,  107,
      102,   28,   28,  103,  104,  105,  117,  121,  118,  108,
      116,  109,   36,   71,   39,  125,  119,   40,  122,   48,
      110,   39,  111,   28,   40,  132,  112,  126,  124,   48,
      120,   48,  113,   76,  127,   28,  131,   36,   86,  123,
      114,   48,   74,   77,  115,   78,   36,   88,  128,   36,
       88,  133,   48,  129,  130,   36,   88,   36,   88,   28,
      146,   48,  162,  148,   48,  147,   48,  134,   28,  135,
       36,   88,  142,  158,   48,  141,  144,  149,  136,  150,

      137,   28,  151,   28,  138,  152,   28,  143,  445,   28,
      145,   36,   69,   28,  156,  160,  159,  182,  139,  153,
       91,   28,  140,  157,  154,  155,  161,   36,   69,   36,
       69,   36,   71,  186,  163,  184,   36,   71,   36,   71,
       36,   71,   36,   71,   36,   71,  166,  425,  165,  168,
       36,   71,   36,   71,   36,   71,   28,  169,   48,  164,
       36,   71,   28,  170,  172,  167,   36,   71,   28,  119,
       39,  171,   39,   40,   39,   40,   39,   40,  173,   40,
      174,   48,   28,   48,  185,  188,  183,  175,   36,   86,
       48,   36,   86,  176,   36,   88,   28,  177,   48,  178,

      190,  427,  179,  187,   36,   88,  180,  195,  203,  189,
      192,  181,   36,   88,   36,   88,   36,   88,   48,  193,
      191,   36,   88,   36,   88,   36,   88,   36,   88,   48,
      207,  196,   36,   88,   48,  144,  204,   48,  194,  206,
       48,  198,   48,  197,   48,   48,   48,   28,   28,  199,
       28,  209,   28,   28,  205,   36,   69,   28,  200,   28,
      201,   36,   69,  202,  210,  211,  208,  212,  213,  214,
      216,  218,   36,   69,  215,   36,   71,   36,   71,  240,
      217,   36,   71,  220,  219,   36,   71,   36,   71,   28,
      225,   36,   71,   48,  221,   36,   71,   36,   71,   36,

       71,   39,  223,  224,   40,  222,   36,   71,  226,   36,
       71,   36,   71,   39,   28,  174,   40,  230,  228,  227,
       28,   39,   39,  229,   40,   40,   28,  232,   28,  235,
      234,   28,   48,   28,   48,  231,   36,   86,  236,  239,
      233,   36,   86,  242,  237,   48,  238,  244,  246,   28,
      245,   36,   88,  241,   36,   88,   36,   88,   48,  243,
       36,   88,   36,   88,   48,  251,   36,   88,   48,  247,
       36,   88,   36,   88,  248,   36,   88,  260,  249,   48,
      250,   36,   88,  252,   48,   48,   48,  259,  264,  254,
      253,   48,  262,  257,   28,   28,  255,   48,   28,   28,

      266,  256,   28,   28,  261,   36,   69,   36,   69,   28,
      258,  618,  263,  265,   28,  268,  271,   36,   69,  267,
      272,  348,  269,  275,   36,   71,  270,   28,  274,  273,
       36,   71,  280,   71,  299,  277,  276,   36,   71,   36,
       71,   36,   71,   36,   71,   36,   71,  278,  293,   36,
       71,   36,   71,   36,   71,   28,  279,   39,  281,   28,
       40,   39,  284,   28,   40,  285,  287,  283,  286,   39,
       39,  282,   40,   40,   28,   48,  289,  295,  288,  290,
       28,   48,  618,  291,   36,   86,   48,  292,   36,   88,
      298,  294,  296,   36,   86,   28,  297,  618,  300,   36,

       88,  280,   88,   36,   88,   48,  301,   36,   88,   36,
       88,  303,  449,  302,  305,   36,   88,   36,   88,   36,
       88,  321,  304,   48,  306,   36,   88,  315,   48,  316,
       48,  317,   48,  314,  309,  308,  310,  313,   48,  307,
      311,   48,   48,   28,  312,  322,   48,   28,   28,   28,
      326,   28,   28,   36,   69,  618,  318,  618,  320,  319,
       36,   69,   36,   69,   36,   71,  328,   36,   71,  327,
      323,  325,  324,  329,   36,   71,   28,  331,  333,  330,
       36,   71,   36,   71,   36,   71,   36,   71,   36,   71,
      332,   36,   71,   36,   71,   39,  334,   39,   40,   28,

       40,   39,  337,  347,   40,   28,  339,   39,  336,   28,
       40,   28,  341,  335,   48,  338,  346,   28,  343,   48,
       48,  349,  618,  340,   48,  342,  344,  352,  350,  354,
       36,   86,   36,   86,   36,   88,  355,   48,  353,  345,
      351,  356,   36,   88,   36,   88,   28,  358,  375,  357,
       36,   88,  374,  360,   36,   88,   36,   88,   36,   88,
      359,   36,   88,   36,   88,   48,  361,  369,   48,  368,
       28,   48,   28,   28,  364,   28,  365,  370,  376,   28,
      363,  618,  367,  362,  377,  379,   28,  371,   36,   69,
       36,   69,  618,  366,  372,   36,   69,   36,   71,   36,

       71,  399,   36,   71,  378,  380,  373,  398,  382,   36,
       71,   36,   71,   28,  385,   36,   71,  381,   36,   71,
       36,   71,   36,   71,  387,   39,   39,  383,   40,   40,
      388,   36,   71,   39,  384,  386,   40,   39,   28,   28,
       40,  401,   28,  391,  392,  389,  390,   28,  395,  393,
      405,   28,  394,  400,  396,   48,  379,   48,  397,  618,
      402,  404,   36,   86,   36,   86,   48,  403,   36,   88,
       36,   88,   48,   36,   88,   36,   88,   48,   36,   88,
      407,   36,   88,   36,   88,  410,   48,  406,   36,   88,
      412,   36,   88,  418,  421,   48,  408,  413,   48,  419,

      420,  417,   48,   28,   28,  409,  411,  618,   36,   69,
      416,  414,   36,   69,  415,  618,  424,  422,   36,   69,
       36,   71,  428,  423,   36,   71,  434,   71,   36,   71,
       28,  432,   36,   71,  431,  426,  429,   36,   71,   36,
       71,  430,   36,   71,  440,   71,   36,   71,   28,   28,
      436,  433,  437,   28,   39,   39,  435,   40,   40,  379,
       39,   39,  618,   40,   40,   28,  618,  446,   48,   36,
       86,  448,  438,  452,  618,  439,  441,  447,   36,   86,
       48,  450,   36,   88,   36,   88,  442,  443,  434,   88,
       48,  454,  444,  455,   48,  451,   36,   88,   36,   88,

       48,  453,   36,   88,   36,   88,  440,   88,   36,   88,
      468,  456,  462,   48,   48,   48,  458,  459,   28,   28,
       28,  618,  465,  464,  457,  471,   28,  463,   36,   69,
      618,  466,   36,   69,  440,   69,  469,  460,  461,   29,
       36,   71,   28,  467,   36,   71,  470,   36,   71,   31,
       28,   33,   36,   71,   28,  474,   36,   71,   36,  479,
      486,  472,   28,  475,   28,  473,   36,   71,   36,   71,
      476,  482,  480,   39,   40,   28,   40,  477,  483,   39,
      490,   29,   40,  481,  487,   28,  489,   28,   48,  478,
      524,   31,   48,  485,   36,   86,  440,   86,   36,   88,

      484,  491,  488,   36,   88,   36,   88,   36,   88,   36,
       88,   36,   88,  494,   48,  492,   48,  499,   36,   88,
      487,   48,  495,  496,  503,   48,   48,  493,  506,   28,
       28,  618,  501,  500,   36,  508,  618,  497,   36,   69,
      505,  618,  498,  502,  509,   36,   71,  618,  507,  511,
       71,   36,   71,   36,   71,  504,   36,   71,   36,   71,
       36,   71,   39,   28,   39,   40,  512,   40,  513,   48,
       39,   28,  510,   40,  520,   28,  521,   28,  514,  523,
       28,  519,   36,   86,   36,   88,  515,  525,  526,   76,
      518,  517,  522,  516,  511,   88,   48,   36,   88,   77,

       48,   78,   36,   88,   36,   88,   36,   88,   36,   88,
       28,  527,  528,  520,   48,  521,   48,  529,  523,   48,
       28,  533,  534,   36,   69,   48,  530,   28,   36,   69,
       36,   71,   36,   71,  531,   36,   71,  540,   71,   36,
       71,  532,   28,  107,  618,  535,  556,   36,   71,  537,
      546,   28,  545,  108,   39,  109,  536,   40,  541,   39,
      548,   28,   40,  538,   36,   86,   36,   88,  539,  542,
       36,   88,  543,  547,   36,   88,  540,   88,   36,   88,
       36,   88,  546,   48,   48,  550,   36,   69,  558,   71,
       36,   71,  549,  593,  544,   36,   71,  553,   36,   71,

       28,  551,  554,  562,   71,  557,   39,  552,  559,   40,
      564,   39,   28,   48,   40,  555,  618,  560,  566,   28,
       36,   86,  558,   88,   36,   88,   36,   88,  572,  161,
      618,  565,  567,   28,  561,   36,   88,  562,   88,  568,
       48,  563,  569,  566,   48,   36,   69,  618,  570,   36,
      574,  575,   71,   36,   71,   39,   36,   86,   40,   36,
      581,  578,  575,   88,   36,   88,   28,   28,  579,   36,
       69,  571,   48,  576,  577,   36,   71,   39,   36,   86,
       40,  573,   36,   88,  582,   36,   69,   36,   71,  584,
       36,   71,  580,  583,  588,   28,   48,   39,  590,  589,

       40,   36,   86,  618,  586,  587,   36,   88,   36,   88,
      170,  592,  603,   28,  594,  618,  595,  618,  596,   36,
       69,   36,   71,  618,  597,   36,   71,  598,  599,   39,
      600,  618,   40,  608,   28,  601,  602,  603,   48,   36,
       86,   36,   88,   36,   88,   36,   69,  604,  618,  605,
       36,   71,  614,   71,  618,  603,   39,  618,  606,   40,
      618,  607,   36,   86,   36,   88,  618,  609,  618,  610,
      614,   88,  614,   69,  617,   71,  611,  618,  612,  614,
       86,  617,   88,  613,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  615,  618,  616,    6,    6,

       15,   15,   35,   35,   51,   51,   70,   70,   87,   87,
        5,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618
    } ;

static yyconst short int yy_chk[1652] =
    {   0,
      624,    1,    1,    1,    1,   13,    1,    1,    1,    9,
        9,   10,   11,   17,   10,   18,   18,   11,   11,  623,
       12,   22,   21,   13,   12,   12,   12,   14,   23,    1,
       35,   35,   24,    1,    2,    2,    2,    2,   12,    2,
        2,    2,   17,   14,   17,   14,   19,   21,   14,   22,
       23,   19,   19,   20,   24,   21,   29,   20,   20,   20,
       25,   28,    2,   26,   30,   33,    2,    3,    3,    3,
       32,   20,    3,    3,    3,   44,   46,   31,   29,   34,
       28,   26,   38,   33,    3,   38,    3,    3,   25,   44,
       28,  621,   28,    3,    3,   26,   30,  581,   32,    3,

        4,    4,    4,   43,   46,    4,    4,    4,   31,   34,
       37,   37,   39,   40,   45,   39,   40,    4,   41,    4,
        4,   50,   41,   41,   41,   49,    4,    4,   48,   37,
       37,   39,    4,    8,   51,   51,   41,  574,   43,   50,
       37,   39,   37,   39,   70,   70,   45,   60,   56,   42,
       52,   52,    8,   42,   42,   42,   49,   48,   58,   48,
        8,   59,    8,    8,    8,    8,   55,   42,   53,   52,
       52,   54,   53,   53,   53,   54,   54,   54,   56,   57,
       52,   60,   52,   58,   61,   62,   53,   63,   59,   54,
       64,   65,   66,   67,   55,   68,   74,   74,   57,   69,

       69,   72,   72,   73,   73,   76,   80,   77,   76,   68,
       77,   87,   87,   84,   63,   62,   61,   75,   75,   69,
       64,   83,   81,   65,   66,   67,   73,   76,   74,   69,
       72,   69,   71,   71,   79,   80,   75,   79,   77,   85,
       71,   78,   71,   82,   78,   84,   71,   81,   79,   93,
       75,   94,   71,   79,   82,  106,   83,   86,   86,   78,
       71,   95,   71,   79,   71,   79,   89,   89,   82,   90,
       90,   85,   96,   82,   82,   91,   91,   92,   92,  102,
       93,   97,  106,   95,   98,   94,  100,   86,  103,   86,
       88,   88,   90,  102,   99,   89,   92,   96,   88,   97,

       88,  104,   98,  125,   88,   99,  101,   91,  398,  105,
       92,  107,  107,  129,  100,  104,  103,  125,   88,   99,
       88,  127,   88,  101,   99,   99,  105,  108,  108,  109,
      109,  110,  110,  129,  107,  127,  111,  111,  112,  112,
      113,  113,  114,  114,  116,  116,  110,  376,  109,  111,
      115,  115,  117,  117,  118,  118,  131,  112,   47,  108,
      119,  119,  128,  113,  116,  110,  120,  120,  126,  115,
      122,  114,  121,  122,  123,  121,  124,  123,  117,  124,
      117,  132,  130,  133,  128,  131,  126,  118,  134,  134,
      146,  135,  135,  119,  137,  137,  378,  120,  150,  121,

      133,  378,  122,  130,  136,  136,  123,  137,  146,  132,
      135,  124,  138,  138,  139,  139,  140,  140,  147,  136,
      134,  141,  141,  142,  142,  143,  143,  144,  144,  148,
      150,  138,  145,  145,  151,  140,  147,  152,  136,  149,
      149,  141,  153,  139,  156,  154,  155,  158,  160,  142,
      157,  152,  159,  162,  148,  163,  163,  161,  143,  184,
      144,  164,  164,  145,  153,  154,  151,  155,  156,  157,
      159,  161,  165,  165,  158,  166,  166,  167,  167,  184,
      160,  168,  168,  163,  162,  169,  169,  170,  170,   27,
      168,  171,  171,   15,  164,  172,  172,  173,  173,  174,

      174,  179,  166,  167,  179,  165,  175,  175,  169,  176,
      176,  177,  177,  178,  182,  170,  178,  174,  172,  171,
      183,  180,  181,  173,  180,  181,  185,  176,  186,  179,
      178,  187,  189,  188,  190,  175,  191,  191,  180,  183,
      177,  192,  192,  186,  181,  204,  182,  188,  190,    6,
      189,  193,  193,  185,  194,  194,  195,  195,  203,  187,
      196,  196,  197,  197,  207,  195,  198,  198,  209,  191,
      199,  199,  200,  200,  192,  201,  201,  204,  193,  205,
      194,  202,  202,  196,  208,  211,  210,  203,  209,  198,
      197,  212,  207,  201,  214,  215,  199,  213,  218,  216,

      211,  200,  217,  219,  205,  220,  220,  221,  221,  295,
      202,    5,  208,  210,  244,  213,  216,  222,  222,  212,
      217,  295,  214,  220,  223,  223,  215,  238,  219,  218,
      224,  224,  225,  225,  244,  222,  221,  226,  226,  227,
      227,  228,  228,  229,  229,  230,  230,  223,  238,  231,
      231,  232,  232,  233,  233,  243,  224,  234,  226,  240,
      234,  235,  229,  239,  235,  230,  232,  228,  231,  236,
      237,  227,  236,  237,  241,  246,  234,  240,  233,  235,
      242,  245,    0,  236,  247,  247,  267,  237,  250,  250,
      243,  239,  241,  248,  248,  402,  242,    0,  245,  249,

      249,  251,  251,  252,  252,  260,  246,  253,  253,  254,
      254,  248,  402,  247,  250,  255,  255,  256,  256,  258,
      258,  267,  249,  259,  252,  257,  257,  261,  261,  262,
      262,  263,  263,  260,  255,  254,  256,  259,  264,  253,
      257,  265,  266,  269,  258,  268,  268,  270,  273,  271,
      272,  272,  274,  275,  275,    0,  264,    0,  266,  265,
      276,  276,  277,  277,  278,  278,  274,  279,  279,  273,
      269,  271,  270,  275,  281,  281,  294,  277,  279,  276,
      282,  282,  283,  283,  284,  284,  285,  285,  286,  286,
      278,  287,  287,  288,  288,  291,  281,  289,  291,  297,

      289,  290,  284,  294,  290,  296,  286,  292,  283,  298,
      292,  299,  288,  282,  300,  285,  293,  293,  290,  321,
      301,  296,    0,  287,  320,  289,  291,  297,  296,  299,
      302,  302,  303,  303,  304,  304,  300,  313,  298,  292,
      296,  301,  305,  305,  306,  306,  323,  303,  321,  302,
      307,  307,  320,  305,  308,  308,  309,  309,  310,  310,
      304,  311,  311,  312,  312,  318,  306,  314,  314,  313,
      324,  319,  325,  328,  309,  347,  310,  318,  323,  348,
      308,    0,  312,  307,  324,  327,  327,  319,  329,  329,
      330,  330,    0,  311,  319,  331,  331,  332,  332,  333,

      333,  348,  334,  334,  325,  328,  319,  347,  330,  335,
      335,  336,  336,  350,  333,  337,  337,  329,  338,  338,
      339,  339,  340,  340,  335,  342,  343,  331,  342,  343,
      336,  341,  341,  344,  332,  334,  344,  345,  351,  349,
      345,  350,  352,  339,  340,  337,  338,  353,  343,  341,
      354,  354,  342,  349,  344,  355,  356,  356,  345,    0,
      351,  353,  357,  357,  358,  358,  372,  352,  359,  359,
      360,  360,  368,  361,  361,  362,  362,  370,  363,  363,
      357,  364,  364,  367,  367,  360,  371,  355,  366,  366,
      362,  365,  365,  368,  372,  373,  358,  363,  374,  370,

      371,  367,  375,  377,  380,  359,  361,    0,  381,  381,
      366,  364,  383,  383,  365,    0,  375,  373,  382,  382,
      384,  384,  380,  374,  385,  385,  386,  386,  387,  387,
      399,  384,  388,  388,  383,  377,  381,  389,  389,  390,
      390,  382,  391,  391,  392,  392,  393,  393,  400,  401,
      388,  385,  389,  403,  394,  395,  387,  394,  395,  396,
      396,  397,    0,  396,  397,  404,    0,  399,  406,  408,
      408,  401,  390,  406,    0,  391,  393,  400,  407,  407,
      424,  403,  409,  409,  410,  410,  394,  395,  411,  411,
      419,  408,  397,  409,  420,  404,  412,  412,  413,  413,

      421,  407,  414,  414,  415,  415,  416,  416,  417,  417,
      424,  410,  418,  418,  422,  423,  413,  414,  426,  427,
      425,    0,  421,  420,  412,  428,  428,  419,  429,  429,
        0,  422,  430,  430,  431,  431,  426,  415,  417,  425,
      432,  432,  446,  423,  433,  433,  427,  436,  436,  425,
      450,  425,  435,  435,  449,  432,  437,  437,  438,  438,
      446,  429,  445,  433,  491,  430,  439,  439,  441,  441,
      435,  442,  439,  443,  442,  448,  443,  436,  443,  444,
      450,  445,  444,  441,  447,  447,  449,  451,  452,  437,
      491,  445,  466,  445,  453,  453,  454,  454,  455,  455,

      444,  451,  448,  456,  456,  457,  457,  458,  458,  459,
      459,  460,  460,  455,  463,  452,  465,  460,  461,  461,
      464,  464,  456,  457,  466,  467,  468,  453,  469,  469,
      470,    0,  463,  461,  472,  472,    0,  458,  473,  473,
      468,    0,  459,  465,  473,  474,  474,    0,  470,  475,
      475,  476,  476,  477,  477,  467,  478,  478,  480,  480,
      481,  481,  484,  485,  483,  484,  476,  483,  477,  492,
      482,  489,  474,  482,  486,  486,  488,  488,  478,  490,
      490,  485,  493,  493,  494,  494,  480,  492,  493,  482,
      484,  483,  489,  481,  495,  495,  505,  496,  496,  482,

      503,  482,  497,  497,  498,  498,  499,  499,  500,  500,
      507,  494,  496,  501,  501,  502,  502,  497,  504,  504,
      519,  503,  505,  508,  508,  525,  498,  535,  509,  509,
      510,  510,  512,  512,  499,  513,  513,  514,  514,  515,
      515,  500,  524,  508,    0,  507,  535,  516,  516,  510,
      522,  522,  519,  508,  517,  508,  509,  517,  515,  518,
      525,  583,  518,  512,  526,  526,  527,  527,  513,  516,
      528,  528,  517,  524,  529,  529,  530,  530,  531,  531,
      532,  532,  533,  533,  534,  527,  536,  536,  537,  537,
      538,  538,  526,  583,  518,  539,  539,  531,  541,  541,

      556,  528,  532,  542,  542,  536,  543,  529,  538,  543,
      544,  544,  545,  548,  544,  534,    0,  539,  547,  547,
      549,  549,  550,  550,  551,  551,  552,  552,  556,  545,
        0,  545,  548,  565,  541,  553,  553,  554,  554,  549,
      567,  543,  551,  555,  555,  557,  557,    0,  552,  559,
      559,  560,  560,  561,  561,  563,  568,  568,  563,  569,
      569,  565,  570,  570,  571,  571,  572,  578,  567,  573,
      573,  553,  579,  561,  563,  576,  576,  577,  580,  580,
      577,  557,  582,  582,  571,  584,  584,  585,  585,  573,
      586,  586,  568,  572,  578,  588,  589,  587,  580,  579,

      587,  590,  590,    0,  576,  577,  591,  591,  592,  592,
      585,  582,  593,  593,  584,    0,  585,    0,  586,  594,
      594,  595,  595,    0,  587,  596,  596,  588,  589,  597,
      590,    0,  597,  598,  598,  591,  592,  599,  599,  600,
      600,  601,  601,  602,  602,  604,  604,  594,    0,  595,
      605,  605,  606,  606,    0,  607,  607,    0,  596,  607,
        0,  597,  609,  609,  610,  610,    0,  600,    0,  601,
      611,  611,  612,  612,  613,  613,  602,    0,  604,  615,
      615,  616,  616,  605,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  609,    0,  610,  619,  619,

      620,  620,  622,  622,  625,  625,  626,  626,  627,  627,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#define INITIAL 0
/*
   makeedit.l : This file is part of pstoedit
   Simple parser to parse the intermediate flat PostScript and call the backend
   output routines.

   Copyright (C) 1993,1994,1995,1996,1997 Wolfgang Glunz, Wolfgang.Glunz@mchp.siemens.de

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

*/
// #include <stdio.h>
#include <iostream.h>
#include <fstream.h>

// rcw2: work round case insensitivity in RiscOS
#ifdef riscos
#include "unix:string.h"
#else
#include <string.h>
#endif

#include "psfront.h"

static float  origx, origy;
static char   *start_of_text;
static char   *end_of_text;
static float  number;

#define YY_SKIP_YYWRAP
static int yywrap() { return 1;}

#define YY_NEVER_INTERACTIVE 1
// to avoid usage of isatty

#define YY_NO_UNPUT
// to avoid compiler warning

// define YY_DECL int yylex YY_PROTO(( *outputdriver ))
#define YY_DECL int PSFrontEnd::yylex()

#define READPATH 1


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;



	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 619 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1611 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{ 
// Work around for Linux libg++ bug
			 number = (float) atof(yytext);
// Original
//			 istrstream s(yytext);
//			 s >> number;
			 
			 addNumber(number * backend.get_scale());
			}
	YY_BREAK
case 2:
YY_RULE_SETUP
{ 
			backend.showpage();
			}
	YY_BREAK
case 3:
YY_RULE_SETUP
{ 
			if (backend.numberOfElementsInPath() != 0) {
				errf << "Error, path number " << pathnumber << " was not cleared correctly" << endl;
			}

			pathnumber++;
			BEGIN(READPATH); 
			backend.setIsPolygon(false);
			backend.setPathNumber(pathnumber);
			}
	YY_BREAK
case 4:
YY_RULE_SETUP
{
			/* /Helvetica findfont 14 scalefont setfont */
			if (!non_standard_font) {
			// in the case of a non standard font, the setCurrentFontName was
			// done during handling of nonstandard font
				start_of_text = strchr (yytext,(int)'/') + 1 ;
				end_of_text = strchr (yytext,(int)' ') ;
				if (end_of_text) *end_of_text = (char) 0;
				backend.setCurrentFontName(start_of_text,0);
			}
			non_standard_font = 0; // reset 
			}
	YY_BREAK
case 5:
YY_RULE_SETUP
{ 
			/* fprintf(stderr,"%s\n",yytext);  */
			start_of_text = yytext+2;
			end_of_text =  strrchr (yytext,(int)' ') ;
			if (end_of_text) *end_of_text = (char) 0;
			backend.setCurrentFontFamilyName(start_of_text);
			}
	YY_BREAK
case 6:
YY_RULE_SETUP
{ 
			/* fprintf(stderr,"%s\n",yytext);  */
			start_of_text = yytext+2;
			end_of_text =  strrchr (yytext,(int)' ') ;
			if (end_of_text) *end_of_text = (char) 0;
			backend.setCurrentFontFullName(start_of_text);
			}
	YY_BREAK
case 7:
YY_RULE_SETUP
{ 
			/* fprintf(stderr,"%s\n",yytext);  */
			start_of_text = yytext+2;
			end_of_text =  strrchr (yytext,(int)' ') ;
			if (end_of_text) *end_of_text = (char) 0;
			backend.setCurrentFontWeight(start_of_text);
			}
	YY_BREAK
case 8:
YY_RULE_SETUP
{
			}
	YY_BREAK
case 9:
YY_RULE_SETUP
{
			/* % Times-Roman Times-Roman@0 nonstandard font */
			/* % Bla Bla nonstandard font */ /* if it is not derived from a standard font */
			start_of_text = yytext+2;
			end_of_text =  strchr (start_of_text,(int)' ') ;
			if (end_of_text) *end_of_text = (char) 0;
			char   *start_of_secondname = end_of_text +1;
			char   *end_of_secondname = strchr (start_of_secondname,(int)' ') ;
			if (end_of_secondname) *end_of_secondname = (char) 0;
			non_standard_font = 1; // this avoids a further setting of CurrentFontName
			if (strcmp(start_of_text,start_of_secondname) == 0 ) {
				// both names are equal, so it's not a derived font
				backend.setCurrentFontName(start_of_text,1);
			} else {
				// it's a derived font, so use the base name
				backend.setCurrentFontName(start_of_text,0);
			}
			}
	YY_BREAK
case 10:
YY_RULE_SETUP
{
			backend.setCurrentShowType(drvbase::eofill);
			}
	YY_BREAK
case 11:
YY_RULE_SETUP
{
			backend.setCurrentShowType(drvbase::fill);
			}
	YY_BREAK
case 12:
YY_RULE_SETUP
{
			backend.setCurrentShowType(drvbase::stroke);
			}
	YY_BREAK
case 13:
YY_RULE_SETUP
{
				errf << yytext;
			}
	YY_BREAK
case 14:
YY_RULE_SETUP
{ }
	YY_BREAK
case 15:
YY_RULE_SETUP
{
			// setCurrentFontSize(number * backend.get_scale());
			backend.setCurrentFontSize(pop());
			// pop(); 
			}
	YY_BREAK
case 16:
YY_RULE_SETUP
{
			float B = pop() / backend.get_scale();
			float G = pop() / backend.get_scale();
			float R = pop() / backend.get_scale();
			/* printf("%s %f %f %f\n","setting RGB to ",R,G,B); */
			backend.setRGB(R,G,B);
			}
	YY_BREAK
case 17:
YY_RULE_SETUP
{
				yytext[strlen(yytext) -9] = '\0'; // strip of trailing setdash
				backend.setDash(yytext+1); // don't copy leading space
			}
	YY_BREAK
case 18:
YY_RULE_SETUP
{
			backend.setCurrentLineJoin((int) (number +0.5));
			pop(); 
			}
	YY_BREAK
case 19:
YY_RULE_SETUP
{
			backend.setCurrentLineCap((int) (number +0.5));
			pop(); 
			}
	YY_BREAK
case 20:
YY_RULE_SETUP
{
			backend.setCurrentLineWidth(pop() );
//			setCurrentLineWidth(number * backend.get_scale() );
//			pop(); 
			}
	YY_BREAK
case 21:
YY_RULE_SETUP
{
			float height = pop(); 
			if (height < 1.0 ) { height = 792 * backend.get_scale() ; }
			backend.setCurrentDeviceHeight(height);
			float width  = pop(); 
			if (width < 1.0 ) { width = 612 * backend.get_scale() ; }
			backend.setCurrentDeviceWidth(width);
			}
	YY_BREAK
case 22:
YY_RULE_SETUP
{
			const float ay = pop();
			const float ax = pop();
			const int   Char = (int) (pop() / backend.get_scale()   +0.5);	
			const float cy = pop();
			const float cx = pop();
			backend.setCurrentWidthParams(ax,ay,Char,cx,cy);
			}
	YY_BREAK
case 23:
YY_RULE_SETUP
{ 
			start_of_text = strchr (yytext,(int)'(') + 1 ;
			end_of_text = strrchr (yytext,(int)')') ;
			if (end_of_text) *end_of_text = (char) 0;
			const float y = pop();
			const float x = pop();
			backend.dumpText(start_of_text,x,y);
			}
	YY_BREAK
case 24:
YY_RULE_SETUP
{
			backend.setCurrentFontAngle(number);
			pop();
			}
	YY_BREAK
case 25:
YY_RULE_SETUP
{
			/* Because this is in the preamble, only pop 
			   this has put something on the stack. */
			if (nextFreeNumber >= 2)
				{ pop(); pop(); }
			}
	YY_BREAK
case 26:
YY_RULE_SETUP
{
			/* Because this is in the preamble, only pop 
			   this has put something on the stack. */
			if (nextFreeNumber >= 2)
				{ pop(); pop(); }
			}
	YY_BREAK
case 27:
YY_RULE_SETUP
{ /* ignore any other stuff */ }
	YY_BREAK
case 28:
YY_RULE_SETUP
{ 
			// save coordinates for possible closepath
			origy = pop();
			origx = pop();
			if (backend.numberOfElementsInPath() > 1) {
				// this is an intermediate moveto
				// if backend supports subpaths add it
				// else dump last path and start a new one
				if (backend.backendSupportsSubPathes) {
//					Point p(origx,origy);
					backend.addtopath(new Moveto(origx,origy)); // pass p as array
				} else {
					// dumppath
					backend.dumpPath();
					// start new path
//					Point p(origx,origy);
					backend.addtopath(new Moveto(origx,origy)); // pass p as array
					
				}
			} else {
				// it is a starting moveto
//				Point p(origx,origy);
				backend.addtopath(new Moveto(origx,origy)); // pass p as array
			}
		   }
	YY_BREAK
case 29:
YY_RULE_SETUP
{
			float y = pop();
			float x = pop();
//			Point p(x,y);
			backend.addtopath(new Lineto(x,y)); // pass p as array
			}
	YY_BREAK
case 30:
YY_RULE_SETUP
{ 
			if (!backend.backendSupportsCurveto) {
				errf << "illegal input received. curveto not expected by this backend\n";
				exit(1);
			}
			Point p[3];
			for (int i = 0; i < 3; i++) {
				float y = pop();
				float x = pop();
				p[i] = Point(x,y);
			}
			backend.addtopath(new Curveto(p)); // pass p as array
			}
	YY_BREAK
case 31:
YY_RULE_SETUP
{
			 Point startPoint(origx,origy);
			 const basedrawingelement & lastelem = backend.pathElement(backend.numberOfElementsInPath() -1 );
			// check for last == first. Then no additional
			// lineto is needed. and isPolygon can be set to true
			 if  ( (lastelem.getType() == lineto) && (lastelem.getPoint(0) == startPoint) ) {
				// no need to close the path, it's already closed
			 } else {
				if (backend.backendSupportsSubPathes) {
			 		backend.addtopath(new Closepath()); 
				} else {
			 		backend.addtopath(new Lineto(origx,origy)); // pass p as array
				}

			 }
			 backend.setIsPolygon(true);
			 /* show is done by next stroke, fill or moveto */
			}
	YY_BREAK
case 32:
YY_RULE_SETUP
{ 
			 BEGIN(INITIAL);
			 backend.dumpPath();
                       	};
	YY_BREAK
case 33:
YY_RULE_SETUP
{ 
			 BEGIN(INITIAL);
			 backend.dumpPath(); 
                       	};
	YY_BREAK
case 34:
YY_RULE_SETUP
{ 
			 BEGIN(INITIAL);
			 backend.dumpPath(); 
                       	};
	YY_BREAK
case 35:
YY_RULE_SETUP
{}
	YY_BREAK
case 36:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(READPATH):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 619 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 619 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 618);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						{
						yy_c_buf_p = yytext_ptr + offset;
						return EOF;
						}

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *str )
#else
YY_BUFFER_STATE yy_scan_string( str )
yyconst char *str;
#endif
	{
	int len;
	for ( len = 0; str[len]; ++len )
		;

	return yy_scan_bytes( str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( (char *) ptr );
	/* see above note in yy_flex_realloc regarding cast */
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif

void PSFrontEnd::yylexcleanup()
{
//	if (yy_state_buf) yy_flex_free(yy_state_buf);
	yy_delete_buffer( yy_current_buffer );
}

void PSFrontEnd::run(bool merge)
{
	backend.startup(merge);
	yylex();
	backend.finalize();
}
void PSFrontEnd::addNumber(float number)
{
// printf("Adding %f\n",number);
 if (nextFreeNumber < maxpoints) { 
     	numbers[nextFreeNumber++] = number; 
     	// nextFreeNumber always points to the next free number
 } else { 
   	errf << "Too many numbers on stack. Please increase maxpoints in drvbase.h \n"; 

   	exit(1); 
 }
}

PSFrontEnd::PSFrontEnd(ostream & errstream,drvbase & backend_p)
	: errf(errstream),
	  backend(backend_p),
	  numbers((float*) 0),
    	  nextFreeNumber(0),
    	  pathnumber(0),
	  non_standard_font(false)
{
    numbers = new float[maxpoints]; // The number stack
    if ((numbers == 0)){
	errf << "new failed in PSFrontEnd::PSFrontEnd " << endl;
	exit(1);
    }
}

PSFrontEnd::~PSFrontEnd() {
	delete [] numbers;
	yylexcleanup();
}

float PSFrontEnd::pop() 
{ 
  if (nextFreeNumber > 0) {
  	nextFreeNumber--;
  	return numbers[nextFreeNumber]; // the value we just popped
  } else {
	errf << "Fatal error in drvbase::pop : nextFreeNumber would get < 0" << endl;
	exit(1);
  }
  return 0.0f; // never reached, just to make compiler quiet
}


