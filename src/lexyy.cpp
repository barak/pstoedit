/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
//#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 73
#define YY_END_OF_BUFFER 74
static yyconst short int yy_accept[939] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   74,   58,   58,   58,   58,   58,   58,   58,
        1,   58,   58,   58,   58,   58,   72,   72,   72,    1,
       72,   72,   72,   72,   72,   72,   58,   58,    1,   72,
        6,    4,    6,    1,    5,    5,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   41,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    1,    1,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    1,
        1,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   25,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   70,    0,    0,    0,
        0,    0,   64,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   22,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   71,    0,   65,    0,   60,    0,   59,    0,   63,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   55,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    9,    0,    0,    0,   66,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   61,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   46,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   67,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    8,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   16,    0,    0,    0,    0,
        0,    0,    0,   41,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   62,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   56,    0,    0,    0,    0,    0,    0,    0,    0,
       18,    0,    0,    0,    0,    0,    0,    0,   11,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   68,    0,    0,    0,    0,    0,   49,    0,

        0,    0,    0,    0,    0,    0,    0,   24,    0,    0,
        0,   40,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   57,    0,    0,    0,   15,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   69,
        0,    0,    0,   51,    0,    0,    0,   48,    0,    0,
        0,    0,   44,    0,    0,    0,   23,    0,   36,   39,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   13,
        0,    0,    0,    0,    0,    0,    0,   20,    0,    0,
        0,    0,    0,    0,    0,    0,   28,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   45,    0,    0,   50,
        0,    0,    0,   39,    0,    0,    0,   33,    0,   31,
        0,    0,    0,   38,    0,    0,    0,    0,   14,    0,
        0,    0,    0,    0,   21,    0,    0,   12,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   54,    0,    0,
        0,    0,    0,    0,    0,   47,    0,    0,   52,    0,
        0,   37,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   19,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        3,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       32,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   29,    0,    0,    0,   53,    0,    0,
       10,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   10,    0,    0,   11,    0,    0,   26,    0,
        0,   10,    0,    0,   43,    0,    0,    0,    0,    0,
        0,    0,   10,    0,    0,    0,    0,    0,    7,    0,
        0,   34,    0,    0,    0,    0,   42,    0,    0,   17,
        0,    0,    0,    0,    0,   27,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   12,    0,    0,

        0,    0,    0,    2,    0,    0,    0,    0,    0,   30,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       10,    0,    0,    0,    0,    0,   10,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   35,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    1,    1,    1,    5,    1,    1,    6,
        7,    1,    1,    1,    8,    9,    1,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   10,    1,    1,
        1,    1,    1,    1,   11,   12,   13,   14,   15,   16,
       17,   11,   11,   11,   11,   11,   18,   19,   11,   20,
       11,   11,   21,   11,   11,   11,   22,   11,   11,   11,
       23,    1,   24,    1,    1,    1,   25,   26,   27,   28,

       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   11,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   50,    1,   51,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[52] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    1,    4,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    1,    1,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    1,
        1
    } ;

static yyconst short int yy_base[956] =
    {   0,
        0,   40,   78,  116,    5,    7, 1750, 1744,   14,   16,
     1740, 1727, 1720,   14, 3105,   26,  156,   25,   30,   47,
       51,   32,   58,   66,   68,   84, 3105, 1716, 1693,   81,
       17, 1650, 1655, 1650, 1633, 1623,   89, 1650,   94,   71,
     3105, 3105, 1646,  109, 3105, 1630,   94,  123,  124,  128,
      129,  130,  135,  140,  147, 3105,  163,  170,  172,  181,
      191,  196,  204,  164,  197,  205,  209,  211,  217,  210,
      224,  225,  231,  237,  241,  245,  250,  251, 1631,  214,
      251,   46, 1589,  234, 1590, 1587, 1572, 1556, 1575,    7,
       59,  153,   91, 1576,  258,  262,  264,  268,  269,  278,

      280,  318,  285,  294,  302,  309,  320,  325,  311,  340,
      348,  354,  361,  341,  355,  292,  365,  367,  369,  371,
      379,  381,  383,  419,  387, 1544, 1527, 1519, 1527, 1523,
     1516, 1519, 1511, 1489, 1495,  115,  300,   74, 1458,  391,
      392,  399,  397,  398,  424,  434,  441,  447,  460,  462,
      497,  470,  468,  476,  478,  485,  483,  502,  490,  504,
      513,  526,  414,  518,  425,  527,  533,  534,  538,  544,
      408,  436,  542,  548,  546,  553,  554,  559,  568,  572,
      578, 1455, 1449, 1438, 1430,  589, 1419, 1412, 1398, 1416,
      564,  555,   24, 1375,  592,  594,  598,  599,  600,  606,

      611,  616,  618,  626,  633,  640,  647,  653,  658,  660,
      665,  670,  672,  686,  677,  688,  693,  627,  694,  695,
      445,  701,  702,  604,  707,  708,  716,  718,  709,  724,
      725,  730,  731,  738,  739,  749, 3105, 1374, 1366, 1353,
     1356,  752, 3105, 1348, 1340, 1344, 1368,  306,  122,  177,
     1328,  740,  755,  761,  763,  767,  772,  777,  779,  785,
      791,  804,  809,  814,  816,  821,  823,  828,  830,  835,
      837,  852,  854,  862,  789,  866,  795,  867,  872,  802,
      873,  797,  877,  879,  883,  885,  889,  897,  898,  903,
      904,  909, 1337, 1318,  915,  929,  932,  935,  939,  119,

      177,  916,  305, 1323,  921,  940,  952,  941,  953,  958,
      960,  965,  978, 3105,  995,  983,  967,  985,  997, 1002,
     1016, 1021, 1023, 1028, 1036, 1038, 1043, 1050, 1052, 1057,
      987, 1058, 1063, 1064, 1068, 1075, 1077, 1085, 1014, 1096,
     1087, 1102, 1103, 1104, 1108, 1109, 1113, 1114, 1288, 1130,
     1133, 3105, 1137, 3105, 1142, 3105, 1152, 3105, 1155, 3105,
     1294, 1273, 1134,  356,  397,  649,  224, 1262, 1122, 1161,
     1174, 3105, 1180, 1186, 1166, 1188, 1193, 1195, 1200, 1207,
     1241, 1209, 1220, 1214, 1230, 1222, 1232, 1257, 1262, 1271,
     1273, 1278, 1284, 1115, 1224, 1251, 1263, 1201, 1282, 1290,

     1296, 3105, 1302, 1303, 1309, 3105, 1319, 1311, 1320, 1321,
     1325, 1326, 1330, 1331, 1332, 1339, 1345, 1236, 1338, 3105,
     1217, 1207, 1214, 1221, 1177, 1177, 1164, 1150,  381, 1146,
     1146,  485,  409,  231, 1137, 1351, 1352, 1367, 3105, 1373,
     1374, 1379, 1381, 1387, 1394, 1401, 1403, 1409, 1414, 1419,
     1425, 1427, 1442, 1444, 1449, 1454, 1456, 1461, 1466, 1472,
     1395, 1473, 1479, 1484, 1485, 1491, 3105, 1497, 1498, 1431,
     1502, 1436, 1506, 1508, 1510, 1512, 1514, 1516, 1522, 3105,
     1528, 1540, 1127, 1135, 1109, 1108, 1114, 1095, 1099, 1078,
     1063, 1055, 1054, 1057,  983,  942,  493, 1052, 1529, 1530,

     1558, 1564, 1551, 1570, 1576, 3105, 1598, 1578, 1583, 1589,
     1591, 1600, 1606, 3105, 1642, 1608, 1615, 1620, 1625, 1634,
     1649, 1658, 1666, 1672, 1683, 1543, 1643, 1674, 1635, 1650,
     1690, 1691, 1692, 1696, 1703, 1704, 1705, 1709, 1710, 1711,
     1720, 3105, 1045, 1724, 1031, 1033, 1727, 1020, 1018,  969,
      971,  966,  970,  934, 1209,  613,  271,  954, 1730, 1736,
     1750, 3105, 1756, 1762, 1768, 1770, 1776, 1778, 1783, 1789,
     3105, 1810, 1797, 1802, 1812, 1817, 1832, 1826, 3105, 1834,
     1839, 1846, 1854, 1856, 1862, 1864, 1737, 1795, 1840, 1847,
     1870, 1878, 3105, 1889, 1879, 1895, 1743, 1902, 3105, 1908,

     1914, 1896, 1790, 1920, 1922, 1930, 1933, 3105, 1936,  954,
     1939, 3105,  891,  892,  879,  863,  874,  854,  856,  425,
     1003,  879,  833, 1940, 1949, 3105, 1958, 1942, 1965, 3105,
     1999, 1951, 1974, 1976, 1982, 1984, 1991, 2004, 2006, 2020,
     2025, 2032, 2042, 2049, 1959, 1880, 1992, 2040, 2055, 3105,
     2062, 1969, 2070, 3105, 2080, 2086, 2092, 3105, 2098, 2104,
     2072, 2110, 3105, 2116, 2117, 2123, 3105, 2126, 3105,    0,
      824,  825, 2129, 2132,  824,  820, 2135, 1421,  848, 3105,
      802, 2063, 2139, 2141, 2146, 2148, 2158, 3105, 2184, 2164,
     2169, 2171, 2186, 2191, 2200, 2208, 3105, 2214, 2220, 2229,

     2238, 2175, 2177, 2221, 2230, 2245, 3105, 2259, 2265, 3105,
     2271, 2277, 2283,    0, 2251,  820, 2289, 3105, 2292, 3105,
      803,  748, 2295, 3105,  606,  775, 2192, 2300, 3105, 2312,
     2302, 2314, 2320, 2329, 3105, 2353, 2322, 3105, 2334, 2336,
     2341, 2355, 2360, 2370, 2375, 2383, 2395, 3105, 2403, 2201,
     2304, 1986, 2150, 2342, 2409, 3105, 2415, 2421, 3105, 2427,
     2433, 3105,  735,  717,  713,  730,  732, 2434, 2467, 2436,
     2444, 3105, 2508, 2385, 2446, 2451, 2456, 2474, 2487, 2489,
     2496, 2461, 2361, 2491, 2468, 2480,  689,  695, 2519,  674,
      677, 2376, 2525, 2531, 2533, 2538, 2540, 2545, 2552, 2550,

     2558, 2563, 2570, 2574, 2396, 2564, 2582,  637,  638, 2588,
     3105,  622,  620, 2589, 2595, 2631, 2601, 2606, 2608, 2615,
     2638, 2648, 2654, 3105, 2660, 2667, 2673, 3105, 2679, 2497,
     2617, 2624, 2685,  581,  622,  565,  546, 2596, 2687, 2692,
     2694, 2700, 2702, 2707, 2713, 3105, 2720, 2729, 3105, 2735,
     2722, 2736, 2744, 2750, 3105, 2761, 2767,  551,  540,  545,
     2772, 2778, 2801, 2752, 2780, 2785, 2793, 2822, 3105, 2828,
     2812, 3105,  533,  529,  498, 2834, 3105, 2842, 2848, 3105,
     2883, 2795, 2850, 2858, 2856, 3105, 2864,  502,  486,  474,
     2870, 2872, 2888,  453,  439,  386, 2900, 3105, 2909, 2890,

     2916,  348, 2878, 3105, 2925, 2927,  363, 2933, 2936, 3105,
     2938, 2940,  323, 2945, 2953,  282, 2955, 2960,  278, 2962,
     2968,  276, 2977,  262, 2975,  240, 2982,  213,  210,  177,
      113,  100,   71,   37, 2988, 2999, 3105, 3105, 3024, 3029,
     3034, 3039, 3044, 3049, 3054, 3059, 3064, 3067, 3072, 3074,
     3079, 3084, 3089, 3094, 3099
    } ;

static yyconst short int yy_def[956] =
    {   0,
      939,  939,  940,  940,  941,  941,  940,  940,  942,  942,
      943,  943,  938,  944,  938,  944,  945,  946,  944,  944,
      944,  944,  944,  944,  944,  944,  938,  947,  938,  938,
      938,  938,  938,  938,  938,  938,  948,  938,  938,  947,
      938,  938,  938,  938,  938,  938,  944,  944,  944,  944,
      944,  944,  944,  944,  945,  938,  949,  945,  945,  945,
      945,  945,  945,  946,  946,  946,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  947,  938,
      938,  938,  938,  938,  938,  938,  938,  938,  938,  948,
      948,  948,  947,  938,  944,  944,  944,  944,  944,  945,

      949,  949,  949,  949,  949,  949,  949,  945,  945,  945,
      945,  945,  945,  946,  946,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  938,  938,  938,  938,  938,
      938,  938,  938,  938,  938,  948,  948,  947,  938,  944,
      944,  944,  944,  944,  945,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  945,  945,  945,  945,
      945,  945,  946,  946,  946,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      938,  938,  938,  938,  938,  938,  938,  938,  938,  938,
      948,  948,  947,  938,  944,  944,  944,  944,  944,  945,

      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  945,  945,  945,  945,  945,  945,  946,  946,  946,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  938,  938,  938,  938,  938,
      938,  938,  938,  938,  938,  938,  938,  948,  948,  947,
      938,  944,  944,  944,  944,  944,  945,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  945,  945,
      945,  945,  945,  945,  946,  946,  946,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  938,  938,  938,  938,  938,  938,  938,  938,

      950,  948,  947,  938,  944,  944,  944,  944,  944,  945,
      949,  949,  949,  938,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  945,  945,  945,  945,  945,  945,  945,
      946,  946,  946,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  938,  938,
      938,  938,  938,  938,  938,  938,  938,  938,  938,  938,
      938,  938,  938,  950,  950,  948,  947,  938,  944,  944,
      944,  938,  944,  944,  944,  945,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  945,  945,  945,  945,
      945,  945,  945,  946,  946,  946,  944,  944,  944,  944,

      944,  938,  944,  944,  944,  938,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  938,  938,  938,
      938,  938,  938,  938,  938,  938,  938,  938,  938,  938,
      938,  950,  948,  947,  938,  944,  944,  944,  938,  944,
      944,  945,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  945,  945,  945,  945,  945,  945,  945,  946,
      946,  946,  944,  944,  944,  944,  938,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  938,
      944,  938,  938,  938,  938,  938,  938,  938,  938,  938,
      938,  938,  938,  938,  950,  948,  947,  938,  944,  944,

      944,  945,  949,  949,  949,  938,  949,  949,  949,  949,
      949,  949,  949,  938,  949,  949,  945,  945,  951,  945,
      945,  945,  945,  946,  946,  946,  946,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      938,  938,  938,  938,  938,  938,  938,  938,  938,  938,
      938,  938,  938,  938,  950,  948,  947,  938,  944,  944,
      944,  938,  944,  945,  945,  949,  949,  949,  949,  949,
      938,  949,  949,  949,  949,  945,  945,  951,  938,  951,
      951,  951,  945,  945,  945,  945,  946,  946,  944,  944,
      944,  944,  938,  944,  944,  944,  944,  944,  938,  944,

      944,  944,  944,  944,  944,  938,  938,  938,  938,  938,
      938,  938,  938,  938,  938,  938,  938,  938,  938,  950,
      948,  952,  938,  944,  944,  938,  944,  949,  949,  938,
      949,  949,  949,  949,  949,  949,  945,  945,  951,  951,
      945,  945,  945,  945,  946,  946,  944,  944,  944,  938,
      944,  944,  944,  938,  944,  944,  944,  938,  944,  944,
      944,  944,  938,  944,  944,  938,  938,  938,  938,  953,
      938,  938,  938,  938,  938,  938,  938,  948,  952,  938,
      938,  944,  949,  949,  949,  949,  949,  938,  949,  949,
      954,  945,  951,  951,  945,  945,  938,  945,  945,  945,

      946,  946,  944,  944,  944,  944,  938,  944,  944,  938,
      944,  944,  944,  953,  938,  938,  938,  938,  938,  938,
      938,  938,  938,  938,  950,  938,  944,  949,  938,  949,
      949,  949,  949,  949,  938,  949,  954,  938,  954,  954,
      945,  951,  951,  945,  945,  945,  946,  938,  946,  946,
      946,  944,  944,  944,  944,  938,  944,  944,  938,  944,
      938,  938,  938,  938,  938,  363,  938,  944,  949,  949,
      949,  938,  949,  954,  954,  945,  951,  951,  945,  945,
      945,  946,  946,  944,  944,  944,  938,  938,  938,  938,
      938,  944,  949,  949,  954,  954,  945,  951,  951,  945,

      945,  945,  946,  946,  944,  944,  944,  938,  938,  938,
      938,  938,  938,  944,  949,  949,  954,  954,  945,  951,
      951,  945,  945,  938,  945,  945,  946,  938,  946,  946,
      944,  944,  944,  938,  938,  938,  938,  944,  949,  949,
      954,  954,  945,  951,  951,  938,  951,  945,  938,  945,
      945,  946,  944,  944,  938,  944,  938,  938,  938,  938,
      944,  949,  949,  954,  954,  951,  945,  944,  938,  944,
      938,  938,  938,  938,  938,  944,  938,  944,  949,  938,
      949,  954,  954,  951,  945,  938,  945,  938,  938,  938,
      954,  954,  951,  938,  938,  938,  954,  938,  954,  954,

      951,  938,  955,  938,  954,  951,  938,  955,  955,  938,
      954,  951,  938,  954,  951,  938,  954,  951,  938,  954,
      951,  938,  954,  938,  954,  938,  954,  938,  938,  938,
      938,  938,  938,  938,  938,  938,  938,    0,  938,  938,
      938,  938,  938,  938,  938,  938,  938,  938,  938,  938,
      938,  938,  938,  938,  938
    } ;

static yyconst short int yy_nxt[3157] =
    {   0,
      938,  938,   15,   16,   17,   18,   19,   20,   21,   37,
      938,   37,   38,   39,   38,   39,   42,   48,   42,  938,
       49,   43,   44,   43,   44,   22,   56,  938,   65,   48,
       23,   66,   49,   67,  938,   48,   49,   24,   49,   91,
       25,   26,   15,   16,   17,   18,   19,   20,   21,   50,
       48,  250,   82,   49,   48,   68,   70,   49,   69,   69,
       83,   48,  938,   51,   49,   22,   52,   53,   54,   48,
       23,   48,   49,   56,   49,   93,   56,   24,  126,   69,
       25,   26,   28,  935,  127,   29,   30,   48,   81,   81,
       49,   91,   89,   56,   73,  136,   74,   48,   71,   72,

       49,   81,   81,  934,   31,  138,   32,   33,   75,   81,
       76,  193,   77,   34,   35,   78,   81,   81,  938,   36,
       28,   91,   81,   29,   30,  938,   48,   67,   92,   49,
       49,   95,   48,   48,   49,   49,   49,   81,   48,  191,
      933,   49,   31,   48,   32,   33,   49,   91,  361,   56,
      100,   34,   35,   59,  302,  932,  938,   36,   56,   57,
       58,  362,   59,   98,   53,   56,  102,   65,   97,  103,
       66,   96,   56,  100,   56,  109,   59,   60,   59,   56,
       99,  108,   61,   56,  100,   91,  363,   59,   62,  104,
      137,  105,  106,   56,  100,   63,  303,   59,   56,  100,

       65,  931,   59,   66,  107,  110,   56,  100,  115,  365,
       59,   66,   48,   48,   48,   49,   49,   49,   69,   69,
       48,   81,   81,   49,   69,   69,   56,   48,   48,  111,
       49,   49,  112,   56,   48,  116,  117,   49,  114,   69,
       48,  113,   81,   49,   48,   69,  930,   49,   48,  119,
       53,   49,  118,   48,   48,  929,   49,   49,   81,   81,
      129,   48,  434,  130,   49,   48,  497,   48,   49,  123,
       49,   48,   48,   56,   49,   49,  120,  928,  121,   81,
       56,  100,   56,  102,   59,  122,  103,   56,  151,  125,
      926,  103,  124,  144,  140,   48,   56,  102,   49,   53,

      103,  622,  141,  938,   56,  102,  142,   56,  103,  938,
      143,   56,  102,   56,  100,  103,  924,   59,  922,  145,
       56,  102,   56,  102,  103,  919,  103,   56,  100,  152,
      192,   59,   91,  146,  301,  147,  166,  158,   91,  148,
      153,  154,   56,  100,   65,  367,   59,   66,  155,  916,
       56,  100,  145,  157,   59,  149,   56,  100,   65,  150,
       59,   66,  156,   56,  100,  363,  913,   59,   48,  163,
       48,   49,   48,   49,   48,   49,  907,   49,  161,  164,
      159,  165,   48,  160,   48,   49,   48,   49,  365,   49,
       48,  162,  904,   49,   48,   48,  114,   49,   49,  167,

       48,   48,   48,   49,   49,   49,  363,  491,  168,  172,
      170,   48,  938,  169,   49,  195,  196,   65,  173,  492,
       66,  171,   48,  197,  198,   49,   56,  100,   65,  365,
       59,   66,  180,  432,  363,  199,   56,  102,  174,  227,
      103,  496,   49,   56,  102,  175,  226,  103,  278,   56,
      102,   49,  200,  103,  176,  177,  218,  365,  201,  178,
      179,  203,   56,  102,   56,  102,  103,  903,  103,  220,
       56,  102,   56,  102,  103,  204,  103,  202,   56,  102,
       56,  102,  103,  902,  103,   56,  100,   56,  102,   59,
      155,  103,   56,  100,  363,   56,   59,  208,  205,   56,

      102,  896,  207,  103,   56,  100,   56,  100,   59,  495,
       59,  209,  146,  212,  147,   56,  100,  365,  148,   59,
      210,   65,  895,  206,   66,  211,  894,  214,   56,  100,
       48,  557,   59,   49,  149,  890,   48,   48,  150,   49,
       49,   48,  215,  216,   49,   48,  213,   48,   49,   48,
       49,   48,   49,  889,   49,  217,   48,   48,  938,   49,
       49,  222,   48,  219,  221,   49,  224,  938,  225,  888,
      228,   48,  229,  875,   49,   48,  223,  874,   49,  236,
      237,  236,  230,  873,  249,  231,  232,   91,  860,  233,
      242,  243,  242,  859,  248,   48,   91,   48,   49,  234,

       49,   48,   48,   48,   49,   49,   49,  281,   56,  100,
       49,  235,   59,   56,  102,  766,  938,  103,   56,  102,
       56,  102,  103,  255,  103,  858,  252,  857,   56,  102,
       65,  253,  103,   66,  260,   56,  102,  621,  365,  103,
      254,  256,   56,  102,  837,   91,  103,  258,  257,   56,
      102,  259,  938,  103,  275,   56,  102,  836,  261,  103,
       56,  102,   56,  102,  103,  835,  103,   56,  102,  834,
      262,  103,   56,  100,   56,  100,   59,  433,   59,   56,
      100,   91,  813,   59,  263,  265,  264,  267,   56,  100,
       56,  100,   59,  266,   59,   56,  100,   65,   65,   59,

       66,   66,  269,  268,   48,   48,  812,   49,   49,  270,
       48,   48,   48,   49,   49,   49,  273,  272,  271,   48,
      284,   48,   49,  809,   49,  274,  276,   48,   48,  808,
       49,   49,  277,   48,   48,  791,   49,   49,  279,  286,
      280,   48,   48,   48,   49,   49,   49,  285,  283,  282,
      236,  237,  236,  242,  243,  242,  290,   53,   48,  790,
      789,   49,  288,  292,   48,  788,   48,   49,  305,   49,
       48,  287,  289,   49,   56,  100,  291,  787,   59,   56,
      102,   56,  102,  103,  767,  103,  313,  314,  315,  307,
      765,  103,   65,   56,  102,   66,  306,  103,  333,  310,

       48,   66,  309,   49,  308,   48,   56,  102,   49,  311,
      103,   56,  102,  331,  312,  103,   56,  102,   56,  102,
      103,  316,  103,   56,  102,   56,  102,  103,  338,  103,
       56,  102,   56,  100,  103,  764,   59,   56,  325,   56,
      100,   59,  336,   59,  763,  317,  318,  322,  726,  321,
      680,  320,  722,  319,   56,  100,   56,  100,   59,  721,
       59,  716,  323,  328,   56,  100,  715,  324,   59,   65,
       48,  681,   66,   49,  326,   48,   48,  337,   49,   49,
       48,  680,   48,   49,  327,   49,   48,  677,   48,   49,
      329,   49,   48,  332,  676,   49,  334,  330,  675,  335,

       48,   48,  674,   49,   49,  339,   48,   48,   53,   49,
       49,  673,   48,  342,   53,   49,  351,  352,  351,  938,
      672,  341,  671,  343,   48,  344,  345,   49,  340,  346,
      353,  354,  353,  355,  356,  355,  357,  358,  357,  348,
      359,  360,  359,   48,   48,  938,   49,   49,   91,  347,
      369,  366,  136,  371,  372,  373,   48,  670,   49,   49,
       56,  100,   56,  102,   59,  623,  103,   56,  102,   56,
      102,  103,  374,  103,   91,  370,  619,  375,  556,  313,
      314,  315,  376,  378,  103,   56,  102,   56,  381,  103,
       65,  103,  363,   66,  618,  377,  313,  314,  315,   56,

      102,  103,  617,  103,   56,  102,  938,  616,  103,  380,
      146,  615,  147,  555,  379,  365,  148,  404,   56,  102,
       49,  382,  103,   56,  102,   56,  102,  103,  394,  103,
       56,  100,  149,  678,   59,   91,  150,  383,   56,  100,
       56,  100,   59,  384,   59,   56,  100,  387,  614,   59,
      613,  386,   56,  100,   56,  100,   59,  610,   59,   56,
      100,   65,  385,   59,   66,  388,   65,   48,  389,   66,
       49,   48,  609,  606,   49,  391,  392,  145,   48,  390,
       48,   49,  558,   49,  554,  393,  401,  402,  403,  553,
       48,   49,  396,   49,  398,  552,  397,  405,  406,  407,

      395,  551,   49,  399,  114,   48,   48,   48,   49,   49,
       49,   48,   48,  550,   49,   49,   48,   48,   65,   49,
       49,   66,  409,  549,  408,   48,  400,  548,   49,  410,
      411,  419,  420,  419,  351,  352,  351,  412,  353,  354,
      353,  547,  417,  355,  356,  355,  460,  415,  414,  413,
      546,  545,  416,  357,  358,  357,  359,  360,  359,  423,
      436,  424,  425,  544,   48,  426,  427,   49,  543,   48,
      428,  429,   49,  430,  498,  371,  372,  373,  494,  431,
       49,  371,  372,  373,  493,  437,   49,  438,  439,  440,
       56,  100,   49,  490,   59,   56,  102,   56,  102,  103,

      489,  103,   56,  102,   48,  488,  103,   49,  441,   56,
      102,   56,  102,  103,  487,  103,   56,  102,  363,  444,
      103,   53,   56,  102,   56,  102,  103,   65,  103,  442,
       66,  446,   56,  102,   56,  100,  103,  620,   59,  464,
      443,  365,  445,   56,  102,  486,  485,  103,  449,  452,
      484,  448,  483,  450,   65,  461,  146,   66,  147,   56,
      100,  451,  148,   59,   56,  100,   48,  482,   59,   49,
      447,  455,  453,   56,  100,   56,  100,   59,  149,   59,
       56,  100,  150,  462,   59,  465,   56,  100,   49,  454,
       59,  466,  467,  468,  435,  456,   49,  401,  402,  403,

      463,  457,   49,  401,  402,  403,   48,  469,   49,   49,
      405,  406,  407,  422,   48,   49,  459,   49,  421,  458,
      405,  406,  407,   48,   48,   49,   49,   49,   48,   48,
      418,   49,   49,   48,   48,   48,   49,   49,   49,  419,
      420,  419,   48,   53,   53,   49,  479,  480,  481,  473,
      368,   49,  471,  470,   48,   48,  350,   49,   49,  472,
       53,  349,  475,  478,  474,  304,  476,  477,  438,  439,
      440,  300,  299,   49,  438,  439,  440,   48,  298,   49,
       49,   56,  100,   56,  102,   59,  297,  103,  499,   56,
      102,  296,  295,  103,  500,  505,  506,  507,   65,  503,

      103,   66,  501,   56,  102,   56,  102,  103,  294,  103,
      502,   56,  102,  293,   53,  103,   56,  102,  251,  247,
      103,   56,  102,  504,  938,  103,  513,  514,  515,   56,
      102,  103,  246,  103,  532,  509,  526,   49,  508,   48,
      510,  511,   49,  512,   56,  100,   56,  100,   59,  725,
       59,   56,  519,   91,  245,   59,   56,  100,   56,  100,
       59,  244,   59,   56,  100,  241,  516,   59,   56,  100,
      240,  534,   59,  524,  439,  525,   65,  239,   66,   66,
      517,  518,   48,  238,  520,   49,  521,   48,   48,  530,
       49,   49,  466,  467,  468,  522,  194,   49,  466,  467,

      468,   48,  523,   49,   49,   48,  528,  190,   49,   48,
      527,   48,   49,   48,   49,   48,   49,   48,   49,   48,
       49,  529,   49,  479,  480,  481,   53,  189,   49,  479,
      480,  481,   48,   48,   49,   49,   49,  537,   53,  188,
      536,  541,  542,  541,  538,  535,   65,  187,  531,   66,
      533,  186,  539,   56,  102,  185,  540,  103,  560,  561,
      562,  563,  184,  183,   49,  564,  514,  565,  182,   53,
       59,  559,   56,  102,  587,  566,  103,  505,  506,  507,
       56,  102,  103,  181,  103,   56,  102,  139,  135,  103,
      570,  571,  572,   56,  102,  103,  134,  103,  567,  505,

      506,  507,   56,  102,  103,  568,  103,  513,  514,  515,
       56,  102,  103,  146,  103,  147,  133,   56,  100,  148,
      569,   59,   56,  100,  132,  131,   59,  579,  580,  128,
      573,  581,  575,   56,   94,  149,   56,  100,   48,  150,
       59,   49,  574,  513,  514,  515,   65,  577,  103,   66,
      576,   56,  100,   48,   80,   59,   49,  146,   80,  147,
       56,  100,  583,  148,   59,   88,  582,  585,   56,  100,
      588,   87,   59,  524,  439,  525,  590,   48,   66,  149,
       49,  584,   86,  150,  524,  439,  525,   85,   84,   66,
      586,  592,  593,  594,   48,   48,   49,   49,   49,   48,

      591,   80,   49,  589,  598,  599,  600,   48,   48,   49,
       49,   49,   48,   48,   48,   49,   49,   49,   56,  938,
      596,  541,  542,  541,  114,  607,  608,  607,  611,  612,
      611,   46,  595,  624,  597,  605,   49,  625,  626,  627,
       65,  601,   49,   66,   46,  603,   48,  602,   40,   49,
      604,  561,  562,  563,   40,  938,   49,  561,  562,  563,
      938,  938,   49,  564,  514,  565,  938,  938,   59,  564,
      514,  565,   56,  102,   59,  645,  103,  629,  630,  631,
       56,  102,  103,  656,  103,   56,  102,  938,  938,  103,
      570,  571,  572,   48,  938,  103,   49,   53,   65,   56,

      102,   66,  632,  103,   56,  102,  628,  938,  103,  145,
      633,  570,  571,  572,   56,  102,  103,  938,  103,   56,
      100,  634,  661,   59,  646,  146,  938,  147,  579,  580,
      938,  148,  581,  635,   56,  100,  579,  580,   59,  938,
      581,  579,  639,   48,  938,  581,   49,  149,  579,  580,
       48,  150,  581,   49,  636,  637,   56,  100,   56,  100,
       59,  638,   59,  641,   56,  100,   56,  100,   59,  938,
       59,  649,  650,  651,  640,  582,   49,  938,  647,  592,
      593,  594,   48,   65,   49,   49,   66,  643,  938,  648,
      592,  593,  594,  642,  644,   49,  653,  654,  655,   48,

      938,   49,   49,  598,  599,  600,  938,  652,   49,  598,
      599,  600,  938,  938,   49,  657,  658,  659,  702,  938,
       49,  662,  663,  664,  938,   48,   49,  660,   49,  938,
       53,  666,  667,  666,  607,  608,  607,  668,  669,  668,
      611,  612,  611,   48,   56,  102,   49,  938,  103,   53,
      625,  626,  627,   56,  102,   49,  938,  103,  665,  625,
      626,  627,   65,  938,   49,   66,  629,  630,  631,  938,
      683,  103,   48,  938,  938,   49,   56,  102,   56,  102,
      103,  682,  103,  687,  688,  689,   56,  102,  103,  784,
      103,  684,   49,   56,  100,   48,  938,   59,   49,   53,

      629,  630,  631,  685,  701,  103,   56,  100,  579,  580,
       59,  705,  581,  938,  146,  690,  147,  938,  686,  938,
      148,  691,  579,  580,  938,  938,  581,   56,  100,  703,
      938,   59,  693,  696,  697,  698,  149,  938,   59,  938,
      150,  938,  692,   48,   56,  100,   49,  582,   59,  938,
      695,   56,  100,  938,  938,   59,  649,  650,  651,  938,
      938,   49,  694,  649,  650,  651,   48,  938,   49,   49,
      699,  653,  654,  655,  938,   48,   49,  700,   49,  938,
      704,  653,  654,  655,  938,  938,   49,  706,  707,  708,
      938,  727,   49,  657,  658,  659,  938,  938,   49,  657,

      658,  659,  938,   53,   49,  709,  710,  711,  938,  938,
       49,  662,  663,  664,  712,  938,   49,  662,  663,  664,
       48,   53,   49,   49,  666,  667,  666,  668,  669,  668,
      717,  718,  717,  719,  720,  719,  723,  724,  723,   53,
      728,  729,  730,   56,  102,  103,  938,  103,   56,  102,
       56,  102,  103,   48,  103,  938,   49,   53,  713,  687,
      688,  689,  938,  938,  103,  734,  735,  736,  731,  938,
      103,  738,  739,   56,  100,  740,  938,   59,   65,  733,
       48,   66,  785,   49,  732,  687,  688,  689,  579,  580,
      103,  938,  581,  579,  580,   48,  938,  581,   49,  146,

      938,  147,   56,  100,   65,  148,   59,   66,  741,  696,
      697,  698,  751,  938,   59,  696,  697,  698,  743,  752,
       59,  149,   56,  100,   48,  150,   59,   49,  744,  782,
      742,   56,  100,   48,  768,   59,   49,  938,  746,  747,
      748,  749,  938,  938,   66,  753,  706,  707,  708,  938,
      745,   49,  761,  762,  761,  145,  938,  198,  938,  754,
      706,  707,  708,  938,  938,   49,  709,  710,  711,  750,
      938,   49,  709,  710,  711,  938,  938,   49,  755,  756,
      757,  938,  938,   49,  758,  759,  760,  938,  938,   49,
      717,  718,  717,  719,  720,  719,  723,  724,  723,  938,

       53,  728,  729,  730,   56,  769,  103,   65,  103,  938,
       66,  938,   53,  728,  729,  730,   56,  102,  103,  938,
      103,  771,  772,  773,  738,  739,  103,  146,  740,  147,
      734,  735,  736,  148,  938,  103,  738,  739,  738,  775,
      740,  938,  740,   56,  100,   48,  783,   59,   49,  149,
      938,  770,  938,  150,  734,  735,  736,  579,  580,  103,
      938,  581,  579,  580,  804,  938,  581,   66,  146,  938,
      147,  938,   56,  100,  148,  774,   59,   56,  100,   48,
      786,   59,   49,  776,  778,   56,  100,  738,  739,   59,
      149,  740,  777,  938,  150,  938,  747,  748,  749,  831,

      779,   66,   49,  938,  747,  748,  749,  780,  781,   66,
      755,  756,  757,  795,  814,   49,  755,  756,  757,  938,
      938,   49,  758,  759,  760,  938,  938,   49,  758,  759,
      760,  938,  938,   49,  761,  762,  761,   48,   56,  102,
       49,  938,  103,  938,  114,  771,  772,  773,  738,  739,
      103,  938,  740,   56,  797,  938,   53,   59,  579,  798,
      938,  198,  581,  792,   65,  938,  938,   66,   53,   56,
      102,   48,  796,  103,   49,  938,  579,  580,  794,  938,
      581,  938,  146,   48,  147,  938,   49,  774,  148,   56,
      100,   56,  100,   59,   48,   59,  793,   49,   56,  100,

      852,  938,   59,   66,  149,  806,  938,  803,  150,  771,
      772,  773,  938,  805,  103,  799,  938,  807,  938,  800,
      810,  811,  810,  146,  802,  147,  801,   56,  102,  148,
      938,  103,   53,   56,  816,  738,  739,  103,  938,  740,
      738,  739,   56,  100,  740,  149,   59,  579,  580,  150,
      938,  581,   56,  100,  579,  580,   59,  938,  581,  823,
      824,  825,  819,  815,   59,   56,  100,   48,  938,   59,
       49,  827,  828,  829,  820,  817,   66,   65,  938,  938,
       66,  145,  818,  821,  938,   48,  582,  822,   49,  810,
      811,  810,   48,  826,  938,   49,  830,   56,  102,   48,

      938,  103,   49,  738,  739,  938,  832,  740,  738,  739,
       56,  843,  740,  938,   59,  114,  938,  579,  580,  938,
       48,  581,  938,   49,  833,  938,  838,   48,  841,  938,
       49,  938,  839,   56,  102,  938,  938,  103,  861,  845,
      846,  847,  938,  842,  581,  938,  146,  844,  147,  848,
      849,  850,  148,  840,   59,  823,  824,  825,   53,  938,
       59,  823,  824,  825,  938,  853,   59,  938,  149,   56,
      100,  938,  150,   59,  827,  828,  829,  938,  938,   66,
      827,  828,  829,  938,  938,   66,  854,  855,  856,   56,
      102,   49,  938,  103,   56,  863,  738,  739,  103,  851,

      740,  145,  738,  865,   56,  100,  740,  938,   59,  579,
      580,  938,  938,  581,  845,  846,  847,  938,  864,  581,
      114,  845,  846,  847,   56,  100,  581,  938,   59,  862,
      848,  849,  850,  938,  938,   59,  848,  849,  850,   65,
      938,   59,   66,  145,  866,  868,  869,  870,  938,  938,
       49,  854,  855,  856,  738,  739,   49,  938,  740,  867,
      938,  582,  854,  855,  856,  938,  938,   49,  871,  872,
      871,  938,  938,  876,  877,  878,  145,  114,   49,  879,
      880,  881,  738,  739,  103,  938,  740,  579,  580,  938,
      938,  581,  938,  882,  885,  886,  887,  738,  739,   59,

      938,  740,   53,   56,  102,  938,  938,  103,  938,  883,
      938,  938,  884,  871,  872,  871,  146,  938,  147,  938,
      938,  774,  148,  868,  869,  870,  891,  938,   49,  868,
      869,  870,  938,  938,   49,  876,  877,  878,  149,  938,
       49,  938,  150,  876,  877,  878,  938,  938,   49,  879,
      880,  881,  738,  739,  103,  938,  740,  885,  886,  887,
      579,  580,   59,  938,  581,  885,  886,  887,  938,   53,
       59,  897,  898,  899,  738,  739,  740,  938,  740,  909,
      910,  909,  892,   53,  879,  880,  881,  893,  938,  103,
      579,  580,  738,  739,  581,  938,  740,  938,  146,  938,

      147,  897,  898,  899,  148,  145,  740,  938,  938,  900,
      897,  898,  899,  938,  938,  740,  938,  905,  579,  580,
      149,  938,  581,  938,  150,  938,  901,  738,  739,  579,
      580,  740,  938,  581,  909,  910,  909,  909,  910,  909,
      738,  739,  579,  915,  740,  938,  581,  738,  739,  938,
      774,  740,  938,  906,  911,  579,  580,  738,  739,  581,
      938,  740,  579,  921,  738,  923,  581,  938,  740,  912,
      579,  580,  938,  938,  581,  918,  914,  738,  927,  738,
      739,  740,  917,  740,  738,  739,  938,  938,  740,  936,
      937,  936,  938,  938,  582,  938,  938,  920,  938,  925,

      936,  937,  936,  938,  938,  938,  938,  938,  938,  582,
      938,  938,  938,  938,  938,  938,  938,  938,  774,  938,
      938,  938,  938,  774,   14,   14,   14,   14,   14,   27,
       27,   27,   27,   27,   15,   15,   15,   15,   15,   41,
       41,   41,   41,   41,   45,   45,   45,   45,   45,   47,
      938,   47,   47,   47,   55,   55,   55,   55,   55,   64,
      938,   64,   64,   64,   79,   79,   79,   79,   79,   90,
      938,   90,  101,  101,  101,  101,  101,  364,  364,  578,
      578,  578,  578,  578,  679,  679,  679,  679,  679,  714,
      938,  714,  714,  714,  737,  737,  737,  737,  737,  908,

      908,  908,  908,  908,   13,  938,  938,  938,  938,  938,
      938,  938,  938,  938,  938,  938,  938,  938,  938,  938,
      938,  938,  938,  938,  938,  938,  938,  938,  938,  938,
      938,  938,  938,  938,  938,  938,  938,  938,  938,  938,
      938,  938,  938,  938,  938,  938,  938,  938,  938,  938,
      938,  938,  938,  938,  938,  938
    } ;

static yyconst short int yy_chk[3157] =
    {   0,
        0,    0,    1,    1,    1,    1,    1,    1,    1,    5,
       90,    6,    5,    5,    6,    6,    9,   14,   10,    0,
       14,    9,    9,   10,   10,    1,  193,    0,   18,   16,
        1,   18,   16,   19,    0,   22,   19,    1,   22,   90,
        1,    1,    2,    2,    2,    2,    2,    2,    2,   16,
       20,  193,   31,   20,   21,   20,   22,   21,   21,   21,
       31,   23,   91,   16,   23,    2,   16,   16,   16,   24,
        2,   25,   24,   40,   25,   40,  138,    2,   82,   21,
        2,    2,    3,  934,   82,    3,    3,   26,   30,   30,
       26,   91,   37,   93,   24,   91,   25,   47,   23,   23,

       47,   39,   39,  933,    3,   93,    3,    3,   26,   30,
       26,  138,   26,    3,    3,   26,   44,   44,  136,    3,
        4,   37,   39,    4,    4,  249,   48,   49,   37,   48,
       49,   50,   51,   52,   50,   51,   52,   44,   53,  136,
      932,   53,    4,   54,    4,    4,   54,  136,  300,   55,
       55,    4,    4,   55,  249,  931,   92,    4,   17,   17,
       17,  300,   17,   53,   48,   57,   57,   64,   52,   57,
       64,   51,   58,   58,   59,   59,   58,   17,   59,  250,
       54,   58,   17,   60,   60,   92,  301,   60,   17,   57,
       92,   57,   57,   61,   61,   17,  250,   61,   62,   62,

       65,  930,   62,   65,   57,   60,   63,   63,   66,  301,
       63,   66,   67,   70,   68,   67,   70,   68,   68,   68,
       69,   80,   80,   69,   69,   69,  367,   71,   72,   61,
       71,   72,   62,  434,   73,   67,   70,   73,   65,   68,
       74,   63,   80,   74,   75,   69,  929,   75,   76,   72,
       67,   76,   71,   77,   78,  928,   77,   78,   81,   81,
       84,   95,  367,   84,   95,   96,  434,   97,   96,   76,
       97,   98,   99,  557,   98,   99,   73,  926,   74,   81,
      100,  100,  101,  101,  100,   75,  101,  103,  103,   78,
      924,  103,   77,   99,   95,  116,  104,  104,  116,   95,

      104,  557,   96,  137,  105,  105,   97,  303,  105,  248,
       98,  106,  106,  109,  109,  106,  922,  109,  919,  100,
      102,  102,  107,  107,  102,  916,  107,  108,  108,  104,
      137,  108,  137,  102,  248,  102,  116,  109,  248,  102,
      105,  106,  110,  110,  114,  303,  110,  114,  107,  913,
      111,  111,  109,  108,  111,  102,  112,  112,  115,  102,
      112,  115,  107,  113,  113,  364,  907,  113,  117,  114,
      118,  117,  119,  118,  120,  119,  902,  120,  112,  115,
      110,  115,  121,  111,  122,  121,  123,  122,  364,  123,
      125,  113,  896,  125,  140,  141,  115,  140,  141,  117,

      143,  144,  142,  143,  144,  142,  365,  429,  118,  122,
      120,  171,  433,  119,  171,  140,  141,  163,  123,  429,
      163,  121,  124,  142,  143,  124,  145,  145,  165,  365,
      145,  165,  125,  365,  620,  144,  146,  146,  124,  172,
      146,  433,  172,  147,  147,  124,  171,  147,  221,  148,
      148,  221,  145,  148,  124,  124,  163,  620,  146,  124,
      124,  147,  149,  149,  150,  150,  149,  895,  150,  165,
      153,  153,  152,  152,  153,  148,  152,  146,  154,  154,
      155,  155,  154,  894,  155,  157,  157,  156,  156,  157,
      150,  156,  159,  159,  432,  497,  159,  153,  149,  151,

      151,  890,  152,  151,  158,  158,  160,  160,  158,  432,
      160,  154,  151,  157,  151,  161,  161,  432,  151,  161,
      155,  164,  889,  151,  164,  156,  888,  159,  162,  162,
      166,  497,  162,  166,  151,  875,  167,  168,  151,  167,
      168,  169,  160,  161,  169,  173,  158,  170,  173,  175,
      170,  174,  175,  874,  174,  162,  176,  177,  192,  176,
      177,  167,  178,  164,  166,  178,  169,  191,  170,  873,
      173,  179,  174,  860,  179,  180,  168,  859,  180,  181,
      181,  181,  175,  858,  192,  176,  177,  192,  837,  178,
      186,  186,  186,  836,  191,  195,  191,  196,  195,  179,

      196,  197,  198,  199,  197,  198,  199,  224,  200,  200,
      224,  180,  200,  201,  201,  725,  556,  201,  202,  202,
      203,  203,  202,  198,  203,  835,  195,  834,  204,  204,
      218,  196,  204,  218,  203,  205,  205,  556,  725,  205,
      197,  199,  206,  206,  813,  556,  206,  201,  200,  207,
      207,  202,  366,  207,  218,  208,  208,  812,  204,  208,
      209,  209,  210,  210,  209,  809,  210,  211,  211,  808,
      205,  211,  212,  212,  213,  213,  212,  366,  213,  215,
      215,  366,  791,  215,  206,  208,  207,  210,  214,  214,
      216,  216,  214,  209,  216,  217,  217,  219,  220,  217,

      219,  220,  212,  211,  222,  223,  790,  222,  223,  213,
      225,  226,  229,  225,  226,  229,  216,  215,  214,  227,
      227,  228,  227,  788,  228,  217,  219,  230,  231,  787,
      230,  231,  220,  232,  233,  767,  232,  233,  222,  229,
      223,  234,  235,  252,  234,  235,  252,  228,  226,  225,
      236,  236,  236,  242,  242,  242,  233,  227,  253,  766,
      765,  253,  231,  235,  254,  764,  255,  254,  252,  255,
      256,  230,  232,  256,  257,  257,  234,  763,  257,  258,
      258,  259,  259,  258,  726,  259,  260,  260,  260,  254,
      722,  260,  275,  261,  261,  275,  253,  261,  277,  257,

      282,  277,  256,  282,  255,  280,  262,  262,  280,  258,
      262,  263,  263,  275,  259,  263,  264,  264,  265,  265,
      264,  261,  265,  266,  266,  267,  267,  266,  282,  267,
      268,  268,  269,  269,  268,  721,  269,  270,  270,  271,
      271,  270,  280,  271,  716,  262,  263,  267,  681,  266,
      679,  265,  676,  264,  272,  272,  273,  273,  272,  675,
      273,  672,  268,  273,  274,  274,  671,  269,  274,  276,
      278,  623,  276,  278,  271,  279,  281,  281,  279,  281,
      283,  622,  284,  283,  272,  284,  285,  619,  286,  285,
      273,  286,  287,  276,  618,  287,  278,  274,  617,  279,

      288,  289,  616,  288,  289,  283,  290,  291,  278,  290,
      291,  615,  292,  286,  281,  292,  295,  295,  295,  302,
      614,  285,  613,  287,  305,  288,  289,  305,  284,  290,
      296,  296,  296,  297,  297,  297,  298,  298,  298,  292,
      299,  299,  299,  306,  308,  496,  306,  308,  302,  291,
      305,  302,  302,  307,  307,  307,  309,  610,  307,  309,
      310,  310,  311,  311,  310,  558,  311,  312,  312,  317,
      317,  312,  308,  317,  496,  306,  554,  309,  496,  313,
      313,  313,  310,  312,  313,  316,  316,  318,  318,  316,
      331,  318,  495,  331,  553,  311,  315,  315,  315,  319,

      319,  315,  552,  319,  320,  320,  621,  551,  320,  317,
      315,  550,  315,  495,  316,  495,  315,  339,  321,  321,
      339,  319,  321,  322,  322,  323,  323,  322,  331,  323,
      324,  324,  315,  621,  324,  621,  315,  320,  325,  325,
      326,  326,  325,  321,  326,  327,  327,  324,  549,  327,
      548,  323,  328,  328,  329,  329,  328,  546,  329,  330,
      330,  332,  322,  330,  332,  325,  333,  334,  326,  333,
      334,  335,  545,  543,  335,  328,  329,  325,  336,  327,
      337,  336,  498,  337,  494,  330,  338,  338,  338,  493,
      341,  338,  333,  341,  335,  492,  334,  340,  340,  340,

      332,  491,  340,  336,  333,  342,  343,  344,  342,  343,
      344,  345,  346,  490,  345,  346,  347,  348,  394,  347,
      348,  394,  342,  489,  341,  369,  337,  488,  369,  343,
      344,  350,  350,  350,  351,  351,  351,  344,  353,  353,
      353,  487,  348,  355,  355,  355,  394,  346,  345,  344,
      486,  485,  347,  357,  357,  357,  359,  359,  359,  363,
      369,  363,  363,  484,  370,  363,  363,  370,  483,  375,
      363,  363,  375,  363,  435,  371,  371,  371,  431,  363,
      371,  373,  373,  373,  430,  370,  373,  374,  374,  374,
      376,  376,  374,  428,  376,  377,  377,  378,  378,  377,

      427,  378,  379,  379,  398,  426,  379,  398,  375,  380,
      380,  382,  382,  380,  425,  382,  384,  384,  555,  378,
      384,  373,  383,  383,  386,  386,  383,  395,  386,  376,
      395,  380,  385,  385,  387,  387,  385,  555,  387,  398,
      377,  555,  379,  381,  381,  424,  423,  381,  383,  386,
      422,  382,  421,  384,  396,  395,  381,  396,  381,  388,
      388,  385,  381,  388,  389,  389,  397,  418,  389,  397,
      381,  389,  387,  390,  390,  391,  391,  390,  381,  391,
      392,  392,  381,  396,  392,  399,  393,  393,  399,  388,
      393,  400,  400,  400,  368,  390,  400,  401,  401,  401,

      397,  391,  401,  403,  403,  403,  404,  404,  403,  404,
      405,  405,  405,  362,  408,  405,  393,  408,  361,  392,
      407,  407,  407,  409,  410,  407,  409,  410,  411,  412,
      349,  411,  412,  413,  414,  415,  413,  414,  415,  419,
      419,  419,  416,  403,  404,  416,  417,  417,  417,  411,
      304,  417,  409,  408,  436,  437,  294,  436,  437,  410,
      407,  293,  413,  416,  412,  251,  414,  415,  438,  438,
      438,  247,  246,  438,  440,  440,  440,  441,  245,  440,
      441,  442,  442,  443,  443,  442,  244,  443,  436,  444,
      444,  241,  240,  444,  437,  445,  445,  445,  461,  443,

      445,  461,  441,  446,  446,  447,  447,  446,  239,  447,
      442,  448,  448,  238,  440,  448,  449,  449,  194,  190,
      449,  450,  450,  444,  678,  450,  451,  451,  451,  452,
      452,  451,  189,  452,  470,  447,  461,  470,  446,  472,
      448,  449,  472,  450,  453,  453,  454,  454,  453,  678,
      454,  455,  455,  678,  188,  455,  456,  456,  457,  457,
      456,  187,  457,  458,  458,  185,  452,  458,  459,  459,
      184,  472,  459,  460,  460,  460,  462,  183,  460,  462,
      453,  454,  463,  182,  456,  463,  457,  464,  465,  465,
      464,  465,  466,  466,  466,  458,  139,  466,  468,  468,

      468,  469,  459,  468,  469,  471,  463,  135,  471,  473,
      462,  474,  473,  475,  474,  476,  475,  477,  476,  478,
      477,  464,  478,  479,  479,  479,  465,  134,  479,  481,
      481,  481,  499,  500,  481,  499,  500,  475,  468,  133,
      474,  482,  482,  482,  476,  473,  526,  132,  469,  526,
      471,  131,  477,  503,  503,  130,  478,  503,  500,  501,
      501,  501,  129,  128,  501,  502,  502,  502,  127,  481,
      502,  499,  504,  504,  526,  503,  504,  505,  505,  505,
      508,  508,  505,  126,  508,  509,  509,   94,   89,  509,
      510,  510,  510,  511,  511,  510,   88,  511,  504,  507,

      507,  507,  512,  512,  507,  508,  512,  513,  513,  513,
      516,  516,  513,  507,  516,  507,   87,  517,  517,  507,
      509,  517,  518,  518,   86,   85,  518,  519,  519,   83,
      511,  519,  516,   79,   46,  507,  520,  520,  529,  507,
      520,  529,  512,  515,  515,  515,  527,  518,  515,  527,
      517,  521,  521,  530,   43,  521,  530,  515,   38,  515,
      522,  522,  520,  515,  522,   36,  519,  522,  523,  523,
      527,   35,  523,  524,  524,  524,  529,  528,  524,  515,
      528,  521,   34,  515,  525,  525,  525,   33,   32,  525,
      523,  531,  531,  531,  532,  533,  531,  532,  533,  534,

      530,   29,  534,  528,  535,  535,  535,  536,  537,  535,
      536,  537,  538,  539,  540,  538,  539,  540,   28,   13,
      533,  541,  541,  541,  525,  544,  544,  544,  547,  547,
      547,   12,  532,  559,  534,  540,  559,  560,  560,  560,
      587,  536,  560,  587,   11,  538,  597,  537,    8,  597,
      539,  561,  561,  561,    7,    0,  561,  563,  563,  563,
        0,    0,  563,  564,  564,  564,    0,    0,  564,  565,
      565,  565,  566,  566,  565,  587,  566,  567,  567,  567,
      568,  568,  567,  597,  568,  569,  569,    0,    0,  569,
      570,  570,  570,  603,    0,  570,  603,  563,  588,  573,

      573,  588,  568,  573,  574,  574,  566,    0,  574,  565,
      569,  572,  572,  572,  575,  575,  572,    0,  575,  576,
      576,  573,  603,  576,  588,  572,    0,  572,  578,  578,
        0,  572,  578,  574,  577,  577,  580,  580,  577,    0,
      580,  581,  581,  589,    0,  581,  589,  572,  582,  582,
      590,  572,  582,  590,  575,  576,  583,  583,  584,  584,
      583,  577,  584,  583,  585,  585,  586,  586,  585,    0,
      586,  591,  591,  591,  582,  580,  591,    0,  589,  592,
      592,  592,  595,  646,  592,  595,  646,  585,    0,  590,
      594,  594,  594,  584,  586,  594,  596,  596,  596,  602,

        0,  596,  602,  598,  598,  598,    0,  595,  598,  600,
      600,  600,    0,    0,  600,  601,  601,  601,  646,    0,
      601,  604,  604,  604,    0,  605,  604,  602,  605,    0,
      594,  606,  606,  606,  607,  607,  607,  609,  609,  609,
      611,  611,  611,  624,  628,  628,  624,    0,  628,  600,
      625,  625,  625,  632,  632,  625,    0,  632,  605,  627,
      627,  627,  645,    0,  627,  645,  629,  629,  629,    0,
      628,  629,  652,    0,    0,  652,  633,  633,  634,  634,
      633,  624,  634,  635,  635,  635,  636,  636,  635,  752,
      636,  632,  752,  637,  637,  647,    0,  637,  647,  627,

      631,  631,  631,  633,  645,  631,  638,  638,  639,  639,
      638,  652,  639,    0,  631,  636,  631,    0,  634,    0,
      631,  637,  640,  640,    0,    0,  640,  641,  641,  647,
        0,  641,  639,  642,  642,  642,  631,    0,  642,    0,
      631,    0,  638,  648,  643,  643,  648,  639,  643,    0,
      641,  644,  644,    0,    0,  644,  649,  649,  649,    0,
        0,  649,  640,  651,  651,  651,  682,    0,  651,  682,
      643,  653,  653,  653,    0,  661,  653,  644,  661,    0,
      648,  655,  655,  655,    0,    0,  655,  656,  656,  656,
        0,  682,  656,  657,  657,  657,    0,    0,  657,  659,

      659,  659,    0,  651,  659,  660,  660,  660,    0,    0,
      660,  662,  662,  662,  661,    0,  662,  664,  664,  664,
      665,  655,  664,  665,  666,  666,  666,  668,  668,  668,
      673,  673,  673,  674,  674,  674,  677,  677,  677,  659,
      683,  683,  683,  684,  684,  683,    0,  684,  685,  685,
      686,  686,  685,  753,  686,    0,  753,  664,  665,  687,
      687,  687,    0,    0,  687,  690,  690,  690,  684,    0,
      690,  691,  691,  692,  692,  691,    0,  692,  702,  686,
      703,  702,  753,  703,  685,  689,  689,  689,  693,  693,
      689,    0,  693,  694,  694,  727,    0,  694,  727,  689,

        0,  689,  695,  695,  750,  689,  695,  750,  692,  696,
      696,  696,  702,    0,  696,  698,  698,  698,  694,  703,
      698,  689,  699,  699,  704,  689,  699,  704,  695,  750,
      693,  700,  700,  705,  727,  700,  705,    0,  700,  701,
      701,  701,    0,    0,  701,  704,  706,  706,  706,    0,
      699,  706,  715,  715,  715,  698,    0,  705,    0,  705,
      708,  708,  708,    0,    0,  708,  709,  709,  709,  701,
        0,  709,  711,  711,  711,    0,    0,  711,  712,  712,
      712,    0,    0,  712,  713,  713,  713,    0,    0,  713,
      717,  717,  717,  719,  719,  719,  723,  723,  723,    0,

      708,  728,  728,  728,  731,  731,  728,  751,  731,    0,
      751,    0,  711,  730,  730,  730,  732,  732,  730,    0,
      732,  733,  733,  733,  737,  737,  733,  730,  737,  730,
      734,  734,  734,  730,    0,  734,  739,  739,  740,  740,
      739,    0,  740,  741,  741,  754,  751,  741,  754,  730,
        0,  732,    0,  730,  736,  736,  736,  742,  742,  736,
        0,  742,  743,  743,  783,    0,  743,  783,  736,    0,
      736,    0,  744,  744,  736,  739,  744,  745,  745,  792,
      754,  745,  792,  741,  743,  746,  746,  774,  774,  746,
      736,  774,  742,    0,  736,    0,  747,  747,  747,  805,

      744,  747,  805,    0,  749,  749,  749,  745,  746,  749,
      755,  755,  755,  774,  792,  755,  757,  757,  757,    0,
        0,  757,  758,  758,  758,    0,    0,  758,  760,  760,
      760,    0,    0,  760,  761,  761,  761,  768,  770,  770,
      768,    0,  770,    0,  749,  771,  771,  771,  775,  775,
      771,    0,  775,  776,  776,    0,  757,  776,  777,  777,
        0,  768,  777,  768,  782,    0,    0,  782,  760,  769,
      769,  785,  775,  769,  785,    0,  778,  778,  770,    0,
      778,    0,  769,  786,  769,    0,  786,  775,  769,  779,
      779,  780,  780,  779,  784,  780,  769,  784,  781,  781,

      830,    0,  781,  830,  769,  785,    0,  782,  769,  773,
      773,  773,    0,  784,  773,  778,    0,  786,    0,  779,
      789,  789,  789,  773,  781,  773,  780,  793,  793,  773,
        0,  793,  784,  794,  794,  795,  795,  794,    0,  795,
      796,  796,  797,  797,  796,  773,  797,  798,  798,  773,
        0,  798,  800,  800,  799,  799,  800,    0,  799,  801,
      801,  801,  797,  793,  801,  802,  802,  806,    0,  802,
      806,  803,  803,  803,  798,  795,  803,  804,    0,    0,
      804,  797,  796,  799,    0,  807,  798,  800,  807,  810,
      810,  810,  814,  802,    0,  814,  804,  815,  815,  838,

        0,  815,  838,  817,  817,    0,  806,  817,  818,  818,
      819,  819,  818,    0,  819,  804,    0,  820,  820,    0,
      831,  820,    0,  831,  807,    0,  814,  832,  817,    0,
      832,    0,  815,  816,  816,    0,    0,  816,  838,  821,
      821,  821,    0,  818,  821,    0,  816,  820,  816,  822,
      822,  822,  816,  816,  822,  823,  823,  823,  831,    0,
      823,  825,  825,  825,    0,  832,  825,    0,  816,  826,
      826,    0,  816,  826,  827,  827,  827,    0,    0,  827,
      829,  829,  829,    0,    0,  829,  833,  833,  833,  839,
      839,  833,    0,  839,  840,  840,  841,  841,  840,  826,

      841,  825,  842,  842,  843,  843,  842,    0,  843,  844,
      844,    0,    0,  844,  845,  845,  845,    0,  841,  845,
      829,  847,  847,  847,  851,  851,  847,    0,  851,  839,
      848,  848,  848,    0,    0,  848,  850,  850,  850,  852,
        0,  850,  852,  843,  844,  853,  853,  853,    0,    0,
      853,  854,  854,  854,  864,  864,  854,    0,  864,  851,
        0,  847,  856,  856,  856,    0,    0,  856,  857,  857,
      857,    0,    0,  861,  861,  861,  850,  852,  861,  862,
      862,  862,  865,  865,  862,    0,  865,  866,  866,    0,
        0,  866,    0,  864,  867,  867,  867,  882,  882,  867,

        0,  882,  856,  863,  863,    0,    0,  863,    0,  865,
        0,    0,  866,  871,  871,  871,  863,    0,  863,    0,
        0,  865,  863,  868,  868,  868,  882,    0,  868,  870,
      870,  870,    0,    0,  870,  876,  876,  876,  863,    0,
      876,    0,  863,  878,  878,  878,    0,    0,  878,  879,
      879,  879,  883,  883,  879,    0,  883,  885,  885,  885,
      884,  884,  885,    0,  884,  887,  887,  887,    0,  870,
      887,  891,  891,  891,  892,  892,  891,    0,  892,  903,
      903,  903,  883,  878,  881,  881,  881,  884,    0,  881,
      893,  893,  900,  900,  893,    0,  900,    0,  881,    0,

      881,  897,  897,  897,  881,  887,  897,    0,    0,  892,
      899,  899,  899,    0,    0,  899,    0,  900,  901,  901,
      881,    0,  901,    0,  881,    0,  893,  905,  905,  906,
      906,  905,    0,  906,  908,  908,  908,  909,  909,  909,
      911,  911,  912,  912,  911,    0,  912,  914,  914,    0,
      899,  914,    0,  901,  905,  915,  915,  917,  917,  915,
        0,  917,  918,  918,  920,  920,  918,    0,  920,  906,
      921,  921,    0,    0,  921,  915,  911,  925,  925,  923,
      923,  925,  914,  923,  927,  927,    0,    0,  927,  935,
      935,  935,    0,    0,  915,    0,    0,  917,    0,  923,

      936,  936,  936,    0,    0,    0,    0,    0,    0,  921,
        0,    0,    0,    0,    0,    0,    0,    0,  923,    0,
        0,    0,    0,  927,  939,  939,  939,  939,  939,  940,
      940,  940,  940,  940,  941,  941,  941,  941,  941,  942,
      942,  942,  942,  942,  943,  943,  943,  943,  943,  944,
        0,  944,  944,  944,  945,  945,  945,  945,  945,  946,
        0,  946,  946,  946,  947,  947,  947,  947,  947,  948,
        0,  948,  949,  949,  949,  949,  949,  950,  950,  951,
      951,  951,  951,  951,  952,  952,  952,  952,  952,  953,
        0,  953,  953,  953,  954,  954,  954,  954,  954,  955,

      955,  955,  955,  955,  938,  938,  938,  938,  938,  938,
      938,  938,  938,  938,  938,  938,  938,  938,  938,  938,
      938,  938,  938,  938,  938,  938,  938,  938,  938,  938,
      938,  938,  938,  938,  938,  938,  938,  938,  938,  938,
      938,  938,  938,  938,  938,  938,  938,  938,  938,  938,
      938,  938,  938,  938,  938,  938
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#define INITIAL 0
//debug static int DC = 0; 
/*
   makeedit.l : This file is part of pstoedit
   Simple parser to parse the intermediate flat PostScript and call the backend
   output routines.

   Copyright (C) 1993 - 2001 Wolfgang Glunz, wglunz@pstoedit.net

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

*/
#include "cppcomp.h"
#include I_iostream
#include I_fstream

#include I_string_h

#include <math.h>

USESTD

#include "psfront.h"
#include "miscutil.h"

static float  origx, origy;
static char   *start_of_text;
static char   *end_of_text;
static float  number;

#define YY_SKIP_YYWRAP
static int yywrap() { return 1;}

static inline int toInt(const float f) { 
	return (f > 0.0f) ? (int)(f+0.5f) : (int)(f-0.5f);
};



static inline float minf(float f1, float f2) { return (f1<f2) ? f1:f2; }
static const int debuglexer = 0;

#define YY_NEVER_INTERACTIVE 1
// to avoid usage of isatty

#define YY_NO_UNPUT
// to avoid compiler warning

// define YY_DECL int yylex YY_PROTO(( *outputdriver ))
#define YY_DECL int PSFrontEnd::yylex()

#define CHECKconstraints if (!constraintsChecked) { errf << "input file did not contain a backendconstraints directive. Cannot proceed. " << endl; return 1; }

//lint -esym(773, BEGIN)
// Expression-like macro 'BEGIN' not parenthe sized

#define READPATH 1

#define READIMAGE 2

#define READPROLOG 3

#define READBBOXNUMBERS 4

#define READBBOX 5


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;



	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 939 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3105 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{ 
	// not in READPROLOG !!
// Work around for Linux libg++ bug
			 number = (float) atof(yytext);
// Original
//			 istrstream s(yytext);
//			 s >> number;

//cout << "adding number : " << number << endl;
			 
			 addNumber(number );
			}
	YY_BREAK
case 2:
YY_RULE_SETUP
{}
	YY_BREAK
case 3:
YY_RULE_SETUP
{ BEGIN(READBBOXNUMBERS); }
	YY_BREAK
case 4:
YY_RULE_SETUP
{ 
	const float ury = popUnScaled(); 
	const float urx = popUnScaled(); 
	bboxes_ptr[currentPageNumber].ur = Point(urx,ury);	
	
	const float lly = popUnScaled(); 
	const float llx = popUnScaled();
	bboxes_ptr[currentPageNumber].ll = Point(llx,lly);

//	cerr << llx <<  " " << lly <<  " " << urx <<  " " << ury << endl;
	currentPageNumber++;
	BEGIN(READBBOX);
}
	YY_BREAK
case 5:
YY_RULE_SETUP
{ }
	YY_BREAK
case 6:
YY_RULE_SETUP
{ 
//	cout << " <READBBOXNUMBERS> " << yytext << endl;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
{
			const int flattened = toInt(popUnScaled());
			const int textastext = toInt(popUnScaled());
			if (!driverDesc->backendSupportsText    && textastext) {
				errf << "Warning: this preprocessed input file contains text but the selected backend does NOT support this - Hint: use -dt option for preprocessing" << endl;
			}
			if (!driverDesc->backendSupportsCurveto && !flattened) {
				errf << "Warning: this preprocessed input file possibly contains curves but the selected backend does NOT support this. Curves will be converted to a set of straight lines." << endl;
				// return(1);
			}
			constraintsChecked=true;
			}
	YY_BREAK
case 8:
YY_RULE_SETUP
{ 
			CHECKconstraints
			backend->showpage();

			currentPageNumber++;
			if (currentPageNumber <= drvbase::totalNumberOfPages) {
			if ( splitpages ) {
				if(outfilename) {
					if (strstr(outfilename,"%d") == NIL) {
						errf << "Warning: no %d found in name of output file and page feed found in input and either the selected format does not support multiple pages or the -split option was specified.\nPlease insert a %d in the name of the output file if you want to split pages into different files" << endl;
						// we cannot close the output file in this case otherwise
						// we would overwrite the previous results
					} else  {
						delete backend; backend = 0; // 
						ofstream * outputFilePtr = (ofstream *) &outFile;
						char * newname = new char[strlen(outfilename) + 30 ];
						sprintf(newname,outfilename,currentPageNumber);
						// not needed here since done in main program convertBackSlashes(nameOfOutputFile);
						if (driverDesc->backendFileOpenType != DriverDescription::noopen ){ 
							outputFilePtr->close();
							if (driverDesc->backendFileOpenType == DriverDescription::binaryopen ) { 
#if (defined(unix) || defined(__unix__) || defined(_unix) || defined(__unix) || defined(__EMX__) || defined (NetBSD) ) && !defined(DJGPP)
// binary is not available on UNIX, only on PC
								outputFilePtr->open(newname,ios::out);
#else
								// use redundant ios::out because of bug in djgpp
								outputFilePtr->open(newname,ios::out | ios::binary);
#endif
								// errf << "opened " << newname << " for binary output" << endl;
							} else {
								outputFilePtr->open(newname);
								// errf << "opened " << newname << " for output" << endl;
							}
							if (outFile.fail() ) {
								errf << "Could not open file " << newname << " for output" << endl;
								delete [] newname;
								return 1;
							} // fail
						} // backend opens file by itself
						backend =  driverDesc->CreateBackend(driveroptions,*outputFilePtr,errf,infilename,newname,scalefactor,pageSize);
						delete [] newname;
						if (!backend->driverOK()) {
							errf << "Creation of driver for new page failed " << endl;
							return (1);
						}
						backend->currentPageNumber = currentPageNumber - 1; // backend will add one again in open_page
					} // file name contains %d
				} else {
					errf << "Cannot split pages if output is standard output" << endl;
					return(1);
				} // outfilename
			} // splitpages
			} else {
				// ignore any showpage for pages greater than totalNumberOfPages
				if (backend->verbose) errf << "page " << currentPageNumber << " is greater than expected maximum number of pages " << drvbase::totalNumberOfPages << endl;
				return 0; // normal return code;
			}
		      }
	YY_BREAK
case 9:
YY_RULE_SETUP
{ 
			if (backend->numberOfElementsInPath() != 0) {
				errf << "Error, path number " << pathnumber << " was not cleared correctly" << endl;
			}

			pathnumber++;
			BEGIN(READPATH); 
			backend->setIsPolygon(false);
			backend->setPathNumber(pathnumber);
			}
	YY_BREAK
case 10:
YY_RULE_SETUP
{
			/* old version: /Helvetica findfont 14 scalefont setfont */
			/* (Helvetica) cvn findfont  [  3.0 8.31384 -5.19615 4.8 106.699 455.692 ] makefont setfont */
			/* new version because sometimes the new name contains a % */
			if (!non_standard_font) {
			// in the case of a non standard font, the setCurrentFontName was
			// done during handling of nonstandard font
				start_of_text = strchr (yytext,(int)'(') + 1 ;
				end_of_text = strrchr (yytext,(int)')') ;
				if (end_of_text) *end_of_text = (char) 0;
				backend->setCurrentFontName(start_of_text,0);
			}
			non_standard_font = 0; // reset 
			}
	YY_BREAK
case 11:
YY_RULE_SETUP
{
				//may lead to a lot of messages : 
				if (backend->verbose) errorMessage(yytext);
				// wogl;
			}
	YY_BREAK
case 12:
YY_RULE_SETUP
{
				BEGIN(READPROLOG);
			}
	YY_BREAK
case 13:
YY_RULE_SETUP
{
				BEGIN(INITIAL);
			}
	YY_BREAK
case 14:
YY_RULE_SETUP
{ 
			/* fprintf(stderr,"%s\n",yytext);  */
			start_of_text = yytext+2;
			end_of_text =  strrchr (yytext,(int)' ') ;
			if (end_of_text) *end_of_text = (char) 0;
			backend->setCurrentFontFamilyName(start_of_text);
			}
	YY_BREAK
case 15:
YY_RULE_SETUP
{ 
			/* fprintf(stderr,"%s\n",yytext);  */
			start_of_text = yytext+2;
			end_of_text =  strrchr (yytext,(int)' ') ;
			if (end_of_text) *end_of_text = (char) 0;
			backend->setCurrentFontFullName(start_of_text);
			}
	YY_BREAK
case 16:
YY_RULE_SETUP
{ 
			/* fprintf(stderr,"%s\n",yytext);  */
			start_of_text = yytext+2;
			end_of_text =  strrchr (yytext,(int)' ') ;
			if (end_of_text) *end_of_text = (char) 0;
			backend->setCurrentFontWeight(start_of_text);
			}
	YY_BREAK
case 17:
YY_RULE_SETUP
{
			/* % Times-Roman Times-Roman@0 nonstandard font */
			/* % Bla Bla nonstandard font */ /* if it is not derived from a standard font */
			start_of_text = yytext+2;
			end_of_text =  strchr (start_of_text,(int)' ') ;
			if (end_of_text) *end_of_text = (char) 0;
			char   *start_of_secondname = end_of_text +1;
			char   *end_of_secondname = strchr (start_of_secondname,(int)' ') ;
			if (end_of_secondname) *end_of_secondname = (char) 0;
			non_standard_font = 1; // this avoids a further setting of CurrentFontName
			if (strcmp(start_of_text,start_of_secondname) == 0 ) {
				// both names are equal, so it's not a derived font
				backend->setCurrentFontName(start_of_text,1);
			} else {
				// it's a derived font, so use the base name
				backend->setCurrentFontName(start_of_text,0);
			}
			}
	YY_BREAK
case 18:
YY_RULE_SETUP
{

			backend->beginClipPath();

			}
	YY_BREAK
case 19:
YY_RULE_SETUP
{
			backend->setCurrentShowType(drvbase::eofill);
			}
	YY_BREAK
case 20:
YY_RULE_SETUP
{
			backend->setCurrentShowType(drvbase::fill);
			}
	YY_BREAK
case 21:
YY_RULE_SETUP
{
			backend->setCurrentShowType(drvbase::stroke);
			}
	YY_BREAK
case 22:
YY_RULE_SETUP
{
				errf << yytext;
			}
	YY_BREAK
case 23:
YY_RULE_SETUP
{
			 addNumber(0.0f ); // pseudo false
			}
	YY_BREAK
case 24:
YY_RULE_SETUP
{
			 addNumber(1.0f ); // pseudo true
			 }
	YY_BREAK
case 25:
YY_RULE_SETUP
{ // begin of some Data Comment, just ignore the marker
			}
	YY_BREAK
case 26:
YY_RULE_SETUP
{
/*
sequence:

../tests/image/colorimage.ps.ps:%colorimage:begin
../tests/image/colorimage.ps.ps:%colorimage:ncomp
../tests/image/colorimage.ps.ps:%colorimage:multi
../tests/image/colorimage.ps.ps:%colorimage:imagematrix
../tests/image/colorimage.ps.ps:%colorimage:normalized image currentmatrix
../tests/image/colorimage.ps.ps:%colorimage:bits
../tests/image/colorimage.ps.ps:%colorimage:height
../tests/image/colorimage.ps.ps:%colorimage:width
../tests/image/colorimage.ps.ps:%colorimage:data
../tests/image/colorimage.ps.ps:%colorimage:end 

../tests/image/hw.ps.ps:%image:begin
../tests/image/hw.ps.ps:%image:imagematrix
../tests/image/hw.ps.ps:%image:normalized image currentmatrix
../tests/image/hw.ps.ps:%image:bits 
../tests/image/hw.ps.ps:%image:height
../tests/image/hw.ps.ps:%image:width
../tests/image/hw.ps.ps:%image:data
../tests/image/hw.ps.ps:%image:data
../tests/image/hw.ps.ps:%image:end

../tests/image/hwuse.eps.ps:%imagemask:begin
../tests/image/hwuse.eps.ps:%imagemask:imagematrix
../tests/image/hwuse.eps.ps:%imagemask:normalized image currentmatrix
../tests/image/hwuse.eps.ps:%imagemask:polarity
../tests/image/hwuse.eps.ps:%imagemask:height
../tests/image/hwuse.eps.ps:%imagemask:width
../tests/image/hwuse.eps.ps:%imagemask:data
../tests/image/hwuse.eps.ps:%imagemask:data
../tests/image/hwuse.eps.ps:%imagemask:end

%begin dealing with image from dict
%pngfileimage:begin
% DC  640 0 0 -480 0 480
%pngfileimage:imagematrix
%pngfileimage:filename but.dump_1.png
% DC  640
%pngfileimage:width
% DC  480
%pngfileimage:height
%pngfileimage:end
grestore %}
%end dealing with image from dict


*/
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.isFileImage = false ;
				backend->imageInfo.type = colorimage;
				// ncomp will be written later
				// bits will be written later
				backend->imageInfo.polarity = true; 
				BEGIN(READIMAGE); 
			}
	YY_BREAK
case 27:
YY_RULE_SETUP
{
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.isFileImage = true ;
				backend->imageInfo.type = normalimage;
				backend->imageInfo.ncomp = 1;
				// bits will be written later
				backend->imageInfo.polarity = true; 
				BEGIN(READIMAGE); 
			}
	YY_BREAK
case 28:
YY_RULE_SETUP
{
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.isFileImage = false ;
				backend->imageInfo.type = normalimage;
				backend->imageInfo.ncomp = 1;
				// bits will be written later
				backend->imageInfo.polarity = true; 
				BEGIN(READIMAGE); 
			}
	YY_BREAK
case 29:
YY_RULE_SETUP
{
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.isFileImage = false ;
				backend->imageInfo.type = imagemask;
				backend->imageInfo.ncomp = 1;
				// polarity will be written later
				backend->imageInfo.bits = 1;
				BEGIN(READIMAGE); 
			}
	YY_BREAK
case 30:
YY_RULE_SETUP
{
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}

				// replace newline with eos
				yytext[strlen(yytext)-1] = '\0';
				//cout << "filename: {" << yytext << "}" << endl;
				backend->imageInfo.pngFileName = yytext+strlen("%pngfileimage:filename")+1;
			}
	YY_BREAK
case 31:
YY_RULE_SETUP
{
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.ncomp = toInt(popUnScaled());
			}
	YY_BREAK
case 32:
YY_RULE_SETUP
{ // only set for imagemask
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.polarity = toInt(popUnScaled()) > 0.5 ;  // convert from float to bool
			}
	YY_BREAK
case 33:
YY_RULE_SETUP
{
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				pop(); // not used so far
			}
	YY_BREAK
case 34:
YY_RULE_SETUP
{
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				for (unsigned int i = 0; i < 6 ; i++ ) {
					backend->imageInfo.imageMatrix[5-i] = popUnScaled();
				}
			}
	YY_BREAK
case 35:
YY_RULE_SETUP
{
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				for (unsigned int i = 0; i < 6 ; i++ ) {
					backend->imageInfo.normalizedImageCurrentMatrix[5-i] = popUnScaled();
				}
			}
	YY_BREAK
case 36:
YY_RULE_SETUP
{ // only set for normalimage and colorimage
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.bits = toInt(popUnScaled());
			}
	YY_BREAK
case 37:
YY_RULE_SETUP
{
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.height = toInt(popUnScaled());
			}
	YY_BREAK
case 38:
YY_RULE_SETUP
{
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
				backend->imageInfo.width = toInt(popUnScaled());
			}
	YY_BREAK
case 39:
YY_RULE_SETUP
{
			CHECKconstraints
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}
//cerr << "handling DC " << DC++ << endl;
//cerr << "handling " << yytext ;
//cerr << "strlen " << strlen(yytext) << endl ;
				unsigned int size = backend->imageInfo.height * ((backend->imageInfo.ncomp * backend->imageInfo.width  * backend->imageInfo.bits + 7 ) / 8);
				if (backend->imageInfo.data == 0) {
// cerr << " allocating " << size << " for image data " << endl;
					backend->imageInfo.data = new unsigned char[size];
					if (backend->imageInfo.data==0) {
						cerr << "out of memory for image data" << endl;
						return(1);
					}
					backend->imageInfo.nextfreedataitem = 0;
					// init
//					for (unsigned int i = 0 ; i < size; i++) {
//						backend->imageInfo.data[i] = 0;
//					}
				}
				const char * cp = yytext;
				// search for ' '
				while (cp && (*cp != ' ')) cp++; 
				// now cp points to blank
				cp++;
//cerr << "effective length " << strlen(cp) << endl;
				do {
					const char chigh = *cp;
					const unsigned int high = hextoint(*cp);
					cp++;
					if (*cp == '\0') {
						cerr << "data format error " << endl;
						return(1);
					}
					const char clow = *cp;
					const unsigned int low = hextoint(*cp);
					cp++; 
					if ( backend->imageInfo.nextfreedataitem < size ) {
						backend->imageInfo.data[backend->imageInfo.nextfreedataitem] = (unsigned char) (high * 16 + low);
//						cerr << backend->imageInfo.nextfreedataitem << ":" << chigh<< clow << endl;
						backend->imageInfo.nextfreedataitem++;
					}  else {
						cerr << "too much data: ignoring " << chigh << clow << endl;
					}
				} while (cp && (*cp != '\0'));

			}
	YY_BREAK
case 40:
YY_RULE_SETUP
{
				if (debuglexer) { 
					cerr << "handling " << yytext ;
					pstack();
				}

				backend->dumpImage();
			 	BEGIN(INITIAL);
			}
	YY_BREAK
case 41:
YY_RULE_SETUP
{ 
				if (debuglexer) cerr << "comment ignored " << yytext;
			}
	YY_BREAK
case 42:
YY_RULE_SETUP
{
			// setCurrentFontSize(number );
			float matrix[6];
			matrix[5] = pop();
			matrix[4] = pop();
			matrix[3] = pop(); // sy * cos(phi)
			matrix[2] = pop(); // sy * -sin(phi)
			matrix[1] = pop(); // sx * sin(phi)
			matrix[0] = pop(); // sx * cos(phi)
			backend->setCurrentFontMatrix(matrix);
			const float fsizex = (float) sqrt((matrix[0] * matrix[0]) + (matrix[1] * matrix[1]));
			const float fsizey = (float) sqrt((matrix[2] * matrix[2]) + (matrix[3] * matrix[3]));
			const float todegrees =   180.0f / 3.14159265358979323846f ;
			float phix = (matrix[0] != 0.0f) ? (todegrees * (float) atan(matrix[1] / matrix[0]) ) : (matrix[1] > 0 ? 90.0f : -90.0f );
//			float phiy = todegrees * atan(-1.0 * matrix[2] / matrix[3]);
			if (matrix[0] < 0.0f ) phix = 180 + phix; // if cos (phi) < 0 than add 180
//			if (matrix[3] < 0.0f ) phiy = 180 + phiy;
			if (phix < 0.0f ) phix = 360 + phix;
//			if (phiy < 0.0f ) phiy = 360 + phiy;
//			for (int i = 0; i < 6; i++ ) cout << "matrix [" << i << "] " << matrix[i] << " ";
//			cout << fsizex << " " << fsizey  << " " << endl;
//			cout << phix << " " << phiy  << " "  << endl;
			backend->setCurrentFontSize((fsizex + fsizey)/2.0f);
			backend->setCurrentFontAngle(phix);
			}
	YY_BREAK
case 43:
YY_RULE_SETUP
{
//obsolete
			// setCurrentFontSize(number );
			backend->setCurrentFontSize(pop());
			// pop(); 
			}
	YY_BREAK
case 44:
YY_RULE_SETUP
{
			const float B = popUnScaled();
			const float G = popUnScaled();
			const float R = popUnScaled();
			/* printf("%s %f %f %f\n","setting RGB to ",R,G,B); */
			backend->setRGB(R,G,B);
			}
	YY_BREAK
case 45:
YY_RULE_SETUP
{
			const float K = popUnScaled();
			const float Y = popUnScaled();
			const float M = popUnScaled();
			const float C = popUnScaled();
			const float R = 1.0f - minf(1.0f,C+K); // according to PLRM page 307
			const float G = 1.0f - minf(1.0f,M+K);
			const float B = 1.0f - minf(1.0f,Y+K);
			/* printf("%s %f %f %f\n","setting RGB to ",R,G,B); */
			backend->setRGB(R,G,B);
			}
	YY_BREAK
case 46:
YY_RULE_SETUP
{
				yytext[strlen(yytext) -9] = '\0'; // strip of trailing setdash
				backend->setDash(yytext+1); // don't copy leading space
			}
	YY_BREAK
case 47:
YY_RULE_SETUP
{
			backend->setCurrentMiterLimit(number);
			pop(); 
			}
	YY_BREAK
case 48:
YY_RULE_SETUP
{
			backend->setCurrentLineJoin((int) (number +0.5));
			pop(); 
			}
	YY_BREAK
case 49:
YY_RULE_SETUP
{
			backend->setCurrentLineCap((int) (number +0.5));
			pop(); 
			}
	YY_BREAK
case 50:
YY_RULE_SETUP
{
			backend->setCurrentLineWidth(pop() );
//			setCurrentLineWidth(number  );
//			pop(); 
			}
	YY_BREAK
case 51:
YY_RULE_SETUP
{
			float height = pop(); 
			if (height < 1.0 ) { height = 792 * backend->getScale() ; }
			backend->setCurrentDeviceHeight(height);
			float width  = pop(); 
			if (width < 1.0 ) { width = 612 * backend->getScale() ; }
			backend->setCurrentDeviceWidth(width);
			}
	YY_BREAK
case 52:
YY_RULE_SETUP
{
			const bool  mappedtoisolatin1 = pop() > 0.5; // float to bool
			const float y_end = pop();
			const float x_end = pop();
			const float ay = pop();
			const float ax = pop();
			const int   Char = (int) (popUnScaled()   +0.5);	
			const float cy = pop();
			const float cx = pop();
			backend->setMappedtoisolatin1(mappedtoisolatin1);
			backend->setCurrentWidthParams(ax,ay,Char,cx,cy,x_end,y_end);
			}
	YY_BREAK
case 53:
YY_RULE_SETUP
{ 
			CHECKconstraints
			start_of_text = strchr (yytext,(int)'(') + 1 ;
			end_of_text = strrchr (yytext,(int)')') ;
			if (end_of_text) *end_of_text = (char) 0;
			const float y = pop(); /* just the last moveto (0 0 in case of makefont) */
			const float x = pop(); /* just the last moveto (0 0 in case of makefont) */
			/* backend->dumpText(start_of_text,x,y); */
			backend->dumpHEXText(start_of_text,x + backend->getCurrentFontMatrix()[4],y + backend->getCurrentFontMatrix()[5]);
			}
	YY_BREAK
case 54:
YY_RULE_SETUP
{ 
			CHECKconstraints
			start_of_text = strchr (yytext,(int)'(') + 1 ;
			end_of_text = strrchr (yytext,(int)')') ;
			if (end_of_text) *end_of_text = (char) 0;
			const float y = pop(); /* just the last moveto (0 0 in case of makefont) */
			const float x = pop(); /* just the last moveto (0 0 in case of makefont) */
			/* backend->dumpText(start_of_text,x,y); */
			backend->dumpText(start_of_text,x + backend->getCurrentFontMatrix()[4],y + backend->getCurrentFontMatrix()[5]);
			}
	YY_BREAK
case 55:
YY_RULE_SETUP
{
// obsolete
			backend->setCurrentFontAngle(number);
			pop();
			}
	YY_BREAK
case 56:
YY_RULE_SETUP
{
//obsolete
			/* Because this is in the preamble, only pop 
			   this has put something on the stack. */
			if (nextFreeNumber >= 2)
				{ pop(); pop(); }
			}
	YY_BREAK
case 57:
YY_RULE_SETUP
{
//obsolete
			/* Because this is in the preamble, only pop 
			   this has put something on the stack. */
			if (nextFreeNumber >= 2)
				{ pop(); pop(); }
			}
	YY_BREAK
case 58:
YY_RULE_SETUP
{ /* ignore any other stuff */ }
	YY_BREAK
case 59:
YY_RULE_SETUP
{ 
			CHECKconstraints
			// save coordinates for possible closepath
			origy = pop();
			origx = pop();
			if (backend->numberOfElementsInPath() > 1) {
				// this is an intermediate moveto
				// if backend supports subpaths add it
				// else dump last path and start a new one
				if (backend->simulateSubPaths || backend->Pdriverdesc->backendSupportsSubPathes) {
//					Point p(origx,origy);
					backend->addtopath(new Moveto(origx,origy));  
				} else {
					// dumppath
					backend->dumpPath();
					// start new path
//					Point p(origx,origy);
					backend->addtopath(new Moveto(origx,origy));  
					
				}
			} else {
				// it is a starting moveto
//				Point p(origx,origy);
				backend->addtopath(new Moveto(origx,origy));  
			}
			currentpoint = Point(origx,origy);
		   }
	YY_BREAK
case 60:
YY_RULE_SETUP
{
			float y = pop();
			float x = pop();
//			Point p(x,y);
			backend->addtopath(new Lineto(x,y)); 
			currentpoint = Point(x,y);
			}
	YY_BREAK
case 61:
YY_RULE_SETUP
{ 

			Point p[3];
			for (unsigned int i = 3; i > 0; i--) { 
				// !!! i = 2 to i>= 0 does not work for unsigned
				float y = pop();
				float x = pop();
				p[i-1] = Point(x,y);
			}

			if (backend->Pdriverdesc->backendSupportsCurveto) {
				backend->addtopath(new Curveto(p)); // pass p as array
			} else {

				const unsigned int sections = 10;

				const Point & cp1 = p[0];
				const Point & cp2 = p[1];
				const Point & ep  = p[2];

				for (unsigned int s = 0; s <= sections; s++) {
					const float t = 1.0f * s / sections;
					const Point pt = PointOnBezier(t, currentpoint, cp1, cp2, ep);
					backend->addtopath(new Lineto(pt.x_,pt.y_)); 
				}
//				errf << "illegal input received. curveto not expected by this backend\n";
//				return(1);			
			}
			currentpoint = Point(p[2].x_,p[2].y_);

			}
	YY_BREAK
case 62:
YY_RULE_SETUP
{
			 Point startPoint(origx,origy);
			 const basedrawingelement & lastelem = backend->pathElement(backend->numberOfElementsInPath() -1 );
			// check for last == first. Then no additional
			// lineto is needed. and isPolygon can be set to true
			 if  ( (lastelem.getType() == lineto) && (lastelem.getPoint(0) == startPoint) ) {
				// no need to close the path, it's already closed
			 } else {
				if (backend->simulateSubPaths || backend->Pdriverdesc->backendSupportsSubPathes) {
			 		backend->addtopath(new Closepath()); 
				} else {
			 		backend->addtopath(new Lineto(origx,origy)); // pass p as array
				}

			 }
			 backend->setIsPolygon(true);
			 /* show is done by next stroke, fill or moveto */
 			 currentpoint = startPoint;
			}
	YY_BREAK
case 63:
YY_RULE_SETUP
{ 
			CHECKconstraints
			 BEGIN(INITIAL);
			 backend->dumpPath();
                       	};
	YY_BREAK
case 64:
YY_RULE_SETUP
{ 
			CHECKconstraints
			 BEGIN(INITIAL);
			 backend->dumpPath(); 
                       	};
	YY_BREAK
case 65:
YY_RULE_SETUP
{ 
			CHECKconstraints
			 BEGIN(INITIAL);
			 backend->dumpPath(); 
                       	};
	YY_BREAK
case 66:
YY_RULE_SETUP
{ 
				 backend->Save();
                       	};
	YY_BREAK
case 67:
YY_RULE_SETUP
{ 
				 backend->Save();
                       	};
	YY_BREAK
case 68:
YY_RULE_SETUP
{ 
				 backend->Restore();
                       	};
	YY_BREAK
case 69:
YY_RULE_SETUP
{ 
				 backend->Restore();
                       	};
	YY_BREAK
case 70:
YY_RULE_SETUP
{ 
				 backend->endClipPath(drvbase::clip);
				 BEGIN(INITIAL);
                    	};
	YY_BREAK
case 71:
YY_RULE_SETUP
{ 
				 backend->endClipPath(drvbase::eoclip);
				 BEGIN(INITIAL);
                    	};
	YY_BREAK
case 72:
YY_RULE_SETUP
{}
	YY_BREAK
case 73:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(READPATH):
case YY_STATE_EOF(READIMAGE):
case YY_STATE_EOF(READPROLOG):
case YY_STATE_EOF(READBBOXNUMBERS):
case YY_STATE_EOF(READBBOX):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 939 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 939 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 938);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif

void PSFrontEnd::yylexcleanup()
{
//	if (yy_state_buf) yy_flex_free(yy_state_buf);
	yy_delete_buffer( yy_current_buffer );

// reset the global initialized statics to their initial value
// so the lexer can be called again.
	yy_c_buf_p	= (char *) 0;
	yy_init		= 1;	/* whether we need to initialize */
	yy_start	= 0;	/* start state number */
}

unsigned int PSFrontEnd::readBBoxes(BBox * bboxes)
{
	BEGIN(READBBOX);
	bblexmode = true;
	currentPageNumber = 0;
	nextFreeNumber=0;
	bboxes_ptr = bboxes;
	yy_init = 1;
	yylex();
	yylexcleanup();
	return currentPageNumber;
}
void PSFrontEnd::run(bool merge)
{
	BEGIN(INITIAL);
	bblexmode = false;
	currentPageNumber = 1;
	nextFreeNumber=0;
	yy_init = 1;
	backend->startup(merge);
	if (!yylex()) {
		// yylex returns 0 on normal EOF
		// 1 in case of errors
		backend->finalize();
	}
	delete backend;
	backend = 0;
}

void PSFrontEnd::addNumber(float a_number)
{
// printf("Adding %f\n",number);
 if (nextFreeNumber < maxPoints) { 
     	numbers[nextFreeNumber++] = a_number; 
     	// nextFreeNumber always points to the next free number
 } else { 
   	errf << "Too many numbers on stack. Please increase maxPoints in drvbase.h \n"; 
   	exit(1); 
 }
}

PSFrontEnd::PSFrontEnd(ostream& outfile_p, 
		ostream & errstream,
		const char * infilename_p,
		const char * outfilename_p,
		const float scalefactor_p,
		const RSString & pagesize_p,
		const DriverDescription * driverDesc_p,
		const char * driveroptions_p,
		const bool splitpages_p, 
		drvbase * backend_p)
	: outFile(outfile_p),
	  errf(errstream),
	  infilename(infilename_p),
	  outfilename(outfilename_p),
	  scalefactor(scalefactor_p),
	  pageSize(pagesize_p),
	  driverDesc(driverDesc_p),
	  driveroptions(driveroptions_p),
	  splitpages(splitpages_p),
	  backend(backend_p),
	  currentPageNumber(1),
	  numbers((float*) 0),
      nextFreeNumber(0),
      pathnumber(0),
	  non_standard_font(false),
	  constraintsChecked(false),
	  bblexmode(false),
	  bboxes_ptr(0)
{
    numbers = new float[maxPoints]; // The number stack
    if ((numbers == 0)){
		errf << "new failed in PSFrontEnd::PSFrontEnd " << endl;
		exit(1);
    }
}

PSFrontEnd::~PSFrontEnd() {
#ifdef __INSURE__
	errf << "Deleting PSFrontEnd object and thus the numbers as well" << endl;
#endif
	delete [] numbers;
	numbers = 0;
	yylexcleanup();
}

float PSFrontEnd::pop() 
{ 
  if (nextFreeNumber > 0) {
  	nextFreeNumber--;
  	return numbers[nextFreeNumber] * backend->getScale(); // the value we just pushed
  } else {
	errf << "Fatal error in PSFrontEnd::pop : nextFreeNumber would get < 0" << endl;
	assert(false);
	//exit(1);
  }
  return 0.0f; // never reached, just to make compiler quiet
}


float PSFrontEnd::popUnScaled() 
{
  if (nextFreeNumber > 0) {
  	nextFreeNumber--;
  	return numbers[nextFreeNumber]; // the value we just pushed
  } else {
	errf << "Fatal error in PSFrontEnd::popUnScaled : nextFreeNumber would get < 0" << endl;
	assert(false); //exit(1);
  }
  return 0.0f; // never reached, just to make compiler quiet
}

void PSFrontEnd::pstack()  const {
	for (unsigned int i = 0 ; i < nextFreeNumber ; i++ ) {
		cerr << "[" << i << "] " << numbers[i] << " " << numbers[i]* backend->getScale() << endl;
	}
}
 
