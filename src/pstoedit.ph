// DO NOT CHANGE THIS FILE. THIS FILE IS GENERATED FROM pstoedit.pro 
// You can get pstoedit.pro from the author of pstoedit
// pstoedit.pro contains a lot more comments and explanations than pstoedit.ph
const char * const PS_prologue[] = 
{
//Title: pstoedit.pro / pstoedit.ph; This file is part ot pstoedit
// 
// This file contains some redefinitions of PostScript(TM) operators
// useful for the conversion of PostScript into a vector format via Ghostscript
// 
// Copyright (C) 1993 - 2001 Wolfgang Glunz, wglunz@pstoedit.net  
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program; if not, write to the Free Software
//    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
//
 "  ",
 "  ",
 "  ",
 "  ",
 "  ",
 " /pstoeditcopyright (Copyright \\(C\\) 1993 - 2001 Wolfgang Glunz) def ",
 "  ",
 "  ",
 "  ",
 " currentdict /maptoisolatin1 	known not  ",
 " {  ",
 " /maptoisolatin1 true def ",
 " }  ",
 " if ",
 " currentdict /textastext 		known not  ",
 " {  ",
 " /textastext true def ",
 " }  ",
 " if ",
 " currentdict /autodrawtext 		known not  ",
 " {  ",
 " /autodrawtext false def ",
 " }  ",
 " if ",
 " currentdict /t2fontsast1 		known not  ",
 " {  ",
 " /t2fontsast1 false def ",
 " }  ",
 " if ",
 " currentdict /pstoedit.checkfontnames known not ",
 " {  ",
 " /pstoedit.checkfontnames true def ",
 " /pstoedit.ashexstring false def ",
 " }  ",
 " {  ",
 " /pstoedit.ashexstring true def   ",
 " /maptoisolatin1 false def ",
 " }  ",
 " ifelse ",
 " currentdict /flatnesstouse 		known not  ",
 " {  ",
 " /flatnesstouse 1.0 def ",
 " }  ",
 " if ",
 " currentdict /escapetext 		known not  ",
 " {  ",
 " /escapetext false def ",
 " }  ",
 " if ",
 " currentdict /redirectstdout 	known not  ",
 " {  ",
 " /redirectstdout false def ",
 " }  ",
 " if ",
 " currentdict /usepdfmark 		known not  ",
 " {  ",
 " /usepdfmark false def ",
 " }  ",
 " if ",
 " currentdict /outputfilename 	known not  ",
 " {  ",
 " /outputfilename (%stdout) def ",
 " }  ",
 " if ",
 " currentdict /inputfilename  	known not  ",
 " {  ",
 " /inputfilename  (%stdin) def ",
 " }  ",
 " if ",
 " currentdict /doflatten      	known not  ",
 " {  ",
 " /doflatten      true  def ",
 " }  ",
 " if ",
 " currentdict /withimages     	known not  ",
 " {  ",
 " /withimages     false  def ",
 " }  ",
 " if ",
 " currentdict /backendSupportsPNGFileImages     	known not  ",
 " {  ",
 " /backendSupportsPNGFileImages     false  def ",
 " }  ",
 " if ",
 " currentdict /verbosemode    	known not  ",
 " {  ",
 " /verbosemode    false  def ",
 " }  ",
 " if ",
 " currentdict /replacementfont 	known not  ",
 " {  ",
 " /replacementfont      (Courier)  def ",
 " }  ",
 " if ",
 " currentdict /delaybindversion	known not  ",
 " {  ",
 " /delaybindversion      true  def ",
 " }  ",
 " if ",
 " currentdict /scalefontversion	known not  ",
 " {  ",
 " /scalefontversion      false  def ",
 " }  ",
 " if ",
 " currentdict /simulateclipping	known not  ",
 " {  ",
 " /simulateclipping      false  def ",
 " }  ",
 " if ",
 " currentdict /pstoedit.useRGBcolors	known not  ",
 " {  ",
 " /pstoedit.useRGBcolors      false  def ",
 " }  ",
 " if ",
 " currentdict /pstoedit.dumpclippath	known not  ",
 " {  ",
 " /pstoedit.dumpclippath      false  def ",
 " }  ",
 " if ",
 " currentdict /pstoedit.rotation	known not  ",
 " {  ",
 " /pstoedit.rotation      0  def ",
 " }  ",
 " if ",
 "  ",
 "  ",
 " currentdict /precisiontext 	known not  ",
 " {  ",
 " /precisiontext         0  def ",
 " }  ",
 " if ",
 "  ",
 " currentdict /globalunmappablecharacter known not  ",
 " {  ",
 " /globalunmappablecharacter ( ) def %Note: we use a space instead of a # since ",
 " }  ",
 " if ",
 "  ",
 " currentdict /pagetoextract      known not  ",
 " {  ",
 " /pagetoextract    0  def ",
 " }  ",
 " if  ",
 "  ",
 " currentdict /withpscover      known not  ",
 " {  ",
 " /withpscover    false  def ",
 " }  ",
 " if  ",
 "  ",
 " withpscover  ",
 " {  ",
 " /covstream (pscover.txt) (w) file def ",
 " /pscover  ",
 " {  ",
 " 20 -string cvs covstream exch writestring  covstream (\\n) writestring covstream flushfile ",
 " }  ",
 " def ",
 " }  ",
 " {  ",
 " /pscover  ",
 " {  ",
 " pop ",
 " }  ",
 " def ",
 " }  ",
 " ifelse ",
 "  ",
 "  ",
 "  ",
 " delaybindversion  ",
 " {  ",
 " revision 353 ge  ",
 " {  ",
 " NOBIND /DELAYBIND where  ",
 " {  ",
 " pop DELAYBIND or  ",
 " }  ",
 " if ",
 " {  ",
 " systemdict begin ",
 " /bind /.bind load ",
 " /.forcedef where  ",
 " {  ",
 " pop .forcedef  ",
 " }  ",
 " {  ",
 " def  ",
 " }  ",
 " ifelse ",
 " end ",
 " }  ",
 " if ",
 " }  ",
 " if ",
 " }  ",
 " if ",
 " /.forcedef where  ",
 " {  ",
 " pop  ",
 " }  ",
 " {  ",
 " /.forcedef /def load def  ",
 " }  ",
 " ifelse ",
 "  ",
 " delaybindversion  ",
 " {  ",
 " /redef  ",
 " {  ",
 " systemdict begin 1 index exch .makeoperator //.forcedef end  ",
 " }  ",
 " bind def ",
 " /soverload  ",
 " {  ",
 " bind redef ",
 " }  ",
 " bind def ",
 " /overload   ",
 " {  ",
 " bind redef ",
 " }  ",
 " bind def ",
 " systemdict /.setglobal known  ",
 " {  ",
 " .currentglobal true .setglobal  ",
 " }  ",
 " if  ",
 "  ",
 " }  ",
 " {  ",
 " systemdict /.setglobal known  ",
 " {  ",
 " .currentglobal true .setglobal  ",
 " }  ",
 " if  ",
 "  ",
 " /soverload  ",
 " {  ",
 " systemdict begin bind def end  ",
 " }  ",
 " def ",
 " /overload  ",
 " {  ",
 " bind def  ",
 " }  ",
 " bind def ",
 "  ",
 " }  ",
 " ifelse  ",
 "  ",
 " /outstream outputfilename (w) file def ",
 "  ",
 "  ",
 " redirectstdout  ",
 " {  ",
 " /errstream (%stderr) (w) file def ",
 " /print  ",
 " {  ",
 " errstream exch writestring  ",
 " }  ",
 " overload ",
 " /flush  ",
 " {  ",
 " errstream flushfile  ",
 " }  ",
 " overload ",
 " }  ",
 " if ",
 "  ",
 " /-printalways   ",
 " {  ",
 " outstream exch writestring  ",
 " }  ",
 " def ",
 " /-print   ",
 " {  ",
 " pagetoextract 0 eq pagetoextract pstoedit.pagenr cvi eq or ",
 " {  ",
 " -printalways ",
 " 1 1 -string cvs pstoedit.somethingprinted copy pop  ",
 " }  ",
 " {  ",
 " pop  ",
 " }  ",
 " ifelse ",
 " }  ",
 " def ",
 "  ",
 " /-printhexalways   ",
 " {  ",
 " outstream exch writehexstring  ",
 " }  ",
 " def ",
 " /-printhex   ",
 " {  ",
 " pagetoextract 0 eq pagetoextract pstoedit.pagenr cvi eq or ",
 " {  ",
 " -printhexalways ",
 " 1 1 -string cvs pstoedit.somethingprinted copy pop  ",
 " }  ",
 " {  ",
 " pop  ",
 " }  ",
 " ifelse ",
 " }  ",
 " def ",
 "  ",
 " /-printNC   ",
 " {  ",
 " pagetoextract 0 eq pagetoextract pstoedit.pagenr cvi eq or ",
 " {  ",
 " -printalways ",
 " }  ",
 " {  ",
 " pop  ",
 " }  ",
 " ifelse ",
 " }  ",
 " def ",
 "  ",
 " /-fill   /fill load def ",
 " /-eofill /eofill load def ",
 " /-stroke /stroke load def ",
 " /-image /image load def ",
 " /-imagemask /imagemask load def ",
 " /-colorimage /colorimage load def ",
 " /-awidthshow   /awidthshow load def ",
 " /-showpage /showpage load def ",
 " /-string /string load def ",
 " /-lt /lt load def ",
 " /-charpath /charpath load def ",
 " /-stringwidth /stringwidth load def ",
 " languagelevel 1 gt  ",
 " {  ",
 " /-glyphshow /glyphshow load def ",
 " }  ",
 " if ",
 "  ",
 " /pstoedit.pagenr (1           ) store ",
 " /pstoedit.somethingprinted (0) store % indicates whether something was written. ",
 "  ",
 " /pstoedit.replacedfont false store  % if true, font was replaced with Courier ",
 " /pstoedit.ignoredraw false store  % if true, ignore all fill, eofill, stroke ",
 " /pstoedit.ignoreimage false store  % if true, ignore all *image* ",
 " /pstoedit.textshown false store ",
 " /pstoedit.fontunit 1000 store % standard fonts have a unit of 1/1000 ",
 " /pstoedit.x 1 store ",
 " /pstoedit.y 1 store ",
 " /pstoedit.dumpstring () store ",
 " /pstoedit.dumpop  ",
 " {  ",
 " }  ",
 " store ",
 " /pstoedit.y1 1 store ",
 " /pstoedit.x1 1 store ",
 " /pstoedit.y2 1 store ",
 " /pstoedit.x2 1 store ",
 " /pstoedit.inputchar 0 store ",
 " /pstoedit.outputchar 0 store ",
 " /pstoedit.glyphname () store ",
 " /pstoedit.glyphname 0 store ",
 " /pstoedit.inverseDict 0 store ",
 " /pstoedit.currentstring () store ",
 " /pstoedit.normalizedstring () store ",
 " /pstoedit.stringindex 0 store ",
 " /pstoedit.angle 0 store ",
 " /pstoedit.pathnumber 0 def ",
 " /pstoedit.deviceheight 0 def ",
 " /pstoedit.deviceinfoshown false def ",
 " /pstoedit.dpiscale 1 def ",
 " /pstoedit.currentscale 1 def ",
 "  ",
 " /pstoedit.glyphcounter 0 def ",
 " /pstoedit.ll.x    (999999            ) def ",
 " /pstoedit.ll.y    (999999            ) def ",
 " /pstoedit.ur.x    (0                 ) def ",
 " /pstoedit.ur.y    (0                 ) def ",
 " /pstoedit.bbclear (                  ) def ",
 "  ",
 "  ",
 " /pstoedit.dotrace (0) store  % switched on and off dynamically ",
 "  ",
 "  ",
 "  ",
 " /pstoedit.unmappablecharacter globalunmappablecharacter 1 string cvs store ",
 "  ",
 " /-findfont /findfont load def ",
 " /-definefont /definefont load def ",
 "  ",
 " /-currentrgbcolor /currentrgbcolor load def ",
 " /-currentcmykcolor /currentcmykcolor load def ",
 " /-concat /concat load def ",
 " /s100 100 -string def ",
 " /s1000 1000 -string def ",
 "  ",
 " /globals100  ",
 " {  ",
 " currentglobal true setglobal 100 -string exch setglobal  ",
 " }  ",
 " def ",
 "  ",
 "  ",
 "  ",
 "  ",
 " /-gsave		/gsave		load def ",
 " /-grestore /grestore	load def ",
 " /-save		/save		load def ",
 " /-restore	/restore	load def ",
 " /-clip		/clip		load def ",
 " /-eoclip	/eoclip		load def ",
 " /-rectclip	/rectclip	load def ",
 " /-setgstate /setgstate	load def ",
 "  ",
 "  ",
 " pstoedit.dumpclippath  simulateclipping not and  ",
 " { 1 pscover ",
 "  ",
 " /gsave  ",
 " { 2 pscover ",
 " -gsave (gsave %{\\n ) -print ",
 " }  ",
 " soverload ",
 "  ",
 " /grestore  ",
 " { 3 pscover ",
 " -grestore (grestore %}\\n ) -print ",
 " }  ",
 " soverload ",
 "  ",
 " /save  ",
 " { 4 pscover ",
 " -save  ",
 " (save %{\\n)	 -print ",
 " }  ",
 " soverload ",
 "  ",
 " /restore  ",
 " { 5 pscover ",
 " (restore %}\\n)	 -print  ",
 " -restore  ",
 " }  ",
 " soverload ",
 "  ",
 "  ",
 " /clip  ",
 " { 6 pscover ",
 " (% clippath\\n)  ",
 " { 7 pscover ",
 " -clip ",
 " }  ",
 " (clip) dumppath  ",
 " }  ",
 " soverload ",
 "  ",
 " /eoclip  ",
 " { 8 pscover ",
 " (% clippath\\n)  ",
 " { 9 pscover ",
 " -eoclip ",
 " }  ",
 " (eoclip) dumppath  ",
 " }  ",
 " soverload ",
 "  ",
 " /rectclip  ",
 " { 10 pscover ",
 " (Executing rectclip : result may not be correct with respect to clipping\\n) true printwarning ",
 " -rectclip ",
 " }  ",
 " soverload ",
 "  ",
 " /setgstate  ",
 " { 11 pscover ",
 " (Executing setgstate : result may not be correct with respect to clipping\\n) true printwarning ",
 " -setgstate ",
 " }  ",
 " soverload ",
 "  ",
 " }  ",
 " if ",
 "  ",
 " /-rectfill /rectfill load def ",
 " /rectfill  ",
 " { 12 pscover ",
 " (Executing rectfill : not yet implemented\\n) true printwarning ",
 " -rectfill ",
 " }  ",
 " soverload ",
 "  ",
 " /-rectstroke /rectstroke load def ",
 " /rectstroke  ",
 " { 13 pscover ",
 " (Executing rectstroke : not yet implemented\\n) true printwarning ",
 " -rectstroke ",
 " }  ",
 " soverload ",
 "  ",
 " usepdfmark  ",
 " { 14 pscover ",
 "  ",
 "  ",
 "  ",
 " /currentdistillerparams 1 dict def ",
 " currentdistillerparams begin ",
 " /CoreDistVersion 2000 def ",
 " end ",
 " }  ",
 " if ",
 "  ",
 " /debugprint  ",
 " { %nc  ",
 " (\\% PRINT ) -print  ",
 " -print ",
 " ( MSG\\n) -print ",
 " }  ",
 " def ",
 "  ",
 " /printwarning  ",
 " { %nc  ",
 " { %nc  ",
 " (Warning: )  print		 ",
 " (%Warning: ) -printalways  ",
 " }  ",
 " if ",
 " dup ",
 " print ",
 " -printalways ",
 " }  ",
 " def ",
 "  ",
 "  ",
 " /onechar 1 -string def ",
 " /inttosinglechar  ",
 " { %nc  ",
 " onechar exch 0 exch put  ",
 " onechar 1 -string cvs ",
 " }  ",
 " def ",
 "  ",
 " /InverseISO 512 dict def ",
 " /InversePDF 512 dict def ",
 "  ",
 "  ",
 " /pstoedit.DEVICEINFO  ",
 " { 15 pscover ",
 " /deviceinfo where  ",
 " { 16 pscover ",
 " pop % the dict ",
 " revision 500 -lt  ",
 " { 17 pscover ",
 " deviceinfo ",
 " }  ",
 " { 18 pscover ",
 " systemdict begin currentpagedevice  end ",
 " }  ",
 " ifelse ",
 " }  ",
 " { 19 pscover ",
 " systemdict begin currentpagedevice  end ",
 " }  ",
 " ifelse ",
 " }  ",
 " def ",
 "  ",
 " /pstoedit.computeDPIscale  ",
 " { 20 pscover ",
 " languagelevel 1 gt  ",
 " { 21 pscover ",
 " pstoedit.DEVICEINFO /HWResolution known  ",
 " { 22 pscover ",
 " pstoedit.DEVICEINFO /HWResolution get 0 get  ",
 " 72 div /pstoedit.dpiscale exch store % normalize dpi to 72 ",
 " }  ",
 " { 23 pscover ",
 " /pstoedit.dpiscale 1 store ",
 " }  ",
 " ifelse ",
 " }  ",
 " { 24 pscover ",
 " /pstoedit.dpiscale 1 store ",
 " }  ",
 " ifelse ",
 " }  ",
 " def ",
 "  ",
 " /setdummydevice  ",
 " { 25 pscover ",
 " (NOTE: THIS IS A DEBUG VERSION. PLEASE REMOVE CALL TO setdummydevice\\n) print ",
 " mark ",
 " /OutputFile (dummy.png) ",
 " /HWResolution [ 72 72 ] ",
 " /PageSize [ 1000 1000 ] ",
 " (pswrite) ",
 " finddevice  ",
 " putdeviceprops ",
 " setdevice ",
 " }  ",
 " def ",
 "  ",
 " /pstoedit.initialize  ",
 " {  ",
 " 0 0 transform  ",
 " /pstoedit.deviceheight exch store ",
 " pop ",
 " /pstoedit.deviceinfoshown false store ",
 " pstoedit.computeDPIscale  ",
 "  ",
 "  ",
 " /pstoedit.glyphcounter 0 store ",
 " ISOLatin1Encoding ",
 " {  ",
 " /pstoedit.glyphname exch store ",
 " InverseISO pstoedit.glyphname known not ",
 " {  ",
 " InverseISO pstoedit.glyphname pstoedit.glyphcounter inttosinglechar put  ",
 " InversePDF pstoedit.glyphname pstoedit.glyphcounter inttosinglechar put  ",
 " }  ",
 " if ",
 " /pstoedit.glyphcounter pstoedit.glyphcounter 1 add store ",
 " }  ",
 " forall ",
 "  ",
 "  ",
 " 32 1 127  ",
 " {  ",
 " dup /pstoedit.glyphcounter exch store  ",
 " inttosinglechar cvn /pstoedit.glyphname exch store ",
 " InverseISO pstoedit.glyphname known not ",
 " {  ",
 " InverseISO pstoedit.glyphname pstoedit.glyphcounter inttosinglechar put  ",
 " InversePDF pstoedit.glyphname pstoedit.glyphcounter inttosinglechar put  ",
 " }  ",
 " if ",
 " }  ",
 " for  ",
 " InverseISO 11 inttosinglechar cvn  (ff) put  ",
 " InverseISO 12 inttosinglechar cvn  (fi) put  ",
 " InverseISO 13 inttosinglechar cvn  (fl) put  ",
 "  ",
 " InversePDF 11 inttosinglechar cvn  (ff) put  ",
 " InversePDF 12 inttosinglechar cvn  (fi) put  ",
 " InversePDF 13 inttosinglechar cvn  (fl) put  ",
 "  ",
 "  ",
 " InverseISO 	begin ",
 " /.notdef   pstoedit.unmappablecharacter def % wogltmp(@) def ",
 " /quotesinglbase (,) def ",
 " /quotesingle (') def ",
 " /florin (f) def ",
 " /quotedblbase (,,) def ",
 " /ellipsis (...) def ",
 " /perthousand (%o) def ",
 " /guilsinglleft (<) def ",
 " /OE (OE) def ",
 " /quotedblleft (\") def ",
 " /quotedblright (\") def ",
 " /bullet (*) def ",
 " /endash (-) def ",
 " /emdash (-) def ",
 " /trademark (TM) def ",
 " /guilsinglright (>) def ",
 " /oe (oe) def ",
 " /Ydieresis (Y) def ",
 " /fraction (/) def ",
 " /fi (fi) def ",
 " /fl (fl) def ",
 " /hyphen (-) def ",
 " end ",
 "  ",
 " InversePDF 	begin ",
 " /.notdef pstoedit.unmappablecharacter def ",
 " /breve 24 inttosinglechar def ",
 " /caron 25 inttosinglechar def ",
 " /circumflex 26 inttosinglechar def ",
 " /dotaccent 27 inttosinglechar def ",
 " /hungarumlaut 28 inttosinglechar def ",
 " /ogonek 29 inttosinglechar def ",
 " /ring 30 inttosinglechar def ",
 " /tilde 31 inttosinglechar def ",
 " /quotesingle 39 inttosinglechar def ",
 " /grave 96 inttosinglechar def ",
 " /bullet 128 inttosinglechar def ",
 " /dagger 129 inttosinglechar def ",
 " /daggerdbl 130 inttosinglechar def ",
 " /ellipsis 131 inttosinglechar def ",
 " /emdash 132 inttosinglechar def ",
 " /endash 133 inttosinglechar def ",
 " /florin 134 inttosinglechar def ",
 " /fraction 135 inttosinglechar def ",
 " /guilsinglleft 136 inttosinglechar def ",
 " /guilsinglright 137 inttosinglechar def ",
 " /minus 138 inttosinglechar def ",
 " /perthousand 139 inttosinglechar def ",
 " /quotedblbase 140 inttosinglechar def ",
 " /quotedblleft 141 inttosinglechar def ",
 " /quotedblright 142 inttosinglechar def ",
 " /quoteleft 143 inttosinglechar def ",
 " /quoteright 144 inttosinglechar def ",
 " /quotesinglbase 145 inttosinglechar def ",
 " /trademark 146 inttosinglechar def ",
 " /fi 147 inttosinglechar def ",
 " /fl 148 inttosinglechar def ",
 " /Lslash 149 inttosinglechar def ",
 " /OE 150 inttosinglechar def ",
 " /Scaron 151 inttosinglechar def ",
 " /Ydieresis 152 inttosinglechar def ",
 " /Zcaron 153 inttosinglechar def ",
 " /dotlessi 154 inttosinglechar def ",
 " /lslash 155 inttosinglechar def ",
 " /oe 156 inttosinglechar def ",
 " /scaron 157 inttosinglechar def ",
 " /zcaron 158 inttosinglechar def ",
 "  ",
 " /hyphen 45 inttosinglechar def ",
 " /caron 25 inttosinglechar def ",
 " /space 32 inttosinglechar def ",
 " end ",
 "  ",
 " }  ",
 " def ",
 "  ",
 "  ",
 " /pstoedit.quit  ",
 " { 26 pscover ",
 " pstoedit.somethingprinted cvi 0 eq pagetoextract 0 ne and  ",
 " { 27 pscover ",
 " (no graphics found on selected page, maybe pagenr is too high?\\n) true printwarning ",
 " }  ",
 " if ",
 " flush ",
 "  ",
 " (\\% normal end reached by pstoedit.pro\\n) -printalways ",
 " (\\%\\%Trailer\\n) -printalways ",
 " (\\%\\%Pages: ) -printalways pstoedit.pagenr cvi 1 sub 100 -string cvs -printalways (\\n) -printalways ",
 " (\\%\\%EOF\\n) -printalways ",
 " pstoedit.quitprog ",
 " }  ",
 " def ",
 "  ",
 "  ",
 " /getfrominverse	  ",
 " { 28 pscover ",
 " /pstoedit.inverseDict exch store	 ",
 "  ",
 " 0 get % get first and only char of string as int ",
 " /pstoedit.inputchar exch store ",
 " currentfont /Encoding get pstoedit.inputchar get /pstoedit.glyphname exch store ",
 " pstoedit.inverseDict pstoedit.glyphname known  ",
 " { 29 pscover ",
 " pstoedit.inverseDict pstoedit.glyphname get  ",
 " dup 0 get 0 eq  ",
 " { 30 pscover ",
 " (unable to map [c1]) print pstoedit.glyphname   ",
 " 1000 -string cvs print ( from ) print  ",
 " pstoedit.inputchar 1000 -string cvs print (\\n) print ",
 " pop pstoedit.unmappablecharacter  ",
 " }  ",
 " if ",
 " }  ",
 " { 31 pscover ",
 " (unable to map [c2]) print pstoedit.glyphname   ",
 " 1000 -string cvs print ( from ) print  ",
 " pstoedit.inputchar 1000 -string cvs print (\\n) print ",
 " pstoedit.unmappablecharacter  ",
 " }  ",
 " ifelse ",
 "  ",
 "  ",
 " }  ",
 " def ",
 "  ",
 " /CheckForTextFont  ",
 " { 32 pscover ",
 " currentfont /Encoding get dup length 66 ge  ",
 " { 33 pscover ",
 " 65 get /A eq ",
 " }  ",
 " { 34 pscover ",
 " pop false ",
 " }  ",
 " ifelse  ",
 "  ",
 " { 35 pscover ",
 " true ",
 " }  ",
 " { 36 pscover ",
 " verbosemode  ",
 " { 37 pscover ",
 " currentfont /FontName get 100 -string cvs true printwarning ",
 " ( seems to be a non text font - you may want to use -dt or -adt.\\n) false printwarning  ",
 " }  ",
 " if ",
 " false ",
 " }  ",
 " ifelse ",
 " }  ",
 " def ",
 "  ",
 " /normalizecharacter  ",
 " { 38 pscover ",
 " currentfont /Encoding get 65 get /A eq maptoisolatin1 and  ",
 " { 39 pscover ",
 " usepdfmark  ",
 " { 40 pscover ",
 " InversePDF  ",
 " }  ",
 " { 41 pscover ",
 " InverseISO  ",
 " }  ",
 " ifelse  ",
 " getfrominverse ",
 " }  ",
 " if ",
 " }  ",
 " def ",
 "  ",
 " /normalizestring  ",
 " { 42 pscover ",
 " dup  ",
 " length 2 mul -string /pstoedit.normalizedstring exch store ",
 " /pstoedit.stringindex 0 store % position in output string ",
 " { 43 pscover ",
 " inttosinglechar ",
 " normalizecharacter ",
 " dup length exch % save for later adjustment of index ",
 " pstoedit.normalizedstring exch ",
 " pstoedit.stringindex exch ",
 " putinterval ",
 " pstoedit.stringindex add /pstoedit.stringindex exch store  ",
 " }  ",
 " forall ",
 " pstoedit.normalizedstring 0 pstoedit.stringindex getinterval ",
 " }  ",
 " def ",
 "  ",
 " /getglyphaschar  ",
 " { 44 pscover ",
 " /pstoedit.glyphname exch store ",
 " pstoedit.glyphname ",
 " usepdfmark  ",
 " { 45 pscover ",
 " InversePDF  ",
 " }  ",
 " { 46 pscover ",
 " InverseISO  ",
 " }  ",
 " ifelse  ",
 " 2 copy ",
 " exch known  ",
 " { 47 pscover ",
 " exch get ",
 " }  ",
 " { 48 pscover ",
 " pop pop ",
 "  ",
 " (unable to map [c3] ) print pstoedit.glyphname   ",
 " 1000 -string cvs print %debugwogl( from ) print  ",
 "  ",
 " pstoedit.unmappablecharacter ",
 " }  ",
 " ifelse ",
 " }  ",
 " def ",
 "  ",
 " /FontHistory 256 dict def ",
 "  ",
 "  ",
 " /pstoedit.lastfindfont replacementfont def ",
 " /pstoedit.basefontname (null) def ",
 " /pstoedit.currentfontkey () def ",
 " /findfont  ",
 " { 49 pscover ",
 " dup /pstoedit.lastfindfont exch store ",
 " -findfont ",
 " }  ",
 " overload ",
 "  ",
 " /p2egetbasefontname  ",
 " { 50 pscover ",
 " true ",
 " { 51 pscover ",
 " dup ",
 " getorigfont ",
 " dup ",
 " dup /FontName known  ",
 " { 52 pscover ",
 " 3 1 roll ",
 " ne  % and getorig returned a different font ",
 " { 52 pscover ",
 " /FontName get  ",
 " } { ",
 " pop ",
 " pstoedit.lastfindfont ",
 " } ifelse ",
 " }  ",
 " { 53 pscover ",
 " pop pop pop ",
 " pstoedit.lastfindfont ",
 " }  ",
 " ifelse ",
 " }  ",
 " { 54 pscover ",
 " pop ",
 " pstoedit.lastfindfont ",
 " }  ",
 " ifelse ",
 " }  ",
 " def ",
 "  ",
 " /definefont  ",
 " { 55 pscover ",
 " exch  % font key ",
 " dup type /dicttype eq  ",
 " { 56 pscover ",
 " }  ",
 " { 57 pscover ",
 "  ",
 "  ",
 " dup globals100 cvs /pstoedit.currentfontkey exch store ",
 " false ",
 " FontHistory  ",
 " { 58 pscover ",
 " exch pop % remove key ",
 " pstoedit.currentfontkey eq  ",
 " { 59 pscover ",
 " pop true % remove false and push new result ",
 " exit ",
 " }  ",
 " if ",
 " }  ",
 " forall ",
 "  ",
 " { 60 pscover ",
 " verbosemode  ",
 " { 61 pscover ",
 " dup ( second font definition for ) print s100 cvs print ( ignored\\n) print ",
 " }  ",
 " if ",
 " }  ",
 " { 62 pscover ",
 " (\\() -printalways ",
 " dup s100 cvs -printalways ",
 " (\\) cvn) -printalways ",
 " ( /) -printalways  ",
 " exch  ",
 "  ",
 " dup p2egetbasefontname  ",
 "  ",
 " /pstoedit.basefontname exch store ",
 "  ",
 " exch ",
 " pstoedit.basefontname ",
 " s100 cvs -printalways  ",
 "  ",
 " ( pstoedit.newfont\\n) -printalways ",
 " dup FontHistory  ",
 " exch  ",
 "  ",
 "  ",
 " pstoedit.basefontname ",
 " globals100 cvs  ",
 " put ",
 " }  ",
 " ifelse ",
 " }  ",
 " ifelse ",
 " exch ",
 " -definefont ",
 " }  ",
 " overload ",
 "  ",
 " /rootFont  ",
 " { 63 pscover ",
 " dup  ",
 "  ",
 " FontHistory exch known  ",
 " { 64 pscover ",
 " dup dup FontHistory exch get  ",
 " ne  ",
 " { 65 pscover ",
 " FontHistory exch get rootFont  ",
 " }  ",
 " if            ",
 " }  ",
 " if ",
 " }  ",
 " def ",
 "  ",
 "  ",
 " /printTOS  ",
 " { 66 pscover ",
 " ( ) -print s100 cvs -print  ",
 " }  ",
 " def ",
 "  ",
 " /TracePoints  ",
 " { 67 pscover ",
 " -1 1  ",
 " { 68 pscover ",
 " 2 mul -2 roll     % use the loop control variable to roll up a point (x,y) from bottom ",
 " transform  % transform to device coordinates ",
 " matrix defaultmatrix  ",
 " itransform ",
 " exch ",
 " pstoedit.dotrace cvi 1 eq  ",
 " { 69 pscover ",
 " dup dup pstoedit.ll.x cvi -lt  ",
 " { 70 pscover ",
 " pstoedit.bbclear pstoedit.ll.x copy pop 100 -string cvs pstoedit.ll.x copy pop  ",
 " }  ",
 " { 71 pscover ",
 " pop  ",
 " }  ",
 " ifelse ",
 " dup dup pstoedit.ur.x cvi gt  ",
 " { 72 pscover ",
 " pstoedit.bbclear pstoedit.ur.x copy pop 100 -string cvs pstoedit.ur.x copy pop  ",
 " }  ",
 " { 73 pscover ",
 " pop  ",
 " }  ",
 " ifelse ",
 " }  ",
 " if ",
 " pop %printTOS   % the x value ",
 " pstoedit.dotrace cvi 1 eq  ",
 " { 74 pscover ",
 " dup dup pstoedit.ll.y cvi -lt  ",
 " { 75 pscover ",
 " pstoedit.bbclear pstoedit.ll.y copy pop 100 -string cvs pstoedit.ll.y copy pop  ",
 " }  ",
 " { 76 pscover ",
 " pop  ",
 " }  ",
 " ifelse ",
 " dup dup pstoedit.ur.y cvi gt  ",
 " { 77 pscover ",
 " pstoedit.bbclear pstoedit.ur.y copy pop 100 -string cvs pstoedit.ur.y copy pop  ",
 " }  ",
 " { 78 pscover ",
 " pop  ",
 " }  ",
 " ifelse ",
 " }  ",
 " if ",
 " pop %printTOS   % the y value ",
 " }  ",
 " for ",
 " }  ",
 " def ",
 "  ",
 " /prpoints  ",
 " { 79 pscover ",
 " -1 1  ",
 " { 80 pscover ",
 " 2 mul -2 roll     % use the loop control variable to roll up a point (x,y) from bottom ",
 " transform  % transform to device coordinates ",
 " matrix defaultmatrix  ",
 " itransform ",
 " exch ",
 " pstoedit.dotrace cvi 1 eq  ",
 " { 81 pscover ",
 " dup dup pstoedit.ll.x cvi -lt  ",
 " { 82 pscover ",
 " pstoedit.bbclear pstoedit.ll.x copy pop 100 -string cvs pstoedit.ll.x copy pop  ",
 " }  ",
 " { 83 pscover ",
 " pop  ",
 " }  ",
 " ifelse ",
 " dup dup pstoedit.ur.x cvi gt  ",
 " { 84 pscover ",
 " pstoedit.bbclear pstoedit.ur.x copy pop 100 -string cvs pstoedit.ur.x copy pop  ",
 " }  ",
 " { 85 pscover ",
 " pop  ",
 " }  ",
 " ifelse ",
 " }  ",
 " if ",
 " printTOS   % the x value ",
 " pstoedit.dotrace cvi 1 eq  ",
 " { 86 pscover ",
 " dup dup pstoedit.ll.y cvi -lt  ",
 " { 87 pscover ",
 " pstoedit.bbclear pstoedit.ll.y copy pop 100 -string cvs pstoedit.ll.y copy pop  ",
 " }  ",
 " { 88 pscover ",
 " pop  ",
 " }  ",
 " ifelse ",
 " dup dup pstoedit.ur.y cvi gt  ",
 " { 89 pscover ",
 " pstoedit.bbclear pstoedit.ur.y copy pop 100 -string cvs pstoedit.ur.y copy pop  ",
 " }  ",
 " { 90 pscover ",
 " pop  ",
 " }  ",
 " ifelse ",
 " }  ",
 " if ",
 " printTOS   % the y value ",
 "  ",
 " }  ",
 " for ",
 " }  ",
 " def ",
 "  ",
 " /prpointswithtrace  ",
 " { 91 pscover ",
 " 1 1 -string cvs pstoedit.dotrace copy pop ",
 " prpoints ",
 " }  ",
 " def ",
 "  ",
 " /prpointsnotrace  ",
 " { 92 pscover ",
 " 1 1 -string cvs pstoedit.dotrace copy pop ",
 " prpoints ",
 " }  ",
 " def ",
 "  ",
 " /getcurrentscale  ",
 " { 93 pscover ",
 " 100 0 transform % x1' y1' ",
 " /pstoedit.y1 exch store ",
 " /pstoedit.x1 exch store ",
 " 0 0 transform % x2' y2' ",
 " /pstoedit.y2 exch store ",
 " /pstoedit.x2 exch store ",
 " pstoedit.x1 pstoedit.x2 sub dup mul  ",
 " pstoedit.y1 pstoedit.y2 sub dup mul  ",
 " add sqrt ",
 " 100 div abs ",
 " pstoedit.dpiscale div ",
 " }  ",
 " def ",
 "  ",
 " /printstate  ",
 " { 94 pscover ",
 " pstoedit.computeDPIscale  ",
 " -gsave ",
 "  ",
 " pstoedit.deviceinfoshown not  ",
 " { 95 pscover ",
 " /pstoedit.deviceinfoshown true store ",
 " languagelevel 1 gt  ",
 " { 96 pscover ",
 " pstoedit.DEVICEINFO /PageSize known  ",
 " { 97 pscover ",
 " pstoedit.DEVICEINFO /PageSize get ",
 " pstoedit.deviceheight 0.0 ne  ",
 " { 98 pscover ",
 " dup 1 get  ",
 " pstoedit.dpiscale mul  ",
 " /pstoedit.deviceheight exch store ",
 " }  ",
 " if ",
 "  ",
 " { 99 pscover ",
 " printTOS ",
 " }  ",
 " forall ",
 " ( setPageSize\\n) -print ",
 " }  ",
 " if ",
 " }  ",
 " if ",
 " }  ",
 " if ",
 "  ",
 " currentlinecap ",
 " printTOS ",
 " ( setlinecap\\n) -print  ",
 "  ",
 " currentmiterlimit ",
 " printTOS ",
 " ( setmiterlimit\\n) -print  ",
 "  ",
 " currentlinejoin ",
 " printTOS ",
 " ( setlinejoin\\n) -print  ",
 "  ",
 " currentdash ",
 " exch ",
 " ( [) -print ",
 " { 100 pscover ",
 " getcurrentscale mul ",
 " printTOS ",
 " }  ",
 " forall % dump array ",
 " ( ]) -print ",
 " printTOS %index ",
 " ( setdash\\n) -print ",
 "  ",
 " currentlinewidth ",
 " getcurrentscale mul ",
 " printTOS ",
 " ( setlinewidth\\n) -print ",
 "  ",
 " pstoedit.useRGBcolors  ",
 " { 101 pscover ",
 " -currentrgbcolor ",
 " 3 1 roll exch ",
 " printTOS ",
 " printTOS ",
 " printTOS ",
 " ( setrgbcolor\\n) -print ",
 "  ",
 " }  ",
 " { 102 pscover ",
 " -currentcmykcolor	% c m y k ",
 " exch 4 1 roll		% y c m k ",
 " 4 1 roll			% k y c m ",
 " exch				% k y m c ",
 " printTOS  ",
 " printTOS ",
 " printTOS ",
 " printTOS ",
 " ( setcmykcolor\\n) -print ",
 " }  ",
 " ifelse ",
 "  ",
 "  ",
 " -grestore ",
 " }  ",
 " def ",
 "  ",
 " /print-path  ",
 " { 103 pscover ",
 " { 104 pscover ",
 " { 105 pscover ",
 " 1 prpointswithtrace ( moveto\\n)    -print  ",
 " }  ",
 " { 106 pscover ",
 " 1 prpointswithtrace ( lineto\\n)    -print  ",
 " }  ",
 " { 107 pscover ",
 " 3 prpointswithtrace ( curveto\\n)   -print  ",
 " }  ",
 " { 108 pscover ",
 " ( closepath\\n) -print  ",
 " }  ",
 " pathforall ",
 " }  ",
 " stopped  ",
 " { 109 pscover ",
 " }  ",
 " if ",
 " }  ",
 " def ",
 "  ",
 "  ",
 " /dumppath  ",
 " { 110 pscover ",
 " ( \\n) -print ",
 " /pstoedit.dumpstring exch store  % (clip) ",
 " /pstoedit.dumpop exch store  % {clip} ",
 " ( \\n) -print ",
 " (\\%) -print ",
 " /pstoedit.pathnumber pstoedit.pathnumber 1 add store ",
 " pstoedit.pathnumber printTOS ",
 " ( pathnumber\\n) -print ",
 " -print % new place ",
 " printstate ",
 " -gsave ",
 " { 111 pscover ",
 " doflatten  ",
 " { 112 pscover ",
 " flatnesstouse setflat ",
 " flattenpath % replaces curves by lines ",
 " }  ",
 " if ",
 " }  ",
 " stopped  ",
 " { 113 pscover ",
 " -grestore ",
 " -gsave ",
 " }  ",
 " if ",
 "  ",
 " (newpath\\n) -print ",
 " simulateclipping  ",
 " { 114 pscover ",
 " clip clippath  ",
 " }  ",
 " if ",
 " print-path ",
 " pstoedit.dumpstring -print (\\n) -print ",
 " -grestore ",
 " pstoedit.dumpop ",
 " }  ",
 " def ",
 "  ",
 " false % use the clip tracing instead ",
 " { 115 pscover ",
 " /-showclippath  ",
 " { 116 pscover ",
 " -gsave ( gsave \\n) -print   ",
 " clippath clip clippath  ",
 " (% clippath\\n)  ",
 " { 117 pscover ",
 " clip ",
 " }  ",
 " (clip) dumppath  ",
 " -grestore ",
 " }  ",
 " def ",
 "  ",
 " /-endshowclippath  ",
 " { 118 pscover ",
 " (\\ngrestore\\n) -print ",
 " }  ",
 " def ",
 " }  ",
 " { 119 pscover ",
 " /-showclippath  ",
 " { 120 pscover ",
 " }  ",
 " def ",
 " /-endshowclippath  ",
 " { 121 pscover ",
 " }  ",
 " def ",
 " }  ",
 " ifelse ",
 "  ",
 " /charpath  ",
 " { 122 pscover ",
 " /pstoedit.ignoredraw true  store ",
 " -charpath ",
 " /pstoedit.ignoredraw false  store ",
 " }  ",
 " overload ",
 "  ",
 " /stringwidth  ",
 " { 123 pscover ",
 " /pstoedit.ignoredraw true  store ",
 " -stringwidth ",
 " /pstoedit.ignoredraw false  store ",
 " }  ",
 " overload ",
 "  ",
 " /eofill	 ",
 " { 124 pscover ",
 " pstoedit.ignoredraw  ",
 " { 125 pscover ",
 " -eofill ",
 " }  ",
 " { 126 pscover ",
 " -showclippath ",
 " (\\% eofilledpath\\n)  ",
 " { 127 pscover ",
 " -eofill ",
 " }  ",
 " (eofill) dumppath ",
 " -endshowclippath ",
 " }  ",
 " ifelse ",
 " }  ",
 " overload ",
 "  ",
 " /fill  	 ",
 " { 128 pscover ",
 " pstoedit.ignoredraw  ",
 " { 129 pscover ",
 " -fill ",
 " }  ",
 " { 130 pscover ",
 " -showclippath ",
 " (\\% filledpath\\n)  ",
 " { 131 pscover ",
 " -fill ",
 " }  ",
 " (fill) dumppath ",
 " -endshowclippath ",
 " }  ",
 " ifelse ",
 " }  ",
 " overload ",
 "  ",
 " /stroke	 ",
 " { 132 pscover ",
 " pstoedit.ignoredraw  ",
 " { 133 pscover ",
 " -stroke ",
 " }  ",
 " { 134 pscover ",
 " -showclippath ",
 " (\\% strokedpath\\n)  ",
 " { 135 pscover ",
 " -stroke ",
 " }  ",
 " (stroke) dumppath ",
 " -endshowclippath ",
 " }  ",
 " ifelse ",
 " }  ",
 " overload ",
 "  ",
 " /pstoeditdummystroke  ",
 " { 136 pscover ",
 " pstoedit.ignoredraw  ",
 " { 137 pscover ",
 " -stroke ",
 " }  ",
 " { 138 pscover ",
 " (\\% dummystrokedpath\\n)  ",
 " { 139 pscover ",
 " newpath ",
 " }  ",
 " (pstoeditdummystroke) dumppath ",
 " }  ",
 " ifelse ",
 " }  ",
 " def ",
 "  ",
 " /pstoeditdummystrokewithoutput	 ",
 " { 140 pscover ",
 " { 141 pscover ",
 " { 142 pscover ",
 " 1 TracePoints   ",
 " }  ",
 " { 143 pscover ",
 " 1 TracePoints   ",
 " }  ",
 " { 144 pscover ",
 " 3 TracePoints   ",
 " }  ",
 " { 145 pscover ",
 " }  ",
 " pathforall ",
 " }  ",
 " stopped  ",
 " { 146 pscover ",
 " }  ",
 " if ",
 " }  ",
 " def ",
 "  ",
 " /pstoedit.forcedrawtext  ",
 " { 147 pscover ",
 " currentfont begin ",
 " /FontName where  ",
 " { 148 pscover ",
 " pop % the dict ",
 " FontName 100 -string cvs % FontName is a name or is already a string ",
 " cvn dup  ",
 "  ",
 " /pstoedit.knownFontNames where  ",
 " { 149 pscover ",
 " pop % the dict ",
 " pstoedit.knownFontNames exch known  ",
 " { 150 pscover ",
 " pop ",
 " false % don't force drawing mode ",
 " }  ",
 " { 151 pscover ",
 " rootFont  ",
 " pstoedit.knownFontNames exch known  ",
 " { 152 pscover ",
 " false % don't force drawing mode ",
 " }  ",
 " { 153 pscover ",
 " true ",
 " }  ",
 " ifelse ",
 " }  ",
 " ifelse ",
 " }  ",
 " { 154 pscover ",
 " pop pop ",
 " false % if pstoedit.knownFontNames is not defined, 'show' text ",
 " }  ",
 " ifelse ",
 " }  ",
 " { 155 pscover ",
 " true % if FontName is not known ",
 " }  ",
 " ifelse  ",
 " end ",
 "  ",
 " CheckForTextFont not ",
 " autodrawtext   % wenn no text font and autodraw = true, dann male den font  ",
 " and ",
 "  ",
 " or  ",
 "  ",
 " }  ",
 " def ",
 "  ",
 "  ",
 "  ",
 "  ",
 " /getorigfont  ",
 " { 156 pscover ",
 " dup /OrigFont known ",
 " { 157 pscover ",
 " /OrigFont get getorigfont  ",
 " }  ",
 " if ",
 " }  ",
 " def ",
 "  ",
 " /isKnownFontName  ",
 " { 158 pscover ",
 " /Fontmap where  ",
 " { 159 pscover ",
 " pop % the dict from where ",
 " dup % for second check ",
 " Fontmap exch known ",
 " }  ",
 " { 160 pscover ",
 " false % nothing found so far ",
 " }  ",
 " ifelse ",
 "  ",
 " { 161 pscover ",
 " pop % the fontname ",
 " true % just repush true ",
 " }  ",
 " { 162 pscover ",
 " /pstoedit.knownFontNames where  ",
 " { 163 pscover ",
 " pop % the dict from where ",
 " pstoedit.knownFontNames exch known ",
 " }  ",
 " { 164 pscover ",
 " pop % the fontname ",
 " false % nothing found so far ",
 " }  ",
 " ifelse ",
 " }  ",
 " ifelse ",
 " }  ",
 " def  ",
 "  ",
 " /effectiveawidthshow  ",
 " { 165 pscover ",
 " /pstoedit.ignoreimage true  store %ignore all image* ops called from here ",
 " ( \\n) -print ",
 " printstate ",
 " /pstoedit.currentstring exch store ",
 " 5 copy % save for real operator ",
 " -gsave ",
 "  ",
 "  ",
 " textastext 			% text shall be shown as text and ",
 "  ",
 " currentfont /FontType get 1 eq 	% current font is type 1 ",
 " t2fontsast1 % we cannot do this all times - at least up to gs6.0 this sometimes leads ",
 " currentfont /FontType get 2 eq 	% current font is type 2 (embedded reduced type 1) ",
 " and ",
 " or ",
 " currentfont /FontType get 42 eq % current font is type 42 (TT) ",
 " or ",
 " pstoedit.forcedrawtext not	% and not forced draw due to font restrictions ",
 " and ",
 "  ",
 " currentfont /FontType get 3 eq 	% current font is type 3 ",
 " currentfont /BitMaps known   	% and contains a BitMaps entry (as dvips provides) ",
 " and				% Bitmap fonts cannot be \"drawn\", anyway ",
 "  ",
 " or				% (T1 or T2 or T42 and not force)  or (t3 and Bitmap) ",
 "  ",
 " and				% textastext ",
 "  ",
 "  ",
 " dup /pstoedit.textshown exch store % ",
 " { 166 pscover ",
 "  ",
 " currentfont begin ",
 " /FontName where  ",
 " { 167 pscover ",
 " pop FontName  ",
 " pstoedit.checkfontnames  ",
 " { 168 pscover ",
 " dup  ",
 " isKnownFontName   ",
 " }  ",
 " { 169 pscover ",
 " true ",
 " }  ",
 " ifelse ",
 " { 170 pscover ",
 " 100 -string cvs % FontName is a name or is already a string ",
 " }  ",
 " { 171 pscover ",
 " 100 -string cvs % FontName is a name or is already a string ",
 " dup ",
 "  ",
 " cvn ",
 " rootFont  ",
 " (\\% ) -print ",
 " s100 cvs -print ( ) -print dup -print  ",
 " ( nonstandard font\\n) -print ",
 " }  ",
 " ifelse ",
 " /pstoedit.replacedfont false store   ",
 " }  ",
 " { 172 pscover ",
 " replacementfont ",
 " /pstoedit.replacedfont true  store   ",
 " }  ",
 " ifelse  ",
 " (\\() -print ",
 " -print ",
 " (\\) cvn) -print ",
 " end ",
 " ( findfont ) -print ",
 "  ",
 "  ",
 " pstoedit.replacedfont  ",
 " { 173 pscover ",
 " pstoedit.currentstring -stringwidth ",
 " dtransform ",
 " dup mul exch dup mul add sqrt ",
 "  ",
 " -gsave ",
 " replacementfont cvn findfont 10 scalefont setfont ",
 " pstoedit.currentstring normalizestring -stringwidth  ",
 " dtransform ",
 " dup mul exch dup mul add sqrt ",
 " -grestore ",
 "  ",
 " div 10 mul getcurrentscale mul  ",
 " scalefontversion  ",
 " { 174 pscover ",
 " s100 cvs -print ( scalefont setfont\\n) -print ",
 " }  ",
 " { 175 pscover ",
 " ([ ) -print dup printTOS 0 printTOS 0 printTOS printTOS  ",
 " -gsave ",
 " currentpoint translate ",
 " currentfont /FontMatrix get -concat 0 0 transform ",
 " -grestore ",
 " itransform ",
 " 1 prpointsnotrace ",
 " ( ] makefont setfont\\n) -print ",
 " }  ",
 " ifelse ",
 " }  ",
 " { 176 pscover ",
 " currentfont begin ",
 " currentfont /FontType get 42 eq  ",
 " { 177 pscover ",
 " /pstoedit.fontunit 1 store ",
 " }  ",
 " { 178 pscover ",
 " /pstoedit.fontunit 1000 store ",
 " }  ",
 " ifelse ",
 "  ",
 " scalefontversion %wogl ",
 " { 179 pscover ",
 " FontMatrix 0 get % get the x-scale of the font matrix ",
 " 0 ",
 " dtransform ",
 " dup mul exch dup mul add sqrt ",
 " pstoedit.fontunit mul  ",
 " pstoedit.dpiscale div ",
 " s100 cvs -print ( scalefont setfont\\n) -print ",
 " }  ",
 " { 180 pscover ",
 " -gsave ",
 " currentpoint translate ",
 " currentfont /FontMatrix get -concat ",
 " currentfont getorigfont /FontMatrix get  matrix invertmatrix -concat ",
 " matrix currentmatrix matrix defaultmatrix matrix invertmatrix matrix concatmatrix ",
 " -grestore ",
 " ([ ) -print  ",
 " { 181 pscover ",
 " printTOS  ",
 " }  ",
 " forall ( ] makefont setfont\\n) -print ",
 " }  ",
 " ifelse ",
 "  ",
 " end ",
 " }  ",
 " ifelse ",
 "  ",
 "  ",
 " currentfont begin ",
 " /FontInfo where  ",
 " { 182 pscover ",
 " pop  ",
 " FontInfo /FamilyName known  ",
 " { 183 pscover ",
 " FontInfo /FamilyName get 100 -string cvs ",
 " }  ",
 " { 184 pscover ",
 " (unknown)  ",
 " }  ",
 " ifelse ",
 " (\\% ) -print -print  ( FamilyName\\n) -print ",
 " FontInfo /FullName   known  ",
 " { 185 pscover ",
 " FontInfo /FullName get 100 -string cvs ",
 " }  ",
 " { 186 pscover ",
 " (unknown)  ",
 " }  ",
 " ifelse    ",
 " (\\% ) -print -print  ( FullName\\n) -print ",
 " FontInfo /Weight     known  ",
 " { 187 pscover ",
 " FontInfo /Weight get 100 -string cvs ",
 " }  ",
 " { 188 pscover ",
 " (unknown)  ",
 " }  ",
 " ifelse ",
 " (\\% ) -print -print  ( Weight\\n) -print ",
 " }  ",
 " if ",
 " end ",
 "  ",
 " scalefontversion  ",
 " { 189 pscover ",
 " /pstoedit.angle 1 0 dtransform exch atan -1 mul 360 add store ",
 " languagelevel 1 gt  ",
 " { 190 pscover ",
 " pstoedit.DEVICEINFO dup /Orientation known  ",
 " { 191 pscover ",
 " /Orientation get  ",
 " -90 mul pstoedit.angle add /pstoedit.angle exch store  ",
 " pstoedit.angle 0 -lt  ",
 " { 192 pscover ",
 " pstoedit.angle 360 add /pstoedit.angle exch store  ",
 " }  ",
 " if ",
 " }  ",
 " { 193 pscover ",
 " pop % the duped DEVICEINFO ",
 " }  ",
 " ifelse ",
 " }  ",
 " if ",
 "  ",
 " -gsave ",
 " currentpoint translate ",
 " currentfont /FontMatrix get -concat 0 0 transform ",
 " -grestore  ",
 " itransform ",
 " /pstoedit.y exch store /pstoedit.x exch store ",
 " pstoedit.x pstoedit.y 1 prpointswithtrace ( moveto\\n)    -print ",
 " pstoedit.angle 360.0 ne  ",
 " { 194 pscover ",
 " pstoedit.x pstoedit.y 1 prpointswithtrace ( translate\\n) -print ",
 " ( ) -print ",
 " pstoedit.angle s100 cvs -print ( rotate\\n) -print ",
 " }  ",
 " { 195 pscover ",
 " ( ) -print ",
 " 0             s100 cvs -print ( rotate\\n) -print ",
 " }  ",
 " ifelse ",
 " }  ",
 " { 196 pscover ",
 " (  0 0 moveto\\n)    -print ",
 " }  ",
 " ifelse  ",
 " getcurrentscale dup /pstoedit.currentscale exch store ",
 " mul ",
 " exch ",
 " pstoedit.currentscale mul ",
 " 5 -2 roll  ",
 " pstoedit.currentscale mul ",
 " exch ",
 " pstoedit.currentscale mul ",
 " printTOS printTOS % c ",
 " 3 -1 roll ",
 " printTOS	% char ",
 " printTOS printTOS % a ",
 "  ",
 " }  ",
 " { 197 pscover ",
 " pop pop pop pop pop ",
 " -gsave ",
 " currentpoint ",
 " newpath ",
 "  ",
 " moveto ",
 " pstoedit.currentstring ",
 " true charpath  ",
 " eofill  ",
 " -grestore ",
 " }  ",
 " ifelse ",
 " -grestore ",
 " pstoedit.currentstring ",
 " /pstoedit.ignoredraw true  store ",
 " -awidthshow ",
 " /pstoedit.ignoredraw false store ",
 " /pstoedit.ignoreimage false store  ",
 "  ",
 "  ",
 " pstoedit.textshown ",
 " { 198 pscover ",
 " -gsave ",
 " currentpoint translate ",
 " currentfont /FontMatrix get -concat 0 0 transform ",
 " -grestore  ",
 " itransform ",
 " 1 prpointswithtrace ",
 " currentfont /Encoding get 65 get /A eq maptoisolatin1 and  ",
 " { 199 pscover ",
 " ( 1 ) ",
 " }  ",
 " { 200 pscover ",
 " ( 0 )  ",
 " }  ",
 " ifelse -print ",
 " ( setshowparams\\n) -print ",
 " CheckForTextFont pop % we don't need the result here ",
 "  ",
 "  ",
 " pstoedit.ashexstring  ",
 " { 201 pscover ",
 " (\\() -print ",
 " pstoedit.currentstring -printhex ",
 " (\\) awidthshowhex\\n) -print ",
 " }  ",
 " { 202 pscover ",
 " (\\() -print ",
 " escapetext ",
 " { 203 pscover ",
 " pstoedit.currentstring  ",
 " { 204 pscover ",
 " inttosinglechar ",
 "  ",
 " dup dup (\\r) eq exch (\\n) eq or ",
 " { 205 pscover ",
 " pop  ",
 " }  ",
 " { 206 pscover ",
 " normalizecharacter	 ",
 " dup (\\() eq  ",
 " { 207 pscover ",
 " (\\\\) -print  ",
 " }  ",
 " if ",
 " dup (\\)) eq  ",
 " { 208 pscover ",
 " (\\\\) -print  ",
 " }  ",
 " if ",
 " dup (\\\\) eq  ",
 " { 209 pscover ",
 " (\\\\) -print  ",
 " }  ",
 " if ",
 " -print  ",
 " }  ",
 " ifelse ",
 " }  ",
 " forall ",
 " }  ",
 " { 210 pscover ",
 " pstoedit.currentstring  ",
 " { 211 pscover ",
 " inttosinglechar ",
 " dup dup (\\r) eq exch (\\n) eq or ",
 " { 212 pscover ",
 " pop  ",
 " }  ",
 " { 213 pscover ",
 " normalizecharacter ",
 " -print  ",
 " }  ",
 " ifelse ",
 " }  ",
 " forall ",
 " }  ",
 " ifelse ",
 " (\\) awidthshow\\n) -print ",
 " }  ",
 " ifelse ",
 " scalefontversion  ",
 " { 214 pscover ",
 " pstoedit.angle 360.0 ne  ",
 " { 215 pscover ",
 " ( ) -print ",
 " pstoedit.angle neg s100 cvs -print ( rotate\\n) -print ",
 " pstoedit.x pstoedit.y 1 prpointswithtrace ",
 " ( ntranslate\\n) -print ",
 " }  ",
 " if ",
 " }  ",
 " if ",
 " }  ",
 " if ",
 " }  ",
 " def ",
 "  ",
 " /precisionshowchar  ",
 " { 216 pscover ",
 " 0 0 32 0 0   6 -1 roll effectiveawidthshow  ",
 " }  ",
 " def ",
 " /pstoedit.showcharacter ( ) def % needed because forall in awidthshow gives ints, but show needs char ",
 "  ",
 " /awidthshow  ",
 " { 217 pscover ",
 " -showclippath ",
 " precisiontext 0 eq   % no precision text    		% cx cy char ax ay string b1 ",
 " precisiontext 1 eq   % pti and cx cy ax ay are all 0	% cx cy char ax ay string b1 b2 ",
 " 7 index 0 eq 						% cx cy char ax ay string b1 b2 b3 ",
 " 7 index 0 eq 						% cx cy char ax ay string b1 b2 b3 b4 ",
 " and						% cx cy char ax ay string b1 b2 b3*b4 ",
 " 5 index 0 eq 						% cx cy char ax ay string b1 b2 b3*b4 b5 ",
 " 5 index 0 eq 						% cx cy char ax ay string b1 b2 b3*b4 b5 b6 ",
 " and 						% cx cy char ax ay string b1 b2 b3*b4 b5*b6 ",
 " and 						% cx cy char ax ay string b1 b2 b3*b4*b5*b6 ",
 " and 						% cx cy char ax ay string b1 b2*b3*b4*b5*b6 ",
 " or 						% cx cy char ax ay string b1+b2*b3*b4*b5*b6 ",
 " { 218 pscover ",
 " effectiveawidthshow  ",
 " }  ",
 " { 219 pscover ",
 " { 220 pscover ",
 " dup  ",
 " pstoedit.showcharacter exch 0 exch put % convert int to char ",
 " pstoedit.showcharacter precisionshowchar  ",
 " 3 index  % (compare :) pstack pop % wogldebug  ",
 " eq  ",
 " { 221 pscover ",
 " 4 index 4 index  ",
 " rmoveto  ",
 " }  ",
 " if ",
 " 2 copy rmoveto ",
 " }  ",
 " forall ",
 " pop pop pop pop pop ",
 " }  ",
 " ifelse ",
 " -endshowclippath ",
 " }  ",
 " overload ",
 "  ",
 " /widthshow   ",
 " { 222 pscover ",
 " 0 exch 0 exch awidthshow  ",
 " }  ",
 " overload ",
 " /ashow       ",
 " { 223 pscover ",
 " 0 0 32  ",
 " 6 3 roll awidthshow  ",
 " }  ",
 " overload ",
 " /show	     ",
 " { 224 pscover ",
 " 0 0 32 0 0   6 -1 roll awidthshow  ",
 " }  ",
 " overload ",
 " /pstoedit.kshowproc  ",
 " { 225 pscover ",
 " }  ",
 " store ",
 " /pstoedit.kshowclast 1  store ",
 " /kshow   ",
 " { 226 pscover ",
 " exch /pstoedit.kshowproc exch store  ",
 " dup length 0 gt  ",
 " { 227 pscover ",
 " true  % for first ",
 " exch ",
 "  ",
 " { 228 pscover ",
 " exch ",
 " { 229 pscover ",
 " dup /pstoedit.kshowclast exch store ",
 " inttosinglechar ",
 " show ",
 " pstoedit.kshowclast ",
 " false ",
 " }  ",
 " { 230 pscover ",
 " dup /pstoedit.kshowclast exch store ",
 " pstoedit.kshowproc ",
 " pstoedit.kshowclast inttosinglechar ",
 " show ",
 " pstoedit.kshowclast ",
 " false ",
 " }  ",
 " ifelse ",
 " }  ",
 " forall ",
 " pop pop % char and first ",
 " }  ",
 " { 231 pscover ",
 " (Warning: ignoring kshow for empty string\\n) print ",
 " pop % pstoedit.kshowproc % just pop the empty string ",
 " }  ",
 " ifelse ",
 " }  ",
 " overload ",
 "  ",
 " /pstoedit.xyshowindex 0  store ",
 " /pstoedit.xyshowarray [ 0 ]  store ",
 "  ",
 " /xshow  ",
 " { 232 pscover ",
 " dup type /arraytype eq  ",
 " { 233 pscover ",
 " /pstoedit.xyshowarray exch store ",
 " /pstoedit.xyshowindex 0  store ",
 " { 234 pscover ",
 " currentpoint ",
 " 3 -1 roll ",
 " inttosinglechar ",
 " show ",
 " exch ",
 " pstoedit.xyshowarray pstoedit.xyshowindex get add exch ",
 " moveto ",
 " /pstoedit.xyshowindex pstoedit.xyshowindex 1 add store ",
 " }  ",
 " forall ",
 " }  ",
 " { 235 pscover ",
 " pop show ",
 " }  ",
 " ifelse ",
 " }  ",
 " overload ",
 " /yshow  ",
 " { 236 pscover ",
 " dup type /arraytype eq  ",
 " { 237 pscover ",
 " /pstoedit.xyshowarray exch store ",
 " /pstoedit.xyshowindex 0  store ",
 " { 238 pscover ",
 " currentpoint ",
 " 3 -1 roll ",
 " inttosinglechar ",
 " show ",
 " pstoedit.xyshowarray pstoedit.xyshowindex get add  ",
 " moveto ",
 " /pstoedit.xyshowindex pstoedit.xyshowindex 1 add store ",
 " }  ",
 " forall ",
 " }  ",
 " { 239 pscover ",
 " pop show ",
 " }  ",
 " ifelse ",
 " }  ",
 " overload ",
 " /xyshow  ",
 " { 240 pscover ",
 " dup type /arraytype eq  ",
 " { 241 pscover ",
 " /pstoedit.xyshowarray exch store ",
 " /pstoedit.xyshowindex 0  store ",
 " { 242 pscover ",
 " currentpoint ",
 " 3 -1 roll ",
 " inttosinglechar ",
 " show ",
 " pstoedit.xyshowarray pstoedit.xyshowindex 1 add get add exch ",
 " pstoedit.xyshowarray pstoedit.xyshowindex get add exch ",
 " moveto ",
 " /pstoedit.xyshowindex pstoedit.xyshowindex 2 add store ",
 " }  ",
 " forall ",
 " }  ",
 " { 243 pscover ",
 " pop show ",
 " }  ",
 " ifelse ",
 " }  ",
 " overload ",
 "  ",
 " /glyphshow  ",
 " { 244 pscover ",
 " getglyphaschar show ",
 " }  ",
 " overload ",
 "  ",
 " /showpage  ",
 " { 245 pscover ",
 " (showpage\\n) -print ",
 " -showpage ",
 " pagetoextract pstoedit.pagenr cvi eq  ",
 "  ",
 " true  ",
 " { 246 pscover ",
 "  ",
 " (\\%\\%BoundingBox: ) -printNC % ",
 " pstoedit.ll.x  cvi 100 -string cvs -printNC ( ) -printNC ",
 " pstoedit.ll.y  cvi 100 -string cvs -printNC ( ) -printNC ",
 " pstoedit.ur.x  cvi 100 -string cvs -printNC ( ) -printNC ",
 " pstoedit.ur.y  cvi 100 -string cvs -printNC ( \\n) -printNC  ",
 " }  ",
 " if ",
 "  ",
 " (\\%\\%Page: ) -printNC  ",
 " pstoedit.pagenr cvi 100 -string cvs  ",
 " dup -printNC  ",
 " ( ) -printNC  ",
 " -printNC  ",
 " (\\n) -printNC ",
 "  ",
 "  ",
 " pstoedit.pagenr cvi 1 add 100 -string cvs pstoedit.pagenr copy pop  ",
 "  ",
 " verbosemode  ",
 " { 247 pscover ",
 " ([) print pstoedit.pagenr cvi 100 -string cvs print (]) print  ",
 " }  ",
 " if ",
 "  ",
 "  ",
 " { 248 pscover ",
 " pstoedit.quit ",
 " }  ",
 " if ",
 "  ",
 " pstoedit.ll.x    (999999            ) exch copy pop ",
 " pstoedit.ll.y    (999999            ) exch copy pop ",
 " pstoedit.ur.x    (0                 ) exch copy pop ",
 " pstoedit.ur.y    (0                 ) exch copy pop ",
 " pstoedit.bbclear (                  ) exch copy pop ",
 " 0 1 -string cvs pstoedit.somethingprinted copy pop % reset ",
 " }  ",
 " soverload ",
 "  ",
 " /copypage  ",
 " { 249 pscover ",
 " 	(copypage is beeing handled as showpage. This may lead to different results if copypage was used to overlay multiple pages to one\n) true printwarning ",
 " showpage ",
 " }  ",
 " soverload ",
 "  ",
 " withimages  ",
 " { 250 pscover ",
 " /pstoedit.image.ncomp   0 store ",
 " /pstoedit.image.nrds   0 store % number of data sources ",
 " /pstoedit.image.multi   0 store ",
 " /pstoedit.image.datasrc 0 store ",
 " /pstoedit.image.mat	  0 store ",
 " /pstoedit.image.bits    0 store ",
 " /pstoedit.image.decode  0 store ",
 " /pstoedit.image.height  0 store ",
 " /pstoedit.image.width   0 store  ",
 " /pstoedit.image.fourthparam 0 store ",
 " /pstoedit.image.procname 0 store ",
 " /pstoedit.image.isfile  true store ",
 " /pstoedit.image.stringprefix 0 store ",
 " /pstoedit.image.realproc 0 store ",
 " /pstoedit.image.nr (0                 ) store ",
 " /pstoedit.image.filesuffix (                  ) store ",
 " /pstoedit.image.isimagemask true store % f for image - t for mask ",
 " /pstoedit.image.outputfile 1000 -string store ",
 " /pstoedit.imagestring 1 -string def ",
 "  ",
 " /printdumponly  ",
 " { 251 pscover ",
 " escapetext  ",
 " { 252 pscover ",
 " pop  ",
 " }  ",
 " { 253 pscover ",
 " -print  ",
 " }  ",
 " ifelse ",
 " }  ",
 " def ",
 "  ",
 " /ImageTraceBoundingBox  ",
 " { 254 pscover ",
 " -gsave ",
 " newpath ",
 " 0 0 moveto ",
 " 1 0 lineto ",
 " 1 1 lineto ",
 " 0 1 lineto ",
 " closepath ",
 " pstoeditdummystrokewithoutput ",
 " -grestore ",
 " }  ",
 " def ",
 "  ",
 " backendSupportsPNGFileImages  ",
 " { 255 pscover ",
 " /pstoedit.image.PNGimageproc 0 store ",
 " /processAsPNGimage  ",
 " { 256 pscover ",
 " verbosemode  ",
 " { 257 pscover ",
 " (vor processAsPNGImage ) pstack pop ",
 " }  ",
 " if ",
 " /pstoedit.image.filesuffix exch store  ",
 " /pstoedit.image.PNGimageproc exch store ",
 "  ",
 " pstoedit.image.nr cvi 1 add 100 -string cvs pstoedit.image.nr copy pop ",
 "  ",
 " /pstoedit.image.outputfile pstoedit.nameOfOutputFilewithoutpercentD  ",
 " pstoedit.image.filesuffix   %(_mdsi)  ",
 " concatstrings  ",
 " pstoedit.image.nr cvi 20 -string cvs concatstrings (.png) concatstrings store ",
 "  ",
 " /pstoedit.image.stringprefix (%pngfileimage:) store ",
 "  ",
 " escapetext not  ",
 " { 258 pscover ",
 " (\\%pngfileimage:begin\\n) -print ",
 "  ",
 " -gsave ",
 " pstoedit.image.mat matrix invertmatrix concat ",
 " matrix currentmatrix matrix defaultmatrix matrix invertmatrix matrix concatmatrix ",
 " (% DC ) -print  ",
 " { 259 pscover ",
 " printTOS  ",
 " }  ",
 " forall (\\n) -print ",
 " pstoedit.image.stringprefix printdumponly (normalized image currentmatrix\\n) printdumponly   ",
 " -grestore ",
 "  ",
 " (% DC ) -print pstoedit.image.mat   ",
 " { 260 pscover ",
 " printTOS  ",
 " }  ",
 " forall (\\n) -print ",
 " pstoedit.image.stringprefix -print (imagematrix\\n) -print ",
 " pstoedit.image.stringprefix -print (filename ) -print ",
 " pstoedit.image.outputfile -print  (\\n) -print ",
 "  ",
 " (% DC ) printdumponly pstoedit.image.width  printTOS (\\n) -print ",
 " pstoedit.image.stringprefix printdumponly  ",
 " (width\\n) printdumponly  ",
 " (% DC ) printdumponly pstoedit.image.height printTOS (\\n) -print ",
 " pstoedit.image.stringprefix printdumponly  ",
 " (height\\n) printdumponly  ",
 " (\\%pngfileimage:end\\n) -print ",
 " }  ",
 " if ",
 " gsave ",
 " true ",
 " { 261 pscover ",
 " mark ",
 " /OutputFile pstoedit.image.outputfile ",
 " verbosemode  ",
 " { 262 pscover ",
 " (opening image file:) print ",
 " pstoedit.image.outputfile print (\\n) print ",
 " }  ",
 " if ",
 " /HWResolution [ 72 72 ] ",
 " /PageSize [ pstoedit.image.width pstoedit.image.height ] ",
 " (png16m) ",
 " finddevice  ",
 " putdeviceprops ",
 " setdevice ",
 " }  ",
 " if ",
 "  ",
 " false  ",
 " { 263 pscover ",
 " (png16m) ",
 " finddevice  ",
 " setdevice ",
 " << ",
 " /OutputFile pstoedit.image.outputfile ",
 " /HWResolution [ 72 72 ] ",
 " /PageSize [ pstoedit.image.width pstoedit.image.height ] ",
 " >> ",
 " setpagedevice ",
 " }  ",
 " if ",
 "  ",
 "  ",
 "  ",
 " pstoedit.image.mat 3 get 0 -lt  ",
 " { 264 pscover ",
 " pstoedit.image.mat 5 get 0 eq  ",
 " { 265 pscover ",
 " (Info: correcting image matrix - didn't follow PS conventions\\n) print ",
 " pstoedit.image.mat 5 pstoedit.image.mat 3 get -1 mul put ",
 " }  ",
 " if ",
 " }  ",
 " if ",
 "  ",
 "  ",
 "  ",
 " pstoedit.image.mat concat  1  -1 scale 0 -1  translate    ",
 "  ",
 "  ",
 " verbosemode  ",
 " { 266 pscover ",
 " (vor pstoedit.image.PNGimageproc ) pstack pop ",
 " }  ",
 " if ",
 "  ",
 " pstoedit.image.PNGimageproc %wogl -colorimage ",
 "  ",
 "  ",
 " verbosemode  ",
 " { 267 pscover ",
 " (nach pstoedit.image.PNGimageproc ) pstack pop ",
 " }  ",
 " if ",
 "  ",
 "  ",
 "  ",
 " 0 .endpage .doneshowpage 1 true .outputpage pop ",
 "  ",
 " -grestore  %% Hier wird offenbar das gerestore mit output aufgerufen. Wieso ist unklar. ",
 "  ",
 " verbosemode  ",
 " { 268 pscover ",
 " (%end dealing with PNG image \\n)  print  ",
 " }  ",
 " if ",
 " }  ",
 " def ",
 " }  ",
 " if ",
 "  ",
 "  ",
 " /colorimage  ",
 " { 269 pscover ",
 " pstoedit.ignoredraw pstoedit.ignoreimage or  ",
 " pstoedit.DEVICEINFO /HWResolution known not or  ",
 " { 270 pscover ",
 " -colorimage ",
 " }  ",
 " { 271 pscover ",
 " backendSupportsPNGFileImages  ",
 " { 272 pscover ",
 " ImageTraceBoundingBox ",
 " -showclippath ",
 "  ",
 "  ",
 "  ",
 " /pstoedit.image.ncomp exch store ",
 " /pstoedit.image.multi exch store ",
 " pstoedit.image.multi  ",
 " { 273 pscover ",
 " pstoedit.image.ncomp ",
 " }  ",
 " { 274 pscover ",
 " 1 ",
 " }  ",
 " ifelse ",
 " /pstoedit.image.nrds  exch store ",
 "  ",
 " pstoedit.image.nrds 4 add pstoedit.image.nrds roll ",
 "  ",
 " /pstoedit.image.mat		exch store ",
 " /pstoedit.image.bits	exch store ",
 " /pstoedit.image.height	exch store ",
 " /pstoedit.image.width	exch store ",
 "  ",
 "  ",
 " pstoedit.image.width pstoedit.image.height pstoedit.image.bits pstoedit.image.mat ",
 " pstoedit.image.nrds 4 add 4 roll ",
 " pstoedit.image.multi pstoedit.image.ncomp  ",
 "  ",
 "  ",
 " { %nc  ",
 " -colorimage  ",
 " }  ",
 " (_cim) % color image ",
 " processAsPNGimage ",
 "  ",
 " }  ",
 " { 275 pscover ",
 " exch dup  ",
 " { 276 pscover ",
 " 					(colorimage with more than one datasrc not supported for this backend due to lack of support for PNG files\n) true printwarning ",
 " exch -colorimage ",
 " }  ",
 " { 277 pscover ",
 " ImageTraceBoundingBox ",
 " -showclippath ",
 " escapetext  ",
 " { 278 pscover ",
 " (gsave\\n)  -print   ",
 " }  ",
 " { 279 pscover ",
 " (\\%colorimage:begin\\n) -print  ",
 " }  ",
 " ifelse ",
 "  ",
 " exch ",
 " /pstoedit.image.ncomp   exch store ",
 " /pstoedit.image.multi   exch store ",
 " /pstoedit.image.datasrc exch store ",
 " /pstoedit.image.mat	  exch store ",
 "  ",
 "  ",
 "  ",
 "  ",
 " /pstoedit.image.bits    exch store ",
 " /pstoedit.image.height  exch store ",
 " /pstoedit.image.width   exch store  ",
 "  ",
 " (% DC ) printdumponly pstoedit.image.width  printTOS (\\n) -print ",
 " (\\%colorimage:width\\n) printdumponly  ",
 " (% DC ) printdumponly pstoedit.image.height printTOS (\\n) -print ",
 " (\\%colorimage:height\\n) printdumponly  ",
 " (% DC ) printdumponly pstoedit.image.bits   printTOS (\\n) -print ",
 " (\\%colorimage:bits\\n) printdumponly  ",
 " escapetext not  ",
 " { 280 pscover ",
 " (% DC ) -print pstoedit.image.mat  ",
 " { 281 pscover ",
 " printTOS  ",
 " }  ",
 " forall (\\n) -print ",
 " (\\%colorimage:imagematrix\\n) -print  ",
 " }  ",
 " if ",
 "  ",
 " -gsave ",
 " pstoedit.image.mat matrix invertmatrix concat ",
 " matrix currentmatrix matrix defaultmatrix matrix invertmatrix matrix concatmatrix ",
 " escapetext  ",
 " { 282 pscover ",
 " ([ ) -print  ",
 " }  ",
 " { 283 pscover ",
 " (% DC ) -print  ",
 " }  ",
 " ifelse  ",
 " { 284 pscover ",
 " printTOS  ",
 " }  ",
 " forall  ",
 " escapetext  ",
 " { 285 pscover ",
 " (]  concat [ 1 0 0 1 0 0 ] ) -print  ",
 " }  ",
 " if ",
 " (\\n) -print ",
 " (\\%colorimage:normalized image currentmatrix\\n) printdumponly   ",
 " -grestore ",
 "  ",
 " escapetext  ",
 " { 286 pscover ",
 " ({ currentfile imagestring readhexstring pop }\\n)  -print  ",
 " }  ",
 " if ",
 " (% DC ) printdumponly  pstoedit.image.multi   printTOS (\\n) -print ",
 " (\\%colorimage:multi\\n) printdumponly  ",
 " (% DC ) printdumponly pstoedit.image.ncomp   printTOS (\\n) -print ",
 " (\\%colorimage:ncomp\\n) printdumponly ",
 " escapetext  ",
 " { 287 pscover ",
 " (colorimage\\n) -print  ",
 " }  ",
 " if ",
 " pstoedit.image.width pstoedit.image.height pstoedit.image.bits pstoedit.image.mat  ",
 " { 288 pscover ",
 " pstoedit.image.datasrc  ",
 " dup type /filetype eq  ",
 " { 289 pscover ",
 " read % returns: int bool ",
 " { 290 pscover ",
 " pstoedit.imagestring exch 0 exch put pstoedit.imagestring ",
 " }  ",
 " { 291 pscover ",
 " 0 -string % return 0 string if eof is found ",
 " }  ",
 " ifelse ",
 " }  ",
 " if ",
 "  ",
 " (\\%colorimage:data ) printdumponly  ",
 " dup  ",
 " { 292 pscover ",
 " dup 16 -lt  ",
 " { 293 pscover ",
 " (0) -print  ",
 " }  ",
 " if ",
 " 16 2 -string cvrs -print  ",
 " }  ",
 " forall ",
 " (\\n) -print  ",
 " }  ",
 " pstoedit.image.multi pstoedit.image.ncomp -colorimage ",
 " escapetext  ",
 " { 294 pscover ",
 " (grestore\\n)  -print   ",
 " }  ",
 " { 295 pscover ",
 " (\\%colorimage:end\\n) -print  ",
 " }  ",
 " ifelse ",
 " }  ",
 " ifelse ",
 " }  ",
 " ifelse % PNG support ",
 " -endshowclippath ",
 " }  ",
 " ifelse % ignoredraw ",
 " }  ",
 " soverload ",
 "  ",
 "  ",
 " /ImageAndImagemaskdummy ",
 " { 296 pscover ",
 " (executing dummy ImageAndImagemask \\n) print ",
 " /pstoedit.ignoredraw true  store ",
 " pop pop pop %pop ",
 " 2781 pscover ",
 " pstack ",
 " exec % -image ",
 " 2782 pscover ",
 " /pstoedit.ignoredraw false  store ",
 " (executing dummy ImageAndImagemask done \\n) print ",
 " }  ",
 " def ",
 "  ",
 " /ImageAndImagemask ",
 " { 297 pscover ",
 " /pstoedit.image.isimagemask exch store ",
 " /pstoedit.image.fourthparam exch store ",
 " /pstoedit.image.procname exch store ",
 " /pstoedit.image.stringprefix exch store ",
 " /pstoedit.image.realproc exch store ",
 " pstoedit.ignoredraw pstoedit.ignoreimage or  ",
 " pstoedit.DEVICEINFO /HWResolution known not or  ",
 " { 298 pscover ",
 " (image operation ignored due to restriction of target format or driver\\n) true printwarning ",
 " verbosemode  ",
 " { 299 pscover ",
 " (ignoredraw :)     print pstoedit.ignoredraw  ",
 " { 300 pscover ",
 " (T) ",
 " }  ",
 " { 301 pscover ",
 " (F) ",
 " }  ",
 " ifelse print (\\n) print ",
 " (ignoreimage :)    print pstoedit.ignoreimage  ",
 " { 302 pscover ",
 " (T) ",
 " }  ",
 " { 303 pscover ",
 " (F) ",
 " }  ",
 " ifelse print (\\n) print ",
 " (hwres not known:) print pstoedit.DEVICEINFO /HWResolution known not  ",
 " { 304 pscover ",
 " (T) ",
 " }  ",
 " { 305 pscover ",
 " (F) ",
 " }  ",
 " ifelse print (\\n) print ",
 " }  ",
 " if ",
 " pstoedit.image.realproc ",
 " }  ",
 " { 306 pscover ",
 " backendSupportsPNGFileImages  ",
 " { 307 pscover ",
 " ImageTraceBoundingBox ",
 " -showclippath ",
 " dup type ",
 " verbosemode  ",
 " { 308 pscover ",
 " dup 40 -string cvs (handling datasource of type ) print print (\\n) print ",
 " }  ",
 " if ",
 " dup /filetype eq /pstoedit.image.isfile exch store ",
 " /dicttype eq  ",
 " { 309 pscover ",
 " (%begin dealing with image from dict\\n) -print ",
 "  ",
 " dup /Width get /pstoedit.image.width exch store ",
 " dup /Height get /pstoedit.image.height exch store ",
 " dup /ImageMatrix get /pstoedit.image.mat exch store ",
 " pstoedit.image.isimagemask  ",
 " { 310 pscover ",
 " dup /Decode get 0 get /pstoedit.image.decode exch store ",
 " }  ",
 " if ",
 "  ",
 "  ",
 "  ",
 " { %nc  ",
 " pstoedit.image.realproc ",
 " }  ",
 " pstoedit.image.isimagemask  ",
 " { 311 pscover ",
 " pstoedit.image.decode 0 eq  ",
 " { 312 pscover ",
 " (_mfd) % mask from dict - polarity false ",
 " }  ",
 " { 313 pscover ",
 " (_mtd) % mask from dict - polarity true ",
 " }  ",
 " }  ",
 " { 314 pscover ",
 " (_imd) % image from dict ",
 " }  ",
 " ifelse ",
 " processAsPNGimage ",
 " }  ",
 " { 315 pscover ",
 "  ",
 " false  ",
 " { 316 pscover ",
 " /pstoedit.image.datasrc exch store	 ",
 " /pstoedit.image.mat	    exch store ",
 " /pstoedit.image.bits    exch store ",
 " /pstoedit.image.height  exch store ",
 " /pstoedit.image.width   exch store  ",
 "  ",
 " pstoedit.image.width pstoedit.image.height pstoedit.image.bits pstoedit.image.mat  ",
 " { 317 pscover ",
 " pstoedit.image.isfile   ",
 " { 318 pscover ",
 " pstoedit.image.datasrc  read  ",
 " { 319 pscover ",
 " inttosinglechar  ",
 " }  ",
 " { 320 pscover ",
 " 0 -string  ",
 " }  ",
 " ifelse   ",
 " }  ",
 " { 321 pscover ",
 " pstoedit.image.datasrc  ",
 " (after calling datasrc2\\n) pstack print flush ",
 " }  ",
 " ifelse ",
 " }  ",
 " }  ",
 " { 322 pscover ",
 "  ",
 " exch					/pstoedit.image.mat	    exch store ",
 " exch					/pstoedit.image.bits    exch store  %  this is polarity (bool) for imagemask ",
 " exch					/pstoedit.image.height  exch store ",
 " exch					/pstoedit.image.width   exch store  ",
 "  ",
 " pstoedit.image.width exch ",
 " pstoedit.image.height exch  ",
 " pstoedit.image.isimagemask  ",
 " { 323 pscover ",
 " 1 % overwrite \"polarity\" with 1 if we use -image always  ",
 " }  ",
 " { 324 pscover ",
 " pstoedit.image.bits ",
 " }  ",
 " ifelse  exch  ",
 " pstoedit.image.mat exch ",
 "  ",
 " }  ",
 " ifelse ",
 "  ",
 " true  ",
 " { 325 pscover ",
 " { %nc  ",
 " -image %%%fixme  pstoedit.image.realproc  ",
 " }  ",
 " pstoedit.image.isimagemask  ",
 " { 326 pscover ",
 " pstoedit.image.bits % note bits hold the polarity value (bool) in this case ",
 " { 327 pscover ",
 " (_mtn) % imagemask  - normal (non dict ds) - polarity true ",
 " }  ",
 " { 328 pscover ",
 " (_mfn) % imagemask  - normal (non dict ds) - polarity false ",
 " }  ",
 " ifelse ",
 " }  ",
 " { 329 pscover ",
 " (_imn) % image - normal (non dict ds) ",
 " }  ",
 " ifelse ",
 " processAsPNGimage ",
 "  ",
 " }  ",
 " { 330 pscover ",
 " (TEST!! : not processing as PNG image \\n) print ",
 " pstoedit.image.realproc ",
 " }  ",
 " ifelse ",
 " }  ",
 " ifelse ",
 " }  ",
 " { 331 pscover ",
 " dup type ",
 " dup /filetype eq /pstoedit.image.isfile exch store ",
 " /dicttype eq  ",
 " { 332 pscover ",
 " 					(Level 2 version of image and imagemask not supported for this backend (due to lack of support for PNG files)\n) true printwarning ",
 " pstoedit.image.realproc ",
 "  ",
 " }  ",
 " { 333 pscover ",
 " ImageTraceBoundingBox ",
 " -showclippath ",
 " escapetext	 ",
 " { 334 pscover ",
 " (gsave\\n)  -print   ",
 " }  ",
 " { 335 pscover ",
 " pstoedit.image.stringprefix -print (begin\\n) -print  ",
 " }  ",
 " ifelse ",
 " /pstoedit.image.datasrc exch store ",
 " /pstoedit.image.mat	    exch store ",
 "  ",
 " escapetext not  ",
 " { 336 pscover ",
 " (% DC ) -print pstoedit.image.mat     ",
 " { 337 pscover ",
 " printTOS  ",
 " }  ",
 " forall (\\n) -print ",
 " pstoedit.image.stringprefix -print (imagematrix\\n) -print  ",
 " }  ",
 " if ",
 " /pstoedit.image.bits    exch store ",
 " /pstoedit.image.height  exch store ",
 " /pstoedit.image.width   exch store  ",
 "  ",
 " (% DC ) printdumponly pstoedit.image.width  printTOS (\\n) -print ",
 " pstoedit.image.stringprefix printdumponly (width\\n) printdumponly  ",
 " (% DC ) printdumponly pstoedit.image.height printTOS (\\n) -print ",
 " pstoedit.image.stringprefix printdumponly (height\\n) printdumponly  ",
 " (% DC ) printdumponly pstoedit.image.bits   printTOS (\\n) -print ",
 " pstoedit.image.stringprefix printdumponly pstoedit.image.fourthparam printdumponly (\\n) printdumponly ",
 "  ",
 " -gsave ",
 " pstoedit.image.mat matrix invertmatrix concat ",
 " matrix currentmatrix matrix defaultmatrix matrix invertmatrix matrix concatmatrix ",
 " escapetext  ",
 " { 338 pscover ",
 " ([ ) -print  ",
 " }  ",
 " { 339 pscover ",
 " (% DC ) -print  ",
 " }  ",
 " ifelse  ",
 " { 340 pscover ",
 " printTOS  ",
 " }  ",
 " forall  ",
 " escapetext  ",
 " { 341 pscover ",
 " (]  concat [ 1 0 0 1 0 0 ] ) -print  ",
 " }  ",
 " if ",
 " (\\n) -print ",
 " pstoedit.image.stringprefix printdumponly (normalized image currentmatrix\\n) printdumponly   ",
 " escapetext  ",
 " { 342 pscover ",
 " ({ currentfile imagestring readhexstring pop }\\n)  -print pstoedit.image.procname -print (\\n) -print   ",
 " }  ",
 " if ",
 " -grestore ",
 " pstoedit.image.width pstoedit.image.height pstoedit.image.bits pstoedit.image.mat  ",
 " { 343 pscover ",
 " pstoedit.image.isfile   ",
 " { 344 pscover ",
 " pstoedit.image.datasrc  read  ",
 " { 345 pscover ",
 " pstoedit.image.stringprefix printdumponly (data ) printdumponly   ",
 " dup   ",
 " dup 16 -lt  ",
 " { 346 pscover ",
 " (0) -print  ",
 " }  ",
 " if  ",
 " 16 2 -string cvrs -print ",
 " inttosinglechar  ",
 " }  ",
 " { 347 pscover ",
 " 0 -string  ",
 " }  ",
 " ifelse   ",
 " }  ",
 " { 348 pscover ",
 " pstoedit.image.datasrc  ",
 " pstoedit.image.stringprefix printdumponly (data ) printdumponly  ",
 " dup  ",
 " { 349 pscover ",
 " dup 16 -lt  ",
 " { 350 pscover ",
 " (0) -print  ",
 " }  ",
 " if ",
 " 16 2 -string cvrs -print  ",
 " }  ",
 " forall ",
 " }  ",
 " ifelse ",
 " (\\n) -print ",
 " }  ",
 " pstoedit.image.realproc ",
 " escapetext  ",
 " { 351 pscover ",
 " (grestore\\n)  -print   ",
 " }  ",
 " { 352 pscover ",
 " pstoedit.image.stringprefix -print (end\\n) -print  ",
 " }  ",
 " ifelse ",
 " -endshowclippath ",
 " }  ",
 " ifelse % level 2 ",
 " }  ",
 " ifelse % PNG images supported ",
 " }  ",
 " ifelse % ignoredraw ",
 " }  ",
 " def ",
 "  ",
 "  ",
 " /image  ",
 " { 353 pscover ",
 " { %nc  ",
 " -image  ",
 " }  ",
 " (\\%image:) (image) (bits) false ImageAndImagemask  ",
 " }  ",
 " soverload ",
 " /imagemask  ",
 " { 354 pscover ",
 " { %nc  ",
 " -imagemask  ",
 " }  ",
 " (\\%imagemask:) (imagemask) (polarity) true ImageAndImagemask  ",
 " }  ",
 " soverload ",
 " }  ",
 " if ",
 "  ",
 "  ",
 "  ",
 " pstoedit.initialize ",
 "  ",
 " (\\%!PS-Adobe-3.0\\n) -printalways ",
 " (\\%\\%Title: flattened PostScript generated from file: ) -printalways ",
 " inputfilename -printalways (\\n) -printalways ",
 " (\\%\\%Creator: pstoedit\\n) -printalways ",
 " (\\%\\%BoundingBox: \\(atend\\)\\n) -printalways ",
 " (\\%\\%Pages: \\(atend\\)\\n) -printalways ",
 " (\\%\\%EndComments\\n) -printalways ",
 " (\\%\\%BeginProlog\\n) -printalways ",
 " (/setPageSize { pop pop } def\\n) -printalways ",
 " (/ntranslate { neg exch neg exch translate } def\\n) -printalways ",
 "  ",
 " (/setshowparams { pop pop pop} def\\n) -printalways ",
 " (/awidthshowhex { dup /ASCIIHexDecode filter exch length 2 div cvi string readstring pop awidthshow } def\\n) -printalways ",
 "  ",
 " (/backendconstraints { pop pop } def\\n) -printalways ",
 "  ",
 "  ",
 " (/pstoedit.newfont { ) -printalways ",
 " (80 string cvs ) -printalways ",
 " ( findfont ) -printalways ",
 " ( dup length dict begin {1 index /FID ne {def} {pop pop} ifelse} forall ) -printalways ",
 " ( /Encoding ISOLatin1Encoding def  ) -printalways ",
 " ( dup 80 string cvs /FontName exch def ) -printalways ",
 " ( currentdict end ) -printalways ",
 " ( definefont pop) -printalways ",
 " ( } def\\n) -printalways ",
 " (/imagestring 1 string def\\n) -printalways ",
 " (\\%\\%EndProlog\\n) -printalways ",
 " (\\%\\%BeginSetup\\n) -printalways ",
 " (\\% textastext doflatten backendconstraints   \\n) -printalways ",
 " textastext  ",
 " { 355 pscover ",
 " (1 )  ",
 " }  ",
 " { 356 pscover ",
 " (0 )  ",
 " }  ",
 " ifelse -printalways ",
 " doflatten   ",
 " { 357 pscover ",
 " (1 )  ",
 " }  ",
 " { 358 pscover ",
 " (0 )  ",
 " }  ",
 " ifelse -printalways ",
 " (backendconstraints\\n) -printalways ",
 " (\\%\\%EndSetup\\n) -printalways ",
 " (\\%\\%Page: 1 1\\n) -print ",
 "  ",
 "  ",
 " delaybindversion  ",
 " { 359 pscover ",
 "  ",
 " revision 353 ge  ",
 " { 360 pscover ",
 " .bindoperators ",
 " NOBIND currentdict systemdict ne and ",
 " { 361 pscover ",
 " systemdict begin .bindoperators end  ",
 " }  ",
 " if ",
 " /DELAYBIND where  ",
 " { 362 pscover ",
 " pop DELAYBIND  ",
 " { 363 pscover ",
 " .bindnow  ",
 " }  ",
 " if  ",
 " }  ",
 " if ",
 " }  ",
 " if ",
 "  ",
 " systemdict readonly pop ",
 "  ",
 " systemdict /.setglobal known  ",
 " { 364 pscover ",
 " .setglobal  ",
 " }  ",
 " if  ",
 "  ",
 " }  ",
 " { 365 pscover ",
 " systemdict /.setglobal known  ",
 " { 366 pscover ",
 " .setglobal  ",
 " }  ",
 " if  ",
 "  ",
 "  ",
 "  ",
 " NOBIND ",
 " { 367 pscover ",
 " /bind /.bind load def  ",
 " }  ",
 " if ",
 " }  ",
 " ifelse ",
 "  ",
 "  ",
 " languagelevel 1 gt  ",
 " { 368 pscover ",
 " << /PageSize [612 792 ] >> setpagedevice ",
 " }  ",
 " if ",
 "  ",
 " currentdict /nameOfIncludeFile known  ",
 " { 369 pscover ",
 " nameOfIncludeFile run  ",
 " }  ",
 " if ",
 "  ",
 "  ",
 "  ",
 "  ",
 " 4 dict begin ",
 "  ",
 " /RotateDict currentdict def ",
 "  ",
 " /angle pstoedit.rotation def ",
 "  ",
 " angle 0 ne  ",
 " { 370 pscover ",
 " /languagelevel where  ",
 " { 371 pscover ",
 " pop languagelevel 2 ge  ",
 " }  ",
 " { 372 pscover ",
 " FALSE  ",
 " }  ",
 " ifelse  ",
 " { 373 pscover ",
 " /lastW 0 def ",
 " /lastH 0 def ",
 " << ",
 " /BeginPage  ",
 " { 374 pscover ",
 " //RotateDict begin ",
 " pop % page number ",
 " currentpagedevice /PageSize get aload pop % stack: W H ",
 " lastH ne exch lastW ne or  ",
 " { 375 pscover ",
 " << ",
 " /PageSize [ ",
 " currentpagedevice /PageSize get aload pop % stack: W H ",
 " exch % stack: newW newH ",
 " /lastW 2 index def ",
 " /lastH 1 index def ",
 " ] ",
 " >> setpagedevice % calls BeginPage recursively ",
 " }  ",
 " { 376 pscover ",
 " currentpagedevice /PageSize get aload pop % stack: width height ",
 " 2 div exch 2 div exch % stack: center ",
 " 2 copy translate //angle rotate neg exch neg translate ",
 " }  ",
 " ifelse ",
 " end % //RotateDict ",
 " }  ",
 " >> setpagedevice ",
 " }  ",
 " { 377 pscover ",
 " currentdevice getdeviceprops >> /HWSize get ",
 " aload pop exch 2 array astore ",
 " mark exch /HWSize exch currentdevice putdeviceprops pop ",
 " /adbFixup  ",
 " { 378 pscover ",
 " currentdevice getdeviceprops >> ",
 " dup /HWSize get aload pop 3 -1 roll ",
 " /HWResolution get aload pop ",
 " exch 4 -1 roll exch div 72 mul ",
 " 3 1 roll div 72 mul ",
 " 2 div exch 2 div exch ",
 " 2 copy translate //angle rotate neg exch neg translate ",
 " }  ",
 " bind odef ",
 " /adbShowpage /showpage load def ",
 " userdict begin /showpage  ",
 " { 379 pscover ",
 " adbShowpage adbFixup  ",
 " }  ",
 " bind odef end ",
 " adbFixup ",
 " statusdict begin ",
 " /adbSet /.setpagesize load def ",
 " /.setpagesize  ",
 " { 380 pscover ",
 " exch adbSet adbFixup ",
 " }  ",
 " bind def ",
 " end ",
 " }  ",
 " ifelse ",
 "  ",
 " }  ",
 " if ",
 "  ",
 " end % //RotateDict ",
 "  ",
 "  ",
 " inputfilename run ",
 "  ",
 " pstoedit.somethingprinted cvi 1 eq  ",
 " { 381 pscover ",
 " showpage % do one since no showpage was issued regularly ",
 " }  ",
 " if ",
 "  ",
 "  ",
 " pstoedit.quit ",
 "  ",
 "  ",
 " false  ",
 " { 382 pscover ",
 " /saaaaaa  ",
 " { 383 pscover ",
 " pstoedit.image.nr cvi 1 add 100 -string cvs pstoedit.image.nr copy pop ",
 "  ",
 " /pstoedit.image.outputfile pstoedit.nameOfOutputFilewithoutpercentD (_l2i) concatstrings  ",
 " pstoedit.image.nr cvi 20 -string cvs concatstrings (.png) concatstrings store ",
 "  ",
 " /pstoedit.image.stringprefix (%pngfileimage:) store ",
 "  ",
 " escapetext not  ",
 " { 384 pscover ",
 " (\\%pngfileimage:begin\\n) -print ",
 " -gsave ",
 " pstoedit.image.mat matrix invertmatrix concat ",
 " matrix currentmatrix matrix defaultmatrix matrix invertmatrix matrix concatmatrix ",
 " (% DC ) -print  ",
 " { 385 pscover ",
 " printTOS  ",
 " }  ",
 " forall (\\n) -print ",
 " pstoedit.image.stringprefix printdumponly (normalized image currentmatrix\\n) printdumponly   ",
 " -grestore ",
 "  ",
 " (% DC ) -print pstoedit.image.mat   ",
 " { 386 pscover ",
 " printTOS  ",
 " }  ",
 " forall (\\n) -print ",
 " pstoedit.image.stringprefix -print (imagematrix\\n) -print ",
 " pstoedit.image.stringprefix -print (filename ) -print ",
 " pstoedit.image.outputfile -print  (\\n) -print ",
 "  ",
 " (% DC ) printdumponly pstoedit.image.width  printTOS (\\n) -print ",
 " pstoedit.image.stringprefix printdumponly  ",
 " (width\\n) printdumponly  ",
 " (% DC ) printdumponly pstoedit.image.height printTOS (\\n) -print ",
 " pstoedit.image.stringprefix printdumponly  ",
 " (height\\n) printdumponly  ",
 " (\\%pngfileimage:end\\n) -print ",
 " }  ",
 " if ",
 " gsave ",
 " true  ",
 " { 387 pscover ",
 " mark ",
 " /OutputFile pstoedit.image.outputfile ",
 " /HWResolution [ 72 72 ] ",
 " /PageSize [ pstoedit.image.width pstoedit.image.height ] ",
 " (png16m) ",
 " finddevice  ",
 " putdeviceprops ",
 " setdevice ",
 " }  ",
 " if ",
 "  ",
 " false  ",
 " { 388 pscover ",
 " (png16m) ",
 " finddevice  ",
 " setdevice ",
 " << ",
 " /OutputFile pstoedit.image.outputfile ",
 " /HWResolution [ 72 72 ] ",
 " /PageSize [ pstoedit.image.width pstoedit.image.height ] ",
 " >> ",
 " setpagedevice ",
 " }  ",
 " if ",
 "  ",
 " pstoedit.image.mat 3 get 0 -lt  ",
 " { 389 pscover ",
 " pstoedit.image.mat 5 get 0 eq  ",
 " { 390 pscover ",
 " (Info: correcting image matrix - didn't follow PS conventions\\n) print ",
 " pstoedit.image.mat 5 pstoedit.image.mat 3 get -1 mul put ",
 " }  ",
 " if ",
 " }  ",
 " if ",
 "  ",
 " pstoedit.image.mat concat 1  -1 scale 0 -1  translate  ",
 "  ",
 " -image %pstoedit.realproc  %% it probably doesnt make sense to use imagemask on the virtual device ",
 "  ",
 "  ",
 " 0 .endpage .doneshowpage 1 true .outputpage pop ",
 "  ",
 " -grestore  %% Hier wird offenbar das gerestore mit output aufgerufen. Wieso ist unklar. ",
 "  ",
 "  ",
 " }  ",
 " def ",
 " }  ",
 " if ",
0
};
 
